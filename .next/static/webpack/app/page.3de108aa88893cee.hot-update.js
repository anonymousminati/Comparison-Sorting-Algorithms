/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=D%3A%5CComparison-Sorting-Algorithms%5Capp%5Cpage.tsx&server=false!":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=D%3A%5CComparison-Sorting-Algorithms%5Capp%5Cpage.tsx&server=false! ***!
  \*********************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

eval(__webpack_require__.ts("Promise.resolve(/*! import() eager */).then(__webpack_require__.bind(__webpack_require__, /*! ./app/page.tsx */ \"(app-pages-browser)/./app/page.tsx\"))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtZmxpZ2h0LWNsaWVudC1lbnRyeS1sb2FkZXIuanM/bW9kdWxlcz1EJTNBJTVDQ29tcGFyaXNvbi1Tb3J0aW5nLUFsZ29yaXRobXMlNUNhcHAlNUNwYWdlLnRzeCZzZXJ2ZXI9ZmFsc2UhIiwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8/ZWFiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQoLyogd2VicGFja01vZGU6IFwiZWFnZXJcIiAqLyBcIkQ6XFxcXENvbXBhcmlzb24tU29ydGluZy1BbGdvcml0aG1zXFxcXGFwcFxcXFxwYWdlLnRzeFwiKSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?modules=D%3A%5CComparison-Sorting-Algorithms%5Capp%5Cpage.tsx&server=false!\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js ***!
  \****************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-jsx-dev-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        var React = __webpack_require__(/*! next/dist/compiled/react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n        // ATTENTION\n        // When adding new symbols to this file,\n        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'\n        // The Symbol used to tag the ReactElement-like types.\n        var REACT_ELEMENT_TYPE = Symbol.for(\"react.element\");\n        var REACT_PORTAL_TYPE = Symbol.for(\"react.portal\");\n        var REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\");\n        var REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\");\n        var REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n        var REACT_PROVIDER_TYPE = Symbol.for(\"react.provider\");\n        var REACT_CONTEXT_TYPE = Symbol.for(\"react.context\");\n        var REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\");\n        var REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\");\n        var REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\");\n        var REACT_MEMO_TYPE = Symbol.for(\"react.memo\");\n        var REACT_LAZY_TYPE = Symbol.for(\"react.lazy\");\n        var REACT_OFFSCREEN_TYPE = Symbol.for(\"react.offscreen\");\n        var REACT_CACHE_TYPE = Symbol.for(\"react.cache\");\n        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;\n        var FAUX_ITERATOR_SYMBOL = \"@@iterator\";\n        function getIteratorFn(maybeIterable) {\n            if (maybeIterable === null || typeof maybeIterable !== \"object\") {\n                return null;\n            }\n            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n            if (typeof maybeIterator === \"function\") {\n                return maybeIterator;\n            }\n            return null;\n        }\n        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n        function error(format) {\n            {\n                {\n                    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){\n                        args[_key2 - 1] = arguments[_key2];\n                    }\n                    printWarning(\"error\", format, args);\n                }\n            }\n        }\n        function printWarning(level, format, args) {\n            // When changing this logic, you might want to also\n            // update consoleWithStackDev.www.js as well.\n            {\n                var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n                var stack = ReactDebugCurrentFrame.getStackAddendum();\n                if (stack !== \"\") {\n                    format += \"%s\";\n                    args = args.concat([\n                        stack\n                    ]);\n                } // eslint-disable-next-line react-internal/safe-string-coercion\n                var argsWithFormat = args.map(function(item) {\n                    return String(item);\n                }); // Careful: RN currently depends on this prefix\n                argsWithFormat.unshift(\"Warning: \" + format); // We intentionally don't use spread (or .apply) directly because it\n                // breaks IE9: https://github.com/facebook/react/issues/13610\n                // eslint-disable-next-line react-internal/no-production-logging\n                Function.prototype.apply.call(console[level], console, argsWithFormat);\n            }\n        }\n        // -----------------------------------------------------------------------------\n        var enableScopeAPI = false; // Experimental Create Event Handle API.\n        var enableCacheElement = false;\n        var enableTransitionTracing = false; // No known bugs, but needs performance testing\n        var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber\n        // stuff. Intended to enable React core members to more easily debug scheduling\n        // issues in DEV builds.\n        var enableDebugTracing = false;\n        var REACT_CLIENT_REFERENCE$2 = Symbol.for(\"react.client.reference\");\n        function isValidElementType(type) {\n            if (typeof type === \"string\" || typeof type === \"function\") {\n                return true;\n            } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).\n            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {\n                return true;\n            }\n            if (typeof type === \"object\" && type !== null) {\n                if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object\n                // types supported by any Flight configuration anywhere since\n                // we don't know which Flight build this will end up being used\n                // with.\n                type.$$typeof === REACT_CLIENT_REFERENCE$2 || type.getModuleId !== undefined) {\n                    return true;\n                }\n            }\n            return false;\n        }\n        function getWrappedName(outerType, innerType, wrapperName) {\n            var displayName = outerType.displayName;\n            if (displayName) {\n                return displayName;\n            }\n            var functionName = innerType.displayName || innerType.name || \"\";\n            return functionName !== \"\" ? wrapperName + \"(\" + functionName + \")\" : wrapperName;\n        } // Keep in sync with react-reconciler/getComponentNameFromFiber\n        function getContextName(type) {\n            return type.displayName || \"Context\";\n        }\n        var REACT_CLIENT_REFERENCE$1 = Symbol.for(\"react.client.reference\"); // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.\n        function getComponentNameFromType(type) {\n            if (type == null) {\n                // Host root, text node or just invalid type.\n                return null;\n            }\n            if (typeof type === \"function\") {\n                if (type.$$typeof === REACT_CLIENT_REFERENCE$1) {\n                    // TODO: Create a convention for naming client references with debug info.\n                    return null;\n                }\n                return type.displayName || type.name || null;\n            }\n            if (typeof type === \"string\") {\n                return type;\n            }\n            switch(type){\n                case REACT_FRAGMENT_TYPE:\n                    return \"Fragment\";\n                case REACT_PORTAL_TYPE:\n                    return \"Portal\";\n                case REACT_PROFILER_TYPE:\n                    return \"Profiler\";\n                case REACT_STRICT_MODE_TYPE:\n                    return \"StrictMode\";\n                case REACT_SUSPENSE_TYPE:\n                    return \"Suspense\";\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return \"SuspenseList\";\n                case REACT_CACHE_TYPE:\n                    {\n                        return \"Cache\";\n                    }\n            }\n            if (typeof type === \"object\") {\n                {\n                    if (typeof type.tag === \"number\") {\n                        error(\"Received an unexpected object in getComponentNameFromType(). \" + \"This is likely a bug in React. Please file an issue.\");\n                    }\n                }\n                switch(type.$$typeof){\n                    case REACT_CONTEXT_TYPE:\n                        var context = type;\n                        return getContextName(context) + \".Consumer\";\n                    case REACT_PROVIDER_TYPE:\n                        var provider = type;\n                        return getContextName(provider._context) + \".Provider\";\n                    case REACT_FORWARD_REF_TYPE:\n                        return getWrappedName(type, type.render, \"ForwardRef\");\n                    case REACT_MEMO_TYPE:\n                        var outerName = type.displayName || null;\n                        if (outerName !== null) {\n                            return outerName;\n                        }\n                        return getComponentNameFromType(type.type) || \"Memo\";\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                return getComponentNameFromType(init(payload));\n                            } catch (x) {\n                                return null;\n                            }\n                        }\n                }\n            }\n            return null;\n        }\n        var assign = Object.assign;\n        // Helpers to patch console.logs to avoid logging during side-effect free\n        // replaying on render function. This currently only patches the object\n        // lazily which won't cover if the log function was extracted eagerly.\n        // We could also eagerly patch the method.\n        var disabledDepth = 0;\n        var prevLog;\n        var prevInfo;\n        var prevWarn;\n        var prevError;\n        var prevGroup;\n        var prevGroupCollapsed;\n        var prevGroupEnd;\n        function disabledLog() {}\n        disabledLog.__reactDisabledLog = true;\n        function disableLogs() {\n            {\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ prevLog = console.log;\n                    prevInfo = console.info;\n                    prevWarn = console.warn;\n                    prevError = console.error;\n                    prevGroup = console.group;\n                    prevGroupCollapsed = console.groupCollapsed;\n                    prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099\n                    var props = {\n                        configurable: true,\n                        enumerable: true,\n                        value: disabledLog,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        info: props,\n                        log: props,\n                        warn: props,\n                        error: props,\n                        group: props,\n                        groupCollapsed: props,\n                        groupEnd: props\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                disabledDepth++;\n            }\n        }\n        function reenableLogs() {\n            {\n                disabledDepth--;\n                if (disabledDepth === 0) {\n                    /* eslint-disable react-internal/no-production-logging */ var props = {\n                        configurable: true,\n                        enumerable: true,\n                        writable: true\n                    }; // $FlowFixMe[cannot-write] Flow thinks console is immutable.\n                    Object.defineProperties(console, {\n                        log: assign({}, props, {\n                            value: prevLog\n                        }),\n                        info: assign({}, props, {\n                            value: prevInfo\n                        }),\n                        warn: assign({}, props, {\n                            value: prevWarn\n                        }),\n                        error: assign({}, props, {\n                            value: prevError\n                        }),\n                        group: assign({}, props, {\n                            value: prevGroup\n                        }),\n                        groupCollapsed: assign({}, props, {\n                            value: prevGroupCollapsed\n                        }),\n                        groupEnd: assign({}, props, {\n                            value: prevGroupEnd\n                        })\n                    });\n                /* eslint-enable react-internal/no-production-logging */ }\n                if (disabledDepth < 0) {\n                    error(\"disabledDepth fell below zero. \" + \"This is a bug in React. Please file an issue.\");\n                }\n            }\n        }\n        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;\n        var prefix;\n        function describeBuiltInComponentFrame(name, source, ownerFn) {\n            {\n                if (prefix === undefined) {\n                    // Extract the VM specific prefix used by each line.\n                    try {\n                        throw Error();\n                    } catch (x) {\n                        var match = x.stack.trim().match(/\\n( *(at )?)/);\n                        prefix = match && match[1] || \"\";\n                    }\n                } // We use the prefix to ensure our stacks line up with native stack frames.\n                return \"\\n\" + prefix + name;\n            }\n        }\n        var reentry = false;\n        var componentFrameCache;\n        {\n            var PossiblyWeakMap = typeof WeakMap === \"function\" ? WeakMap : Map;\n            componentFrameCache = new PossiblyWeakMap();\n        }\n        /**\n * Leverages native browser/VM stack frames to get proper details (e.g.\n * filename, line + col number) for a single component in a component stack. We\n * do this by:\n *   (1) throwing and catching an error in the function - this will be our\n *       control error.\n *   (2) calling the component which will eventually throw an error that we'll\n *       catch - this will be our sample error.\n *   (3) diffing the control and sample error stacks to find the stack frame\n *       which represents our component.\n */ function describeNativeComponentFrame(fn, construct) {\n            // If something asked for a stack inside a fake render, it should get ignored.\n            if (!fn || reentry) {\n                return \"\";\n            }\n            {\n                var frame = componentFrameCache.get(fn);\n                if (frame !== undefined) {\n                    return frame;\n                }\n            }\n            reentry = true;\n            var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe[incompatible-type] It does accept undefined.\n            Error.prepareStackTrace = undefined;\n            var previousDispatcher;\n            {\n                previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function\n                // for warnings.\n                ReactCurrentDispatcher.current = null;\n                disableLogs();\n            }\n            /**\n   * Finding a common stack frame between sample and control errors can be\n   * tricky given the different types and levels of stack trace truncation from\n   * different JS VMs. So instead we'll attempt to control what that common\n   * frame should be through this object method:\n   * Having both the sample and control errors be in the function under the\n   * `DescribeNativeComponentFrameRoot` property, + setting the `name` and\n   * `displayName` properties of the function ensures that a stack\n   * frame exists that has the method name `DescribeNativeComponentFrameRoot` in\n   * it for both control and sample stacks.\n   */ var RunInRootFrame = {\n                DetermineComponentFrameRoot: function() {\n                    var control;\n                    try {\n                        // This should throw.\n                        if (construct) {\n                            // Something should be setting the props in the constructor.\n                            var Fake = function() {\n                                throw Error();\n                            }; // $FlowFixMe[prop-missing]\n                            Object.defineProperty(Fake.prototype, \"props\", {\n                                set: function() {\n                                    // We use a throwing setter instead of frozen or non-writable props\n                                    // because that won't throw in a non-strict mode function.\n                                    throw Error();\n                                }\n                            });\n                            if (typeof Reflect === \"object\" && Reflect.construct) {\n                                // We construct a different control for this case to include any extra\n                                // frames added by the construct call.\n                                try {\n                                    Reflect.construct(Fake, []);\n                                } catch (x) {\n                                    control = x;\n                                }\n                                Reflect.construct(fn, [], Fake);\n                            } else {\n                                try {\n                                    Fake.call();\n                                } catch (x) {\n                                    control = x;\n                                } // $FlowFixMe[prop-missing] found when upgrading Flow\n                                fn.call(Fake.prototype);\n                            }\n                        } else {\n                            try {\n                                throw Error();\n                            } catch (x) {\n                                control = x;\n                            } // TODO(luna): This will currently only throw if the function component\n                            // tries to access React/ReactDOM/props. We should probably make this throw\n                            // in simple components too\n                            var maybePromise = fn(); // If the function component returns a promise, it's likely an async\n                            // component, which we don't yet support. Attach a noop catch handler to\n                            // silence the error.\n                            // TODO: Implement component stacks for async client components?\n                            if (maybePromise && typeof maybePromise.catch === \"function\") {\n                                maybePromise.catch(function() {});\n                            }\n                        }\n                    } catch (sample) {\n                        // This is inlined manually because closure doesn't do it for us.\n                        if (sample && control && typeof sample.stack === \"string\") {\n                            return [\n                                sample.stack,\n                                control.stack\n                            ];\n                        }\n                    }\n                    return [\n                        null,\n                        null\n                    ];\n                }\n            }; // $FlowFixMe[prop-missing]\n            RunInRootFrame.DetermineComponentFrameRoot.displayName = \"DetermineComponentFrameRoot\";\n            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, \"name\"); // Before ES6, the `name` property was not configurable.\n            if (namePropDescriptor && namePropDescriptor.configurable) {\n                // V8 utilizes a function's `name` property when generating a stack trace.\n                Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, // is set to `false`.\n                // $FlowFixMe[cannot-write]\n                \"name\", {\n                    value: \"DetermineComponentFrameRoot\"\n                });\n            }\n            try {\n                var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];\n                if (sampleStack && controlStack) {\n                    // This extracts the first frame from the sample that isn't also in the control.\n                    // Skipping one frame that we assume is the frame that calls the two.\n                    var sampleLines = sampleStack.split(\"\\n\");\n                    var controlLines = controlStack.split(\"\\n\");\n                    var s = 0;\n                    var c = 0;\n                    while(s < sampleLines.length && !sampleLines[s].includes(\"DetermineComponentFrameRoot\")){\n                        s++;\n                    }\n                    while(c < controlLines.length && !controlLines[c].includes(\"DetermineComponentFrameRoot\")){\n                        c++;\n                    } // We couldn't find our intentionally injected common root frame, attempt\n                    // to find another common root frame by search from the bottom of the\n                    // control stack...\n                    if (s === sampleLines.length || c === controlLines.length) {\n                        s = sampleLines.length - 1;\n                        c = controlLines.length - 1;\n                        while(s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]){\n                            // We expect at least one stack frame to be shared.\n                            // Typically this will be the root most one. However, stack frames may be\n                            // cut off due to maximum stack limits. In this case, one maybe cut off\n                            // earlier than the other. We assume that the sample is longer or the same\n                            // and there for cut off earlier. So we should find the root most frame in\n                            // the sample somewhere in the control.\n                            c--;\n                        }\n                    }\n                    for(; s >= 1 && c >= 0; s--, c--){\n                        // Next we find the first one that isn't the same which should be the\n                        // frame that called our sample function and the control.\n                        if (sampleLines[s] !== controlLines[c]) {\n                            // In V8, the first line is describing the message but other VMs don't.\n                            // If we're about to return the first line, and the control is also on the same\n                            // line, that's a pretty good indicator that our sample threw at same line as\n                            // the control. I.e. before we entered the sample frame. So we ignore this result.\n                            // This can happen if you passed a class to function component, or non-function.\n                            if (s !== 1 || c !== 1) {\n                                do {\n                                    s--;\n                                    c--; // We may still have similar intermediate frames from the construct call.\n                                    // The next one that isn't the same should be our match though.\n                                    if (c < 0 || sampleLines[s] !== controlLines[c]) {\n                                        // V8 adds a \"new\" prefix for native classes. Let's remove it to make it prettier.\n                                        var _frame = \"\\n\" + sampleLines[s].replace(\" at new \", \" at \"); // If our component frame is labeled \"<anonymous>\"\n                                        // but we have a user-provided \"displayName\"\n                                        // splice it in to make the stack more readable.\n                                        if (fn.displayName && _frame.includes(\"<anonymous>\")) {\n                                            _frame = _frame.replace(\"<anonymous>\", fn.displayName);\n                                        }\n                                        if (true) {\n                                            if (typeof fn === \"function\") {\n                                                componentFrameCache.set(fn, _frame);\n                                            }\n                                        } // Return the line we found.\n                                        return _frame;\n                                    }\n                                }while (s >= 1 && c >= 0);\n                            }\n                            break;\n                        }\n                    }\n                }\n            } finally{\n                reentry = false;\n                {\n                    ReactCurrentDispatcher.current = previousDispatcher;\n                    reenableLogs();\n                }\n                Error.prepareStackTrace = previousPrepareStackTrace;\n            } // Fallback to just using the name if we couldn't make it throw.\n            var name = fn ? fn.displayName || fn.name : \"\";\n            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : \"\";\n            {\n                if (typeof fn === \"function\") {\n                    componentFrameCache.set(fn, syntheticFrame);\n                }\n            }\n            return syntheticFrame;\n        }\n        function describeFunctionComponentFrame(fn, source, ownerFn) {\n            {\n                return describeNativeComponentFrame(fn, false);\n            }\n        }\n        function shouldConstruct(Component) {\n            var prototype = Component.prototype;\n            return !!(prototype && prototype.isReactComponent);\n        }\n        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {\n            if (type == null) {\n                return \"\";\n            }\n            if (typeof type === \"function\") {\n                {\n                    return describeNativeComponentFrame(type, shouldConstruct(type));\n                }\n            }\n            if (typeof type === \"string\") {\n                return describeBuiltInComponentFrame(type);\n            }\n            switch(type){\n                case REACT_SUSPENSE_TYPE:\n                    return describeBuiltInComponentFrame(\"Suspense\");\n                case REACT_SUSPENSE_LIST_TYPE:\n                    return describeBuiltInComponentFrame(\"SuspenseList\");\n            }\n            if (typeof type === \"object\") {\n                switch(type.$$typeof){\n                    case REACT_FORWARD_REF_TYPE:\n                        return describeFunctionComponentFrame(type.render);\n                    case REACT_MEMO_TYPE:\n                        // Memo may contain any component type so we recursively resolve it.\n                        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);\n                    case REACT_LAZY_TYPE:\n                        {\n                            var lazyComponent = type;\n                            var payload = lazyComponent._payload;\n                            var init = lazyComponent._init;\n                            try {\n                                // Lazy may contain any component type so we recursively resolve it.\n                                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);\n                            } catch (x) {}\n                        }\n                }\n            }\n            return \"\";\n        }\n        // $FlowFixMe[method-unbinding]\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\n        var loggedTypeFailures = {};\n        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;\n        function setCurrentlyValidatingElement$1(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame$1.setExtraStackFrame(null);\n                }\n            }\n        }\n        function checkPropTypes(typeSpecs, values, location, componentName, element) {\n            {\n                // $FlowFixMe[incompatible-use] This is okay but Flow doesn't know it.\n                var has = Function.call.bind(hasOwnProperty);\n                for(var typeSpecName in typeSpecs){\n                    if (has(typeSpecs, typeSpecName)) {\n                        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to\n                        // fail the render phase where it didn't fail before. So we log it.\n                        // After these have been cleaned up, we'll let them throw.\n                        try {\n                            // This is intentionally an invariant that gets caught. It's the same\n                            // behavior as without this statement except with a better message.\n                            if (typeof typeSpecs[typeSpecName] !== \"function\") {\n                                // eslint-disable-next-line react-internal/prod-error-codes\n                                var err = Error((componentName || \"React class\") + \": \" + location + \" type `\" + typeSpecName + \"` is invalid; \" + \"it must be a function, usually from the `prop-types` package, but received `\" + typeof typeSpecs[typeSpecName] + \"`.\" + \"This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                                err.name = \"Invariant Violation\";\n                                throw err;\n                            }\n                            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n                        } catch (ex) {\n                            error$1 = ex;\n                        }\n                        if (error$1 && !(error$1 instanceof Error)) {\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"%s: type specification of %s\" + \" `%s` is invalid; the type checker \" + \"function must return `null` or an `Error` but returned a %s. \" + \"You may have forgotten to pass an argument to the type checker \" + \"creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and \" + \"shape all require an argument).\", componentName || \"React class\", location, typeSpecName, typeof error$1);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {\n                            // Only monitor this failure once because there tends to be a lot of the\n                            // same error.\n                            loggedTypeFailures[error$1.message] = true;\n                            setCurrentlyValidatingElement$1(element);\n                            error(\"Failed %s type: %s\", location, error$1.message);\n                            setCurrentlyValidatingElement$1(null);\n                        }\n                    }\n                }\n            }\n        }\n        var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare\n        function isArray(a) {\n            return isArrayImpl(a);\n        }\n        /*\n * The `'' + value` pattern (used in perf-sensitive code) throws for Symbol\n * and Temporal.* types. See https://github.com/facebook/react/pull/22064.\n *\n * The functions in this module will throw an easier-to-understand,\n * easier-to-debug exception with a clear errors message message explaining the\n * problem. (Instead of a confusing exception thrown inside the implementation\n * of the `value` object).\n */ // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function typeName(value) {\n            {\n                // toStringTag is needed for namespaced types like Temporal.Instant\n                var hasToStringTag = typeof Symbol === \"function\" && Symbol.toStringTag;\n                var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\"; // $FlowFixMe[incompatible-return]\n                return type;\n            }\n        } // $FlowFixMe[incompatible-return] only called in DEV, so void return is not possible.\n        function willCoercionThrow(value) {\n            {\n                try {\n                    testStringCoercion(value);\n                    return false;\n                } catch (e) {\n                    return true;\n                }\n            }\n        }\n        function testStringCoercion(value) {\n            // If you ended up here by following an exception call stack, here's what's\n            // happened: you supplied an object or symbol value to React (as a prop, key,\n            // DOM attribute, CSS property, string ref, etc.) and when React tried to\n            // coerce it to a string using `'' + value`, an exception was thrown.\n            //\n            // The most common types that will cause this exception are `Symbol` instances\n            // and Temporal objects like `Temporal.Instant`. But any object that has a\n            // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this\n            // exception. (Library authors do this to prevent users from using built-in\n            // numeric operators like `+` or comparison operators like `>=` because custom\n            // methods are needed to perform accurate arithmetic or comparison.)\n            //\n            // To fix the problem, coerce this object or symbol value to a string before\n            // passing it to React. The most reliable way is usually `String(value)`.\n            //\n            // To find which value is throwing, check the browser or debugger console.\n            // Before this exception was thrown, there should be `console.error` output\n            // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the\n            // problem and how that type was used: key, atrribute, input value prop, etc.\n            // In most cases, this console output also shows the component and its\n            // ancestor components where the exception happened.\n            //\n            // eslint-disable-next-line react-internal/safe-string-coercion\n            return \"\" + value;\n        }\n        function checkKeyStringCoercion(value) {\n            {\n                if (willCoercionThrow(value)) {\n                    error(\"The provided key is an unsupported type %s.\" + \" This value must be coerced to a string before using it here.\", typeName(value));\n                    return testStringCoercion(value); // throw (to help callers find troubleshooting comments)\n                }\n            }\n        }\n        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;\n        var RESERVED_PROPS = {\n            key: true,\n            ref: true,\n            __self: true,\n            __source: true\n        };\n        var specialPropKeyWarningShown;\n        var specialPropRefWarningShown;\n        var didWarnAboutStringRefs;\n        {\n            didWarnAboutStringRefs = {};\n        }\n        function hasValidRef(config) {\n            {\n                if (hasOwnProperty.call(config, \"ref\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"ref\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.ref !== undefined;\n        }\n        function hasValidKey(config) {\n            {\n                if (hasOwnProperty.call(config, \"key\")) {\n                    var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n                    if (getter && getter.isReactWarning) {\n                        return false;\n                    }\n                }\n            }\n            return config.key !== undefined;\n        }\n        function warnIfStringRefCannotBeAutoConverted(config, self) {\n            {\n                if (typeof config.ref === \"string\" && ReactCurrentOwner$1.current && self && ReactCurrentOwner$1.current.stateNode !== self) {\n                    var componentName = getComponentNameFromType(ReactCurrentOwner$1.current.type);\n                    if (!didWarnAboutStringRefs[componentName]) {\n                        error('Component \"%s\" contains the string ref \"%s\". ' + \"Support for string refs will be removed in a future major release. \" + \"This case cannot be automatically converted to an arrow function. \" + \"We ask you to manually fix this case by using useRef() or createRef() instead. \" + \"Learn more about using refs safely here: \" + \"https://reactjs.org/link/strict-mode-string-ref\", getComponentNameFromType(ReactCurrentOwner$1.current.type), config.ref);\n                        didWarnAboutStringRefs[componentName] = true;\n                    }\n                }\n            }\n        }\n        function defineKeyPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingKey = function() {\n                    if (!specialPropKeyWarningShown) {\n                        specialPropKeyWarningShown = true;\n                        error(\"%s: `key` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingKey.isReactWarning = true;\n                Object.defineProperty(props, \"key\", {\n                    get: warnAboutAccessingKey,\n                    configurable: true\n                });\n            }\n        }\n        function defineRefPropWarningGetter(props, displayName) {\n            {\n                var warnAboutAccessingRef = function() {\n                    if (!specialPropRefWarningShown) {\n                        specialPropRefWarningShown = true;\n                        error(\"%s: `ref` is not a prop. Trying to access it will result \" + \"in `undefined` being returned. If you need to access the same \" + \"value within the child component, you should pass it as a different \" + \"prop. (https://reactjs.org/link/special-props)\", displayName);\n                    }\n                };\n                warnAboutAccessingRef.isReactWarning = true;\n                Object.defineProperty(props, \"ref\", {\n                    get: warnAboutAccessingRef,\n                    configurable: true\n                });\n            }\n        }\n        /**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, instanceof check\n * will not work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} props\n * @param {*} key\n * @param {string|object} ref\n * @param {*} owner\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @internal\n */ function ReactElement(type, key, ref, self, source, owner, props) {\n            var element = {\n                // This tag allows us to uniquely identify this as a React Element\n                $$typeof: REACT_ELEMENT_TYPE,\n                // Built-in properties that belong on the element\n                type: type,\n                key: key,\n                ref: ref,\n                props: props,\n                // Record the component responsible for creating this element.\n                _owner: owner\n            };\n            {\n                // The validation flag is currently mutative. We put it on\n                // an external backing store so that we can freeze the whole object.\n                // This can be replaced with a WeakMap once they are implemented in\n                // commonly used development environments.\n                element._store = {}; // To make comparing ReactElements easier for testing purposes, we make\n                // the validation flag non-enumerable (where possible, which should\n                // include every environment we run tests in), so the test framework\n                // ignores it.\n                Object.defineProperty(element._store, \"validated\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: true,\n                    value: false\n                }); // self and source are DEV only properties.\n                Object.defineProperty(element, \"_self\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: self\n                }); // Two elements created in two different places should be considered\n                // equal for testing purposes and therefore we hide it from enumeration.\n                Object.defineProperty(element, \"_source\", {\n                    configurable: false,\n                    enumerable: false,\n                    writable: false,\n                    value: source\n                });\n                if (Object.freeze) {\n                    Object.freeze(element.props);\n                    Object.freeze(element);\n                }\n            }\n            return element;\n        }\n        /**\n * https://github.com/reactjs/rfcs/pull/107\n * @param {*} type\n * @param {object} props\n * @param {string} key\n */ function jsxDEV$1(type, config, maybeKey, source, self) {\n            {\n                var propName; // Reserved names are extracted\n                var props = {};\n                var key = null;\n                var ref = null; // Currently, key can be spread in as a prop. This causes a potential\n                // issue if key is also explicitly declared (ie. <div {...props} key=\"Hi\" />\n                // or <div key=\"Hi\" {...props} /> ). We want to deprecate key spread,\n                // but as an intermediary step, we will use jsxDEV for everything except\n                // <div {...props} key=\"Hi\" />, because we aren't currently able to tell if\n                // key is explicitly declared to be undefined or not.\n                if (maybeKey !== undefined) {\n                    {\n                        checkKeyStringCoercion(maybeKey);\n                    }\n                    key = \"\" + maybeKey;\n                }\n                if (hasValidKey(config)) {\n                    {\n                        checkKeyStringCoercion(config.key);\n                    }\n                    key = \"\" + config.key;\n                }\n                if (hasValidRef(config)) {\n                    ref = config.ref;\n                    warnIfStringRefCannotBeAutoConverted(config, self);\n                } // Remaining properties are added to a new props object\n                for(propName in config){\n                    if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n                        props[propName] = config[propName];\n                    }\n                } // Resolve default props\n                if (type && type.defaultProps) {\n                    var defaultProps = type.defaultProps;\n                    for(propName in defaultProps){\n                        if (props[propName] === undefined) {\n                            props[propName] = defaultProps[propName];\n                        }\n                    }\n                }\n                if (key || ref) {\n                    var displayName = typeof type === \"function\" ? type.displayName || type.name || \"Unknown\" : type;\n                    if (key) {\n                        defineKeyPropWarningGetter(props, displayName);\n                    }\n                    if (ref) {\n                        defineRefPropWarningGetter(props, displayName);\n                    }\n                }\n                return ReactElement(type, key, ref, self, source, ReactCurrentOwner$1.current, props);\n            }\n        }\n        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;\n        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;\n        var REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\");\n        function setCurrentlyValidatingElement(element) {\n            {\n                if (element) {\n                    var owner = element._owner;\n                    var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);\n                    ReactDebugCurrentFrame.setExtraStackFrame(stack);\n                } else {\n                    ReactDebugCurrentFrame.setExtraStackFrame(null);\n                }\n            }\n        }\n        var propTypesMisspellWarningShown;\n        {\n            propTypesMisspellWarningShown = false;\n        }\n        /**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a ReactElement.\n * @final\n */ function isValidElement(object) {\n            {\n                return typeof object === \"object\" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;\n            }\n        }\n        function getDeclarationErrorAddendum() {\n            {\n                if (ReactCurrentOwner.current) {\n                    var name = getComponentNameFromType(ReactCurrentOwner.current.type);\n                    if (name) {\n                        return \"\\n\\nCheck the render method of `\" + name + \"`.\";\n                    }\n                }\n                return \"\";\n            }\n        }\n        function getSourceInfoErrorAddendum(source) {\n            {\n                if (source !== undefined) {\n                    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, \"\");\n                    var lineNumber = source.lineNumber;\n                    return \"\\n\\nCheck your code at \" + fileName + \":\" + lineNumber + \".\";\n                }\n                return \"\";\n            }\n        }\n        /**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */ var ownerHasKeyUseWarning = {};\n        function getCurrentComponentErrorInfo(parentType) {\n            {\n                var info = getDeclarationErrorAddendum();\n                if (!info) {\n                    var parentName = getComponentNameFromType(parentType);\n                    if (parentName) {\n                        info = \"\\n\\nCheck the top-level render call using <\" + parentName + \">.\";\n                    }\n                }\n                return info;\n            }\n        }\n        /**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */ function validateExplicitKey(element, parentType) {\n            {\n                if (!element._store || element._store.validated || element.key != null) {\n                    return;\n                }\n                element._store.validated = true;\n                var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n                if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n                    return;\n                }\n                ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a\n                // property, it may be the creator of the child that's responsible for\n                // assigning it a key.\n                var childOwner = \"\";\n                if (element && element._owner && element._owner !== ReactCurrentOwner.current) {\n                    // Give the component that originally created this child.\n                    childOwner = \" It was passed a child from \" + getComponentNameFromType(element._owner.type) + \".\";\n                }\n                setCurrentlyValidatingElement(element);\n                error('Each child in a list should have a unique \"key\" prop.' + \"%s%s See https://reactjs.org/link/warning-keys for more information.\", currentComponentErrorInfo, childOwner);\n                setCurrentlyValidatingElement(null);\n            }\n        }\n        /**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */ function validateChildKeys(node, parentType) {\n            {\n                if (typeof node !== \"object\" || !node) {\n                    return;\n                }\n                if (node.$$typeof === REACT_CLIENT_REFERENCE) ;\n                else if (isArray(node)) {\n                    for(var i = 0; i < node.length; i++){\n                        var child = node[i];\n                        if (isValidElement(child)) {\n                            validateExplicitKey(child, parentType);\n                        }\n                    }\n                } else if (isValidElement(node)) {\n                    // This element was passed in a valid location.\n                    if (node._store) {\n                        node._store.validated = true;\n                    }\n                } else {\n                    var iteratorFn = getIteratorFn(node);\n                    if (typeof iteratorFn === \"function\") {\n                        // Entry iterators used to provide implicit keys,\n                        // but now we print a separate warning for them later.\n                        if (iteratorFn !== node.entries) {\n                            var iterator = iteratorFn.call(node);\n                            var step;\n                            while(!(step = iterator.next()).done){\n                                if (isValidElement(step.value)) {\n                                    validateExplicitKey(step.value, parentType);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        /**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */ function validatePropTypes(element) {\n            {\n                var type = element.type;\n                if (type === null || type === undefined || typeof type === \"string\") {\n                    return;\n                }\n                if (type.$$typeof === REACT_CLIENT_REFERENCE) {\n                    return;\n                }\n                var propTypes;\n                if (typeof type === \"function\") {\n                    propTypes = type.propTypes;\n                } else if (typeof type === \"object\" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.\n                // Inner props are checked in the reconciler.\n                type.$$typeof === REACT_MEMO_TYPE)) {\n                    propTypes = type.propTypes;\n                } else {\n                    return;\n                }\n                if (propTypes) {\n                    // Intentionally inside to avoid triggering lazy initializers:\n                    var name = getComponentNameFromType(type);\n                    checkPropTypes(propTypes, element.props, \"prop\", name, element);\n                } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n                    propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:\n                    var _name = getComponentNameFromType(type);\n                    error(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", _name || \"Unknown\");\n                }\n                if (typeof type.getDefaultProps === \"function\" && !type.getDefaultProps.isReactClassApproved) {\n                    error(\"getDefaultProps is only used on classic React.createClass \" + \"definitions. Use a static property named `defaultProps` instead.\");\n                }\n            }\n        }\n        /**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */ function validateFragmentProps(fragment) {\n            {\n                var keys = Object.keys(fragment.props);\n                for(var i = 0; i < keys.length; i++){\n                    var key = keys[i];\n                    if (key !== \"children\" && key !== \"key\") {\n                        setCurrentlyValidatingElement(fragment);\n                        error(\"Invalid prop `%s` supplied to `React.Fragment`. \" + \"React.Fragment can only have `key` and `children` props.\", key);\n                        setCurrentlyValidatingElement(null);\n                        break;\n                    }\n                }\n                if (fragment.ref !== null) {\n                    setCurrentlyValidatingElement(fragment);\n                    error(\"Invalid attribute `ref` supplied to `React.Fragment`.\");\n                    setCurrentlyValidatingElement(null);\n                }\n            }\n        }\n        var didWarnAboutKeySpread = {};\n        function jsxWithValidation(type, props, key, isStaticChildren, source, self) {\n            {\n                var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to\n                // succeed and there will likely be errors in render.\n                if (!validType) {\n                    var info = \"\";\n                    if (type === undefined || typeof type === \"object\" && type !== null && Object.keys(type).length === 0) {\n                        info += \" You likely forgot to export your component from the file \" + \"it's defined in, or you might have mixed up default and named imports.\";\n                    }\n                    var sourceInfo = getSourceInfoErrorAddendum(source);\n                    if (sourceInfo) {\n                        info += sourceInfo;\n                    } else {\n                        info += getDeclarationErrorAddendum();\n                    }\n                    var typeString;\n                    if (type === null) {\n                        typeString = \"null\";\n                    } else if (isArray(type)) {\n                        typeString = \"array\";\n                    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {\n                        typeString = \"<\" + (getComponentNameFromType(type.type) || \"Unknown\") + \" />\";\n                        info = \" Did you accidentally export a JSX literal instead of a component?\";\n                    } else {\n                        typeString = typeof type;\n                    }\n                    error(\"React.jsx: type is invalid -- expected a string (for \" + \"built-in components) or a class/function (for composite \" + \"components) but got: %s.%s\", typeString, info);\n                }\n                var element = jsxDEV$1(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.\n                // TODO: Drop this when these are no longer allowed as the type argument.\n                if (element == null) {\n                    return element;\n                } // Skip key warning if the type isn't valid since our key validation logic\n                // doesn't expect a non-string/function type and can throw confusing errors.\n                // We don't want exception behavior to differ between dev and prod.\n                // (Rendering will throw with a helpful message and as soon as the type is\n                // fixed, the key warnings will appear.)\n                if (validType) {\n                    var children = props.children;\n                    if (children !== undefined) {\n                        if (isStaticChildren) {\n                            if (isArray(children)) {\n                                for(var i = 0; i < children.length; i++){\n                                    validateChildKeys(children[i], type);\n                                }\n                                if (Object.freeze) {\n                                    Object.freeze(children);\n                                }\n                            } else {\n                                error(\"React.jsx: Static children should always be an array. \" + \"You are likely explicitly calling React.jsxs or React.jsxDEV. \" + \"Use the Babel transform instead.\");\n                            }\n                        } else {\n                            validateChildKeys(children, type);\n                        }\n                    }\n                }\n                if (hasOwnProperty.call(props, \"key\")) {\n                    var componentName = getComponentNameFromType(type);\n                    var keys = Object.keys(props).filter(function(k) {\n                        return k !== \"key\";\n                    });\n                    var beforeExample = keys.length > 0 ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n                    if (!didWarnAboutKeySpread[componentName + beforeExample]) {\n                        var afterExample = keys.length > 0 ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\";\n                        error('A props object containing a \"key\" prop is being spread into JSX:\\n' + \"  let props = %s;\\n\" + \"  <%s {...props} />\\n\" + \"React keys must be passed directly to JSX without using spread:\\n\" + \"  let props = %s;\\n\" + \"  <%s key={someKey} {...props} />\", beforeExample, componentName, afterExample, componentName);\n                        didWarnAboutKeySpread[componentName + beforeExample] = true;\n                    }\n                }\n                if (type === REACT_FRAGMENT_TYPE) {\n                    validateFragmentProps(element);\n                } else {\n                    validatePropTypes(element);\n                }\n                return element;\n            }\n        } // These two functions exist to still get child warnings in dev\n        var jsxDEV = jsxWithValidation;\n        exports.Fragment = REACT_FRAGMENT_TYPE;\n        exports.jsxDEV = jsxDEV;\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react/jsx-dev-runtime.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcmVhY3QvanN4LWRldi1ydW50aW1lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsS0FBeUIsRUFBYyxFQUUxQyxNQUFNO0lBQ0xDLDhMQUF5QjtBQUMzQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0L2pzeC1kZXYtcnVudGltZS5qcz9jYTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtZGV2LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtanN4LWRldi1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/algorithms/bubbleSort.tsx":
/*!***************************************!*\
  !*** ./app/algorithms/bubbleSort.tsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   bubbleSort: function() { return /* binding */ bubbleSort; }\n/* harmony export */ });\nconst bubbleSort = async (array, animationSpeed, setCurrentSortingArray, setSprings)=>{\n    let arrCopy = [\n        ...array\n    ];\n    const n = arrCopy.length;\n    for(let i = 0; i < n - 1; i++){\n        for(let j = 0; j < n - i - 1; j++){\n            if (arrCopy[j] > arrCopy[j + 1]) {\n                swap(arrCopy, j, j + 1);\n                setCurrentSortingArray([\n                    ...arrCopy\n                ]);\n                await new Promise((resolve)=>setTimeout(resolve, 110 - animationSpeed));\n                setSprings((index)=>({\n                        height: arrCopy[index]\n                    }));\n                arrCopy;\n            }\n        }\n    }\n};\nconst swap = (arr, i, j)=>{\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9hbGdvcml0aG1zL2J1YmJsZVNvcnQudHN4IiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxhQUFhLE9BQU9DLE9BQWlCQyxnQkFBd0JDLHdCQUE2QkM7SUFFbkcsSUFBSUMsVUFBVTtXQUFJSjtLQUFNO0lBQ3hCLE1BQU1LLElBQUlELFFBQVFFLE1BQU07SUFFeEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLElBQUksR0FBR0UsSUFBSztRQUM5QixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsSUFBSUUsSUFBSSxHQUFHQyxJQUFLO1lBQ2xDLElBQUlKLE9BQU8sQ0FBQ0ksRUFBRSxHQUFHSixPQUFPLENBQUNJLElBQUksRUFBRSxFQUFFO2dCQUMvQkMsS0FBS0wsU0FBU0ksR0FBR0EsSUFBSTtnQkFFckJOLHVCQUF1Qjt1QkFBSUU7aUJBQVE7Z0JBQ25DLE1BQU0sSUFBSU0sUUFBUSxDQUFDQyxVQUFZQyxXQUFXRCxTQUFTLE1BQU1WO2dCQUN6REUsV0FBVyxDQUFDVSxRQUFvQjt3QkFBRUMsUUFBUVYsT0FBTyxDQUFDUyxNQUFNO29CQUFDO2dCQUN4RFQ7WUFDSDtRQUNGO0lBQ0Y7QUFDRixFQUFFO0FBRUYsTUFBTUssT0FBTyxDQUFDTSxLQUFlUixHQUFXQztJQUN0QyxNQUFNUSxPQUFPRCxHQUFHLENBQUNSLEVBQUU7SUFDbkJRLEdBQUcsQ0FBQ1IsRUFBRSxHQUFHUSxHQUFHLENBQUNQLEVBQUU7SUFDZk8sR0FBRyxDQUFDUCxFQUFFLEdBQUdRO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2FsZ29yaXRobXMvYnViYmxlU29ydC50c3g/NWNkYyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgYnViYmxlU29ydCA9IGFzeW5jIChhcnJheTogbnVtYmVyW10sIGFuaW1hdGlvblNwZWVkOiBudW1iZXIsIHNldEN1cnJlbnRTb3J0aW5nQXJyYXk6IGFueSwgc2V0U3ByaW5nczogYW55KSA9PiB7XHJcblxyXG4gICAgbGV0IGFyckNvcHkgPSBbLi4uYXJyYXldO1xyXG4gICAgY29uc3QgbiA9IGFyckNvcHkubGVuZ3RoO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbiAtIDE7IGkrKykge1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG4gLSBpIC0gMTsgaisrKSB7XHJcbiAgICAgICAgaWYgKGFyckNvcHlbal0gPiBhcnJDb3B5W2ogKyAxXSkge1xyXG4gICAgICAgICAgc3dhcChhcnJDb3B5LCBqLCBqICsgMSk7XHJcblxyXG4gICAgICAgICAgc2V0Q3VycmVudFNvcnRpbmdBcnJheShbLi4uYXJyQ29weV0pO1xyXG4gICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTEwIC0gYW5pbWF0aW9uU3BlZWQpKTtcclxuICAgICAgICAgIHNldFNwcmluZ3MoKGluZGV4IDogbnVtYmVyKSA9PiAoeyBoZWlnaHQ6IGFyckNvcHlbaW5kZXhdIH0pKTtcclxuICAgICAgICAgIChhcnJDb3B5KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBzd2FwID0gKGFycjogbnVtYmVyW10sIGk6IG51bWJlciwgajogbnVtYmVyKSA9PiB7XHJcbiAgICBjb25zdCB0ZW1wID0gYXJyW2ldO1xyXG4gICAgYXJyW2ldID0gYXJyW2pdO1xyXG4gICAgYXJyW2pdID0gdGVtcDtcclxuICB9OyJdLCJuYW1lcyI6WyJidWJibGVTb3J0IiwiYXJyYXkiLCJhbmltYXRpb25TcGVlZCIsInNldEN1cnJlbnRTb3J0aW5nQXJyYXkiLCJzZXRTcHJpbmdzIiwiYXJyQ29weSIsIm4iLCJsZW5ndGgiLCJpIiwiaiIsInN3YXAiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJpbmRleCIsImhlaWdodCIsImFyciIsInRlbXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/algorithms/bubbleSort.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/algorithms/insertionSort.tsx":
/*!******************************************!*\
  !*** ./app/algorithms/insertionSort.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   insertionSort: function() { return /* binding */ insertionSort; }\n/* harmony export */ });\nconst insertionSort = async (array, animationSpeed, setCurrentSortingArray, setSprings)=>{\n    const n = array.length;\n    let arrCopy = [\n        ...array\n    ];\n    for(let i = 1; i < n; i++){\n        let key = arrCopy[i];\n        let j = i - 1;\n        while(j >= 0 && arrCopy[j] > key){\n            arrCopy[j + 1] = arrCopy[j];\n            j = j - 1;\n            setCurrentSortingArray([\n                ...arrCopy\n            ]);\n            await new Promise((resolve)=>setTimeout(resolve, 110 - animationSpeed));\n            setSprings((index)=>({\n                    height: arrCopy[index]\n                }));\n        }\n        arrCopy[j + 1] = key;\n        setCurrentSortingArray([\n            ...arrCopy\n        ]);\n        await new Promise((resolve)=>setTimeout(resolve, 110 - animationSpeed));\n        setSprings((index)=>({\n                height: arrCopy[index]\n            }));\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9hbGdvcml0aG1zL2luc2VydGlvblNvcnQudHN4IiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxnQkFBZ0IsT0FBT0MsT0FBaUJDLGdCQUF3QkMsd0JBQTZCQztJQUV0RyxNQUFNQyxJQUFJSixNQUFNSyxNQUFNO0lBQ3RCLElBQUlDLFVBQVU7V0FBSU47S0FBTTtJQUV4QixJQUFLLElBQUlPLElBQUksR0FBR0EsSUFBSUgsR0FBR0csSUFBSztRQUMxQixJQUFJQyxNQUFNRixPQUFPLENBQUNDLEVBQUU7UUFDcEIsSUFBSUUsSUFBSUYsSUFBSTtRQUVaLE1BQU9FLEtBQUssS0FBS0gsT0FBTyxDQUFDRyxFQUFFLEdBQUdELElBQUs7WUFDakNGLE9BQU8sQ0FBQ0csSUFBSSxFQUFFLEdBQUdILE9BQU8sQ0FBQ0csRUFBRTtZQUMzQkEsSUFBSUEsSUFBSTtZQUVSUCx1QkFBdUI7bUJBQUlJO2FBQVE7WUFDbkMsTUFBTSxJQUFJSSxRQUFRLENBQUNDLFVBQVlDLFdBQVdELFNBQVMsTUFBTVY7WUFDekRFLFdBQVcsQ0FBQ1UsUUFBb0I7b0JBQUVDLFFBQVFSLE9BQU8sQ0FBQ08sTUFBTTtnQkFBQztRQUMzRDtRQUVBUCxPQUFPLENBQUNHLElBQUksRUFBRSxHQUFHRDtRQUNqQk4sdUJBQXVCO2VBQUlJO1NBQVE7UUFFbkMsTUFBTSxJQUFJSSxRQUFRLENBQUNDLFVBQVlDLFdBQVdELFNBQVMsTUFBTVY7UUFDekRFLFdBQVcsQ0FBQ1UsUUFBb0I7Z0JBQUVDLFFBQVFSLE9BQU8sQ0FBQ08sTUFBTTtZQUFDO0lBQzNEO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvYWxnb3JpdGhtcy9pbnNlcnRpb25Tb3J0LnRzeD9lOTBiIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBpbnNlcnRpb25Tb3J0ID0gYXN5bmMgKGFycmF5OiBudW1iZXJbXSwgYW5pbWF0aW9uU3BlZWQ6IG51bWJlciwgc2V0Q3VycmVudFNvcnRpbmdBcnJheTogYW55LCBzZXRTcHJpbmdzOiBhbnkpID0+IHtcclxuXHJcbiAgICBjb25zdCBuID0gYXJyYXkubGVuZ3RoO1xyXG4gICAgbGV0IGFyckNvcHkgPSBbLi4uYXJyYXldO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgIGxldCBrZXkgPSBhcnJDb3B5W2ldO1xyXG4gICAgICBsZXQgaiA9IGkgLSAxO1xyXG5cclxuICAgICAgd2hpbGUgKGogPj0gMCAmJiBhcnJDb3B5W2pdID4ga2V5KSB7XHJcbiAgICAgICAgYXJyQ29weVtqICsgMV0gPSBhcnJDb3B5W2pdO1xyXG4gICAgICAgIGogPSBqIC0gMTtcclxuXHJcbiAgICAgICAgc2V0Q3VycmVudFNvcnRpbmdBcnJheShbLi4uYXJyQ29weV0pO1xyXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDExMCAtIGFuaW1hdGlvblNwZWVkKSk7XHJcbiAgICAgICAgc2V0U3ByaW5ncygoaW5kZXggOiBudW1iZXIpID0+ICh7IGhlaWdodDogYXJyQ29weVtpbmRleF0gfSkpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhcnJDb3B5W2ogKyAxXSA9IGtleTtcclxuICAgICAgc2V0Q3VycmVudFNvcnRpbmdBcnJheShbLi4uYXJyQ29weV0pO1xyXG5cclxuICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTEwIC0gYW5pbWF0aW9uU3BlZWQpKTtcclxuICAgICAgc2V0U3ByaW5ncygoaW5kZXggOiBudW1iZXIpID0+ICh7IGhlaWdodDogYXJyQ29weVtpbmRleF0gfSkpO1xyXG4gICAgfVxyXG4gIH07Il0sIm5hbWVzIjpbImluc2VydGlvblNvcnQiLCJhcnJheSIsImFuaW1hdGlvblNwZWVkIiwic2V0Q3VycmVudFNvcnRpbmdBcnJheSIsInNldFNwcmluZ3MiLCJuIiwibGVuZ3RoIiwiYXJyQ29weSIsImkiLCJrZXkiLCJqIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiaW5kZXgiLCJoZWlnaHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/algorithms/insertionSort.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/algorithms/mergeSort.tsx":
/*!**************************************!*\
  !*** ./app/algorithms/mergeSort.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeSort: function() { return /* binding */ mergeSort; }\n/* harmony export */ });\nconst mergeSort = async (array, animationSpeed, setCurrentSortingArray, setSprings)=>{\n    const merge = async (arr, low, mid, high)=>{\n        const left = arr.slice(low, mid + 1);\n        const right = arr.slice(mid + 1, high + 1);\n        let i = 0, j = 0, k = low;\n        while(i < left.length && j < right.length){\n            if (left[i] <= right[j]) {\n                arr[k] = left[i];\n                i++;\n            } else {\n                arr[k] = right[j];\n                j++;\n            }\n            setCurrentSortingArray([\n                ...arr\n            ]);\n            await new Promise((resolve)=>setTimeout(resolve, 110 - animationSpeed));\n            setSprings((index)=>({\n                    height: arr[index]\n                }));\n            arr;\n            k++;\n        }\n        while(i < left.length){\n            arr[k] = left[i];\n            i++;\n            k++;\n            setCurrentSortingArray([\n                ...arr\n            ]);\n            await new Promise((resolve)=>setTimeout(resolve, 110 - animationSpeed));\n            setSprings((index)=>({\n                    height: arr[index]\n                }));\n            arr;\n        }\n        while(j < right.length){\n            arr[k] = right[j];\n            j++;\n            k++;\n            setCurrentSortingArray([\n                ...arr\n            ]);\n            await new Promise((resolve)=>setTimeout(resolve, 110 - animationSpeed));\n            setSprings((index)=>({\n                    height: arr[index]\n                }));\n            arr;\n        }\n    };\n    const mergeSortHelper = async (arr, low, high)=>{\n        if (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            await mergeSortHelper(arr, low, mid);\n            await mergeSortHelper(arr, mid + 1, high);\n            await merge(arr, low, mid, high);\n        }\n    };\n    let arrCopy = [\n        ...array\n    ];\n    await mergeSortHelper(arrCopy, 0, arrCopy.length - 1);\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9hbGdvcml0aG1zL21lcmdlU29ydC50c3giLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFlBQVksT0FBT0MsT0FBaUJDLGdCQUF3QkMsd0JBQTZCQztJQUVsRyxNQUFNQyxRQUFRLE9BQU9DLEtBQWVDLEtBQWFDLEtBQWFDO1FBQzFELE1BQU1DLE9BQU9KLElBQUlLLEtBQUssQ0FBQ0osS0FBS0MsTUFBTTtRQUNsQyxNQUFNSSxRQUFRTixJQUFJSyxLQUFLLENBQUNILE1BQU0sR0FBR0MsT0FBTztRQUV4QyxJQUFJSSxJQUFJLEdBQ05DLElBQUksR0FDSkMsSUFBSVI7UUFFTixNQUFPTSxJQUFJSCxLQUFLTSxNQUFNLElBQUlGLElBQUlGLE1BQU1JLE1BQU0sQ0FBRTtZQUMxQyxJQUFJTixJQUFJLENBQUNHLEVBQUUsSUFBSUQsS0FBSyxDQUFDRSxFQUFFLEVBQUU7Z0JBQ3ZCUixHQUFHLENBQUNTLEVBQUUsR0FBR0wsSUFBSSxDQUFDRyxFQUFFO2dCQUNoQkE7WUFDRixPQUFPO2dCQUNMUCxHQUFHLENBQUNTLEVBQUUsR0FBR0gsS0FBSyxDQUFDRSxFQUFFO2dCQUNqQkE7WUFDRjtZQUVBWCx1QkFBdUI7bUJBQUlHO2FBQUk7WUFFL0IsTUFBTSxJQUFJVyxRQUFRLENBQUNDLFVBQVlDLFdBQVdELFNBQVMsTUFBTWhCO1lBQ3pERSxXQUFXLENBQUNnQixRQUFvQjtvQkFBRUMsUUFBUWYsR0FBRyxDQUFDYyxNQUFNO2dCQUFDO1lBQ3BEZDtZQUVEUztRQUNGO1FBRUEsTUFBT0YsSUFBSUgsS0FBS00sTUFBTSxDQUFFO1lBQ3RCVixHQUFHLENBQUNTLEVBQUUsR0FBR0wsSUFBSSxDQUFDRyxFQUFFO1lBQ2hCQTtZQUNBRTtZQUVBWix1QkFBdUI7bUJBQUlHO2FBQUk7WUFDL0IsTUFBTSxJQUFJVyxRQUFRLENBQUNDLFVBQVlDLFdBQVdELFNBQVMsTUFBTWhCO1lBQ3pERSxXQUFXLENBQUNnQixRQUFvQjtvQkFBRUMsUUFBUWYsR0FBRyxDQUFDYyxNQUFNO2dCQUFDO1lBQ3BEZDtRQUNIO1FBRUEsTUFBT1EsSUFBSUYsTUFBTUksTUFBTSxDQUFFO1lBQ3ZCVixHQUFHLENBQUNTLEVBQUUsR0FBR0gsS0FBSyxDQUFDRSxFQUFFO1lBQ2pCQTtZQUNBQztZQUVBWix1QkFBdUI7bUJBQUlHO2FBQUk7WUFDL0IsTUFBTSxJQUFJVyxRQUFRLENBQUNDLFVBQVlDLFdBQVdELFNBQVMsTUFBTWhCO1lBQ3pERSxXQUFXLENBQUNnQixRQUFvQjtvQkFBRUMsUUFBUWYsR0FBRyxDQUFDYyxNQUFNO2dCQUFDO1lBQ3BEZDtRQUNIO0lBQ0Y7SUFFRixNQUFNZ0Isa0JBQWtCLE9BQU9oQixLQUFlQyxLQUFhRTtRQUN2RCxJQUFJRixNQUFNRSxNQUFNO1lBQ2QsTUFBTUQsTUFBTWUsS0FBS0MsS0FBSyxDQUFDLENBQUNqQixNQUFNRSxJQUFHLElBQUs7WUFFdEMsTUFBTWEsZ0JBQWdCaEIsS0FBS0MsS0FBS0M7WUFDaEMsTUFBTWMsZ0JBQWdCaEIsS0FBS0UsTUFBTSxHQUFHQztZQUNwQyxNQUFNSixNQUFNQyxLQUFLQyxLQUFLQyxLQUFLQztRQUM3QjtJQUNGO0lBRUYsSUFBSWdCLFVBQVU7V0FBSXhCO0tBQU07SUFDeEIsTUFBTXFCLGdCQUFnQkcsU0FBUyxHQUFHQSxRQUFRVCxNQUFNLEdBQUc7QUFFdkQsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvYWxnb3JpdGhtcy9tZXJnZVNvcnQudHN4PzA1MWIiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IG1lcmdlU29ydCA9IGFzeW5jIChhcnJheTogbnVtYmVyW10sIGFuaW1hdGlvblNwZWVkOiBudW1iZXIsIHNldEN1cnJlbnRTb3J0aW5nQXJyYXk6IGFueSwgc2V0U3ByaW5nczogYW55KSA9PiB7XHJcbiAgIFxyXG4gICAgY29uc3QgbWVyZ2UgPSBhc3luYyAoYXJyOiBudW1iZXJbXSwgbG93OiBudW1iZXIsIG1pZDogbnVtYmVyLCBoaWdoOiBudW1iZXIpID0+IHtcclxuICAgICAgICBjb25zdCBsZWZ0ID0gYXJyLnNsaWNlKGxvdywgbWlkICsgMSk7XHJcbiAgICAgICAgY29uc3QgcmlnaHQgPSBhcnIuc2xpY2UobWlkICsgMSwgaGlnaCArIDEpO1xyXG4gICAgXHJcbiAgICAgICAgbGV0IGkgPSAwLFxyXG4gICAgICAgICAgaiA9IDAsXHJcbiAgICAgICAgICBrID0gbG93O1xyXG4gICAgXHJcbiAgICAgICAgd2hpbGUgKGkgPCBsZWZ0Lmxlbmd0aCAmJiBqIDwgcmlnaHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICBpZiAobGVmdFtpXSA8PSByaWdodFtqXSkge1xyXG4gICAgICAgICAgICBhcnJba10gPSBsZWZ0W2ldO1xyXG4gICAgICAgICAgICBpKys7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBhcnJba10gPSByaWdodFtqXTtcclxuICAgICAgICAgICAgaisrO1xyXG4gICAgICAgICAgfVxyXG4gICAgXHJcbiAgICAgICAgICBzZXRDdXJyZW50U29ydGluZ0FycmF5KFsuLi5hcnJdKTtcclxuICAgIFxyXG4gICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTEwIC0gYW5pbWF0aW9uU3BlZWQpKTtcclxuICAgICAgICAgIHNldFNwcmluZ3MoKGluZGV4IDogbnVtYmVyKSA9PiAoeyBoZWlnaHQ6IGFycltpbmRleF0gfSkpO1xyXG4gICAgICAgICAgKGFycik7XHJcbiAgICBcclxuICAgICAgICAgIGsrKztcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgICAgICB3aGlsZSAoaSA8IGxlZnQubGVuZ3RoKSB7XHJcbiAgICAgICAgICBhcnJba10gPSBsZWZ0W2ldO1xyXG4gICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgaysrO1xyXG4gICAgXHJcbiAgICAgICAgICBzZXRDdXJyZW50U29ydGluZ0FycmF5KFsuLi5hcnJdKTtcclxuICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDExMCAtIGFuaW1hdGlvblNwZWVkKSk7XHJcbiAgICAgICAgICBzZXRTcHJpbmdzKChpbmRleCA6IG51bWJlcikgPT4gKHsgaGVpZ2h0OiBhcnJbaW5kZXhdIH0pKTtcclxuICAgICAgICAgIChhcnIpO1xyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgIHdoaWxlIChqIDwgcmlnaHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICBhcnJba10gPSByaWdodFtqXTtcclxuICAgICAgICAgIGorKztcclxuICAgICAgICAgIGsrKztcclxuICAgIFxyXG4gICAgICAgICAgc2V0Q3VycmVudFNvcnRpbmdBcnJheShbLi4uYXJyXSk7XHJcbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMTAgLSBhbmltYXRpb25TcGVlZCkpO1xyXG4gICAgICAgICAgc2V0U3ByaW5ncygoaW5kZXggOiBudW1iZXIpID0+ICh7IGhlaWdodDogYXJyW2luZGV4XSB9KSk7XHJcbiAgICAgICAgICAoYXJyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcblxyXG4gICAgY29uc3QgbWVyZ2VTb3J0SGVscGVyID0gYXN5bmMgKGFycjogbnVtYmVyW10sIGxvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZiAobG93IDwgaGlnaCkge1xyXG4gICAgICAgICAgY29uc3QgbWlkID0gTWF0aC5mbG9vcigobG93ICsgaGlnaCkgLyAyKTtcclxuICAgIFxyXG4gICAgICAgICAgYXdhaXQgbWVyZ2VTb3J0SGVscGVyKGFyciwgbG93LCBtaWQpO1xyXG4gICAgICAgICAgYXdhaXQgbWVyZ2VTb3J0SGVscGVyKGFyciwgbWlkICsgMSwgaGlnaCk7XHJcbiAgICAgICAgICBhd2FpdCBtZXJnZShhcnIsIGxvdywgbWlkLCBoaWdoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgIFxyXG4gICAgbGV0IGFyckNvcHkgPSBbLi4uYXJyYXldO1xyXG4gICAgYXdhaXQgbWVyZ2VTb3J0SGVscGVyKGFyckNvcHksIDAsIGFyckNvcHkubGVuZ3RoIC0gMSk7XHJcbiAgXHJcbn07XHJcbiJdLCJuYW1lcyI6WyJtZXJnZVNvcnQiLCJhcnJheSIsImFuaW1hdGlvblNwZWVkIiwic2V0Q3VycmVudFNvcnRpbmdBcnJheSIsInNldFNwcmluZ3MiLCJtZXJnZSIsImFyciIsImxvdyIsIm1pZCIsImhpZ2giLCJsZWZ0Iiwic2xpY2UiLCJyaWdodCIsImkiLCJqIiwiayIsImxlbmd0aCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImluZGV4IiwiaGVpZ2h0IiwibWVyZ2VTb3J0SGVscGVyIiwiTWF0aCIsImZsb29yIiwiYXJyQ29weSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/algorithms/mergeSort.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/algorithms/quickSort.tsx":
/*!**************************************!*\
  !*** ./app/algorithms/quickSort.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   quickSort: function() { return /* binding */ quickSort; }\n/* harmony export */ });\nconst quickSort = async (array, animationSpeed, setCurrentSortingArray, setSprings)=>{\n    const partition = async (arr, low, high)=>{\n        const pivot = arr[high];\n        let i = low - 1;\n        for(let j = low; j <= high - 1; j++){\n            if (arr[j] < pivot) {\n                i++;\n                swap(arr, i, j);\n                setCurrentSortingArray([\n                    ...arr\n                ]);\n                await new Promise((resolve)=>setTimeout(resolve, 110 - animationSpeed));\n                setSprings((index)=>({\n                        height: arr[index]\n                    }));\n                arr;\n            }\n        }\n        swap(arr, i + 1, high);\n        setCurrentSortingArray([\n            ...arr\n        ]);\n        await new Promise((resolve)=>setTimeout(resolve, 110 - animationSpeed));\n        setSprings((index)=>({\n                height: arr[index]\n            }));\n        arr;\n        return i + 1;\n    };\n    const quickSortHelper = async (arr, low, high)=>{\n        if (low < high) {\n            const pi = await partition(arr, low, high);\n            await quickSortHelper(arr, low, pi - 1);\n            await quickSortHelper(arr, pi + 1, high);\n        }\n    };\n    const arrCopy = [\n        ...array\n    ];\n    await quickSortHelper(arrCopy, 0, arrCopy.length - 1);\n};\nconst swap = (arr, i, j)=>{\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9hbGdvcml0aG1zL3F1aWNrU29ydC50c3giLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLFlBQVksT0FBT0MsT0FBaUJDLGdCQUF3QkMsd0JBQTZCQztJQUdsRyxNQUFNQyxZQUFZLE9BQU9DLEtBQWVDLEtBQWFDO1FBQ2pELE1BQU1DLFFBQVFILEdBQUcsQ0FBQ0UsS0FBSztRQUN2QixJQUFJRSxJQUFJSCxNQUFNO1FBRWQsSUFBSyxJQUFJSSxJQUFJSixLQUFLSSxLQUFLSCxPQUFPLEdBQUdHLElBQUs7WUFDbEMsSUFBSUwsR0FBRyxDQUFDSyxFQUFFLEdBQUdGLE9BQU87Z0JBQ2hCQztnQkFDQUUsS0FBS04sS0FBS0ksR0FBR0M7Z0JBRWJSLHVCQUF1Qjt1QkFBSUc7aUJBQUk7Z0JBQy9CLE1BQU0sSUFBSU8sUUFBUSxDQUFDQyxVQUFZQyxXQUFXRCxTQUFTLE1BQU1aO2dCQUN6REUsV0FBVyxDQUFDWSxRQUFvQjt3QkFBRUMsUUFBUVgsR0FBRyxDQUFDVSxNQUFNO29CQUFDO2dCQUNwRFY7WUFDTDtRQUNKO1FBRUFNLEtBQUtOLEtBQUtJLElBQUksR0FBR0Y7UUFDakJMLHVCQUF1QjtlQUFJRztTQUFJO1FBRS9CLE1BQU0sSUFBSU8sUUFBUSxDQUFDQyxVQUFZQyxXQUFXRCxTQUFTLE1BQU1aO1FBQ3pERSxXQUFXLENBQUNZLFFBQW9CO2dCQUFFQyxRQUFRWCxHQUFHLENBQUNVLE1BQU07WUFBQztRQUNwRFY7UUFFRCxPQUFPSSxJQUFJO0lBQ2Y7SUFDQSxNQUFNUSxrQkFBa0IsT0FBT1osS0FBZUMsS0FBYUM7UUFDdkQsSUFBSUQsTUFBTUMsTUFBTTtZQUNaLE1BQU1XLEtBQUssTUFBTWQsVUFBVUMsS0FBS0MsS0FBS0M7WUFFckMsTUFBTVUsZ0JBQWdCWixLQUFLQyxLQUFLWSxLQUFLO1lBQ3JDLE1BQU1ELGdCQUFnQlosS0FBS2EsS0FBSyxHQUFHWDtRQUN2QztJQUNKO0lBRUEsTUFBTVksVUFBVTtXQUFJbkI7S0FBTTtJQUMxQixNQUFNaUIsZ0JBQWdCRSxTQUFTLEdBQUdBLFFBQVFDLE1BQU0sR0FBRztBQUd2RCxFQUFFO0FBRUYsTUFBTVQsT0FBTyxDQUFDTixLQUFlSSxHQUFXQztJQUNwQyxNQUFNVyxPQUFPaEIsR0FBRyxDQUFDSSxFQUFFO0lBQ25CSixHQUFHLENBQUNJLEVBQUUsR0FBR0osR0FBRyxDQUFDSyxFQUFFO0lBQ2ZMLEdBQUcsQ0FBQ0ssRUFBRSxHQUFHVztBQUNYIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9hbGdvcml0aG1zL3F1aWNrU29ydC50c3g/NWY0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgcXVpY2tTb3J0ID0gYXN5bmMgKGFycmF5OiBudW1iZXJbXSwgYW5pbWF0aW9uU3BlZWQ6IG51bWJlciwgc2V0Q3VycmVudFNvcnRpbmdBcnJheTogYW55LCBzZXRTcHJpbmdzOiBhbnkpID0+IHtcclxuXHJcblxyXG4gICAgY29uc3QgcGFydGl0aW9uID0gYXN5bmMgKGFycjogbnVtYmVyW10sIGxvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIpID0+IHtcclxuICAgICAgICBjb25zdCBwaXZvdCA9IGFycltoaWdoXTtcclxuICAgICAgICBsZXQgaSA9IGxvdyAtIDE7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGogPSBsb3c7IGogPD0gaGlnaCAtIDE7IGorKykge1xyXG4gICAgICAgICAgICBpZiAoYXJyW2pdIDwgcGl2b3QpIHtcclxuICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgICAgIHN3YXAoYXJyLCBpLCBqKTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50U29ydGluZ0FycmF5KFsuLi5hcnJdKTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDExMCAtIGFuaW1hdGlvblNwZWVkKSk7XHJcbiAgICAgICAgICAgICAgICBzZXRTcHJpbmdzKChpbmRleCA6IG51bWJlcikgPT4gKHsgaGVpZ2h0OiBhcnJbaW5kZXhdIH0pKTtcclxuICAgICAgICAgICAgICAgIChhcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2FwKGFyciwgaSArIDEsIGhpZ2gpO1xyXG4gICAgICAgIHNldEN1cnJlbnRTb3J0aW5nQXJyYXkoWy4uLmFycl0pO1xyXG5cclxuICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMTAgLSBhbmltYXRpb25TcGVlZCkpO1xyXG4gICAgICAgIHNldFNwcmluZ3MoKGluZGV4IDogbnVtYmVyKSA9PiAoeyBoZWlnaHQ6IGFycltpbmRleF0gfSkpO1xyXG4gICAgICAgIChhcnIpO1xyXG5cclxuICAgICAgICByZXR1cm4gaSArIDE7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcXVpY2tTb3J0SGVscGVyID0gYXN5bmMgKGFycjogbnVtYmVyW10sIGxvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIpID0+IHtcclxuICAgICAgICBpZiAobG93IDwgaGlnaCkge1xyXG4gICAgICAgICAgICBjb25zdCBwaSA9IGF3YWl0IHBhcnRpdGlvbihhcnIsIGxvdywgaGlnaCk7XHJcblxyXG4gICAgICAgICAgICBhd2FpdCBxdWlja1NvcnRIZWxwZXIoYXJyLCBsb3csIHBpIC0gMSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHF1aWNrU29ydEhlbHBlcihhcnIsIHBpICsgMSwgaGlnaCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBhcnJDb3B5ID0gWy4uLmFycmF5XTtcclxuICAgIGF3YWl0IHF1aWNrU29ydEhlbHBlcihhcnJDb3B5LCAwLCBhcnJDb3B5Lmxlbmd0aCAtIDEpO1xyXG5cclxuXHJcbn07XHJcblxyXG5jb25zdCBzd2FwID0gKGFycjogbnVtYmVyW10sIGk6IG51bWJlciwgajogbnVtYmVyKSA9PiB7XHJcbiAgICBjb25zdCB0ZW1wID0gYXJyW2ldO1xyXG4gICAgYXJyW2ldID0gYXJyW2pdO1xyXG4gICAgYXJyW2pdID0gdGVtcDtcclxuICB9OyJdLCJuYW1lcyI6WyJxdWlja1NvcnQiLCJhcnJheSIsImFuaW1hdGlvblNwZWVkIiwic2V0Q3VycmVudFNvcnRpbmdBcnJheSIsInNldFNwcmluZ3MiLCJwYXJ0aXRpb24iLCJhcnIiLCJsb3ciLCJoaWdoIiwicGl2b3QiLCJpIiwiaiIsInN3YXAiLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJpbmRleCIsImhlaWdodCIsInF1aWNrU29ydEhlbHBlciIsInBpIiwiYXJyQ29weSIsImxlbmd0aCIsInRlbXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/algorithms/quickSort.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/algorithms/selectionSort.tsx":
/*!******************************************!*\
  !*** ./app/algorithms/selectionSort.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   selectionSort: function() { return /* binding */ selectionSort; }\n/* harmony export */ });\nconst selectionSort = async (array, animationSpeed, setCurrentSortingArray, setSprings)=>{\n    let arrCopy = [\n        ...array\n    ];\n    const n = arrCopy.length;\n    for(let i = 0; i < n - 1; i++){\n        let minIndex = i;\n        for(let j = i + 1; j < n; j++){\n            if (arrCopy[j] < arrCopy[minIndex]) {\n                minIndex = j;\n            }\n        }\n        swap(arrCopy, i, minIndex);\n        setCurrentSortingArray([\n            ...arrCopy\n        ]);\n        await new Promise((resolve)=>setTimeout(resolve, 110 - animationSpeed));\n        setSprings((index)=>({\n                height: arrCopy[index]\n            }));\n        arrCopy;\n    }\n};\nconst swap = (arr, i, j)=>{\n    const temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9hbGdvcml0aG1zL3NlbGVjdGlvblNvcnQudHN4IiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxnQkFBZ0IsT0FBT0MsT0FBaUJDLGdCQUF3QkMsd0JBQTZCQztJQUNwRyxJQUFJQyxVQUFVO1dBQUlKO0tBQU07SUFDMUIsTUFBTUssSUFBSUQsUUFBUUUsTUFBTTtJQUV4QixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUYsSUFBSSxHQUFHRSxJQUFLO1FBQzlCLElBQUlDLFdBQVdEO1FBRWYsSUFBSyxJQUFJRSxJQUFJRixJQUFJLEdBQUdFLElBQUlKLEdBQUdJLElBQUs7WUFDOUIsSUFBSUwsT0FBTyxDQUFDSyxFQUFFLEdBQUdMLE9BQU8sQ0FBQ0ksU0FBUyxFQUFFO2dCQUNsQ0EsV0FBV0M7WUFDYjtRQUNGO1FBRUFDLEtBQUtOLFNBQVNHLEdBQUdDO1FBQ2pCTix1QkFBdUI7ZUFBSUU7U0FBUTtRQUVuQyxNQUFNLElBQUlPLFFBQVEsQ0FBQ0MsVUFBWUMsV0FBV0QsU0FBUyxNQUFNWDtRQUN6REUsV0FBVyxDQUFDVyxRQUFvQjtnQkFBRUMsUUFBUVgsT0FBTyxDQUFDVSxNQUFNO1lBQUM7UUFDeERWO0lBQ0g7QUFDRixFQUFFO0FBRUYsTUFBTU0sT0FBTyxDQUFDTSxLQUFlVCxHQUFXRTtJQUN0QyxNQUFNUSxPQUFPRCxHQUFHLENBQUNULEVBQUU7SUFDbkJTLEdBQUcsQ0FBQ1QsRUFBRSxHQUFHUyxHQUFHLENBQUNQLEVBQUU7SUFDZk8sR0FBRyxDQUFDUCxFQUFFLEdBQUdRO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2FsZ29yaXRobXMvc2VsZWN0aW9uU29ydC50c3g/MDFlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3Qgc2VsZWN0aW9uU29ydCA9IGFzeW5jIChhcnJheTogbnVtYmVyW10sIGFuaW1hdGlvblNwZWVkOiBudW1iZXIsIHNldEN1cnJlbnRTb3J0aW5nQXJyYXk6IGFueSwgc2V0U3ByaW5nczogYW55KSA9PiB7XHJcbiAgICAgIGxldCBhcnJDb3B5ID0gWy4uLmFycmF5XTtcclxuICAgIGNvbnN0IG4gPSBhcnJDb3B5Lmxlbmd0aDtcclxuXHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG4gLSAxOyBpKyspIHtcclxuICAgICAgbGV0IG1pbkluZGV4ID0gaTtcclxuXHJcbiAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IG47IGorKykge1xyXG4gICAgICAgIGlmIChhcnJDb3B5W2pdIDwgYXJyQ29weVttaW5JbmRleF0pIHtcclxuICAgICAgICAgIG1pbkluZGV4ID0gajtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN3YXAoYXJyQ29weSwgaSwgbWluSW5kZXgpO1xyXG4gICAgICBzZXRDdXJyZW50U29ydGluZ0FycmF5KFsuLi5hcnJDb3B5XSk7XHJcblxyXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMTAgLSBhbmltYXRpb25TcGVlZCkpO1xyXG4gICAgICBzZXRTcHJpbmdzKChpbmRleCA6IG51bWJlcikgPT4gKHsgaGVpZ2h0OiBhcnJDb3B5W2luZGV4XSB9KSk7XHJcbiAgICAgIChhcnJDb3B5KTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBzd2FwID0gKGFycjogbnVtYmVyW10sIGk6IG51bWJlciwgajogbnVtYmVyKSA9PiB7XHJcbiAgICBjb25zdCB0ZW1wID0gYXJyW2ldO1xyXG4gICAgYXJyW2ldID0gYXJyW2pdO1xyXG4gICAgYXJyW2pdID0gdGVtcDtcclxuICB9OyJdLCJuYW1lcyI6WyJzZWxlY3Rpb25Tb3J0IiwiYXJyYXkiLCJhbmltYXRpb25TcGVlZCIsInNldEN1cnJlbnRTb3J0aW5nQXJyYXkiLCJzZXRTcHJpbmdzIiwiYXJyQ29weSIsIm4iLCJsZW5ndGgiLCJpIiwibWluSW5kZXgiLCJqIiwic3dhcCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImluZGV4IiwiaGVpZ2h0IiwiYXJyIiwidGVtcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/algorithms/selectionSort.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/algorithms/shellShort.tsx":
/*!***************************************!*\
  !*** ./app/algorithms/shellShort.tsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   shellSort: function() { return /* binding */ shellSort; }\n/* harmony export */ });\nconst shellSort = async (array, animationSpeed, setCurrentSortingArray, setSprings)=>{\n    let arrCopy = [\n        ...array\n    ];\n    const n = arrCopy.length;\n    for(let gap = Math.floor(n / 2); gap > 0; gap = Math.floor(gap / 2)){\n        for(let i = gap; i < n; i++){\n            const temp = arrCopy[i];\n            let j = i;\n            while(j >= gap && arrCopy[j - gap] > temp){\n                arrCopy[j] = arrCopy[j - gap];\n                setCurrentSortingArray([\n                    ...arrCopy\n                ]);\n                await new Promise((resolve)=>setTimeout(resolve, 110 - animationSpeed));\n                setSprings((index)=>({\n                        height: arrCopy[index]\n                    }));\n                arrCopy;\n                j -= gap;\n            }\n            arrCopy[j] = temp;\n            setCurrentSortingArray([\n                ...arrCopy\n            ]);\n            await new Promise((resolve)=>setTimeout(resolve, 110 - animationSpeed));\n            setSprings((index)=>({\n                    height: arrCopy[index]\n                }));\n            arrCopy;\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9hbGdvcml0aG1zL3NoZWxsU2hvcnQudHN4IiwibWFwcGluZ3MiOiI7Ozs7QUFBTyxNQUFNQSxZQUFZLE9BQU9DLE9BQWlCQyxnQkFBd0JDLHdCQUE2QkM7SUFDbEcsSUFBSUMsVUFBVTtXQUFJSjtLQUFNO0lBQ3hCLE1BQU1LLElBQUlELFFBQVFFLE1BQU07SUFFeEIsSUFBSyxJQUFJQyxNQUFNQyxLQUFLQyxLQUFLLENBQUNKLElBQUksSUFBSUUsTUFBTSxHQUFHQSxNQUFNQyxLQUFLQyxLQUFLLENBQUNGLE1BQU0sR0FBSTtRQUNwRSxJQUFLLElBQUlHLElBQUlILEtBQUtHLElBQUlMLEdBQUdLLElBQUs7WUFDNUIsTUFBTUMsT0FBT1AsT0FBTyxDQUFDTSxFQUFFO1lBQ3ZCLElBQUlFLElBQUlGO1lBRVIsTUFBT0UsS0FBS0wsT0FBT0gsT0FBTyxDQUFDUSxJQUFJTCxJQUFJLEdBQUdJLEtBQU07Z0JBQzFDUCxPQUFPLENBQUNRLEVBQUUsR0FBR1IsT0FBTyxDQUFDUSxJQUFJTCxJQUFJO2dCQUU3QkwsdUJBQXVCO3VCQUFJRTtpQkFBUTtnQkFDbkMsTUFBTSxJQUFJUyxRQUFRLENBQUNDLFVBQVlDLFdBQVdELFNBQVMsTUFBTWI7Z0JBQ3pERSxXQUFXLENBQUNhLFFBQW9CO3dCQUFFQyxRQUFRYixPQUFPLENBQUNZLE1BQU07b0JBQUM7Z0JBQ3hEWjtnQkFFRFEsS0FBS0w7WUFDUDtZQUVBSCxPQUFPLENBQUNRLEVBQUUsR0FBR0Q7WUFFYlQsdUJBQXVCO21CQUFJRTthQUFRO1lBQ25DLE1BQU0sSUFBSVMsUUFBUSxDQUFDQyxVQUFZQyxXQUFXRCxTQUFTLE1BQU1iO1lBQ3pERSxXQUFXLENBQUNhLFFBQW9CO29CQUFFQyxRQUFRYixPQUFPLENBQUNZLE1BQU07Z0JBQUM7WUFDeERaO1FBQ0g7SUFDRjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vYXBwL2FsZ29yaXRobXMvc2hlbGxTaG9ydC50c3g/NDk0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3Qgc2hlbGxTb3J0ID0gYXN5bmMgKGFycmF5OiBudW1iZXJbXSwgYW5pbWF0aW9uU3BlZWQ6IG51bWJlciwgc2V0Q3VycmVudFNvcnRpbmdBcnJheTogYW55LCBzZXRTcHJpbmdzOiBhbnkpID0+IHtcclxuICAgIGxldCBhcnJDb3B5ID0gWy4uLmFycmF5XTtcclxuICAgIGNvbnN0IG4gPSBhcnJDb3B5Lmxlbmd0aDtcclxuXHJcbiAgICBmb3IgKGxldCBnYXAgPSBNYXRoLmZsb29yKG4gLyAyKTsgZ2FwID4gMDsgZ2FwID0gTWF0aC5mbG9vcihnYXAgLyAyKSkge1xyXG4gICAgICBmb3IgKGxldCBpID0gZ2FwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgY29uc3QgdGVtcCA9IGFyckNvcHlbaV07XHJcbiAgICAgICAgbGV0IGogPSBpO1xyXG5cclxuICAgICAgICB3aGlsZSAoaiA+PSBnYXAgJiYgYXJyQ29weVtqIC0gZ2FwXSA+IHRlbXApIHtcclxuICAgICAgICAgIGFyckNvcHlbal0gPSBhcnJDb3B5W2ogLSBnYXBdO1xyXG5cclxuICAgICAgICAgIHNldEN1cnJlbnRTb3J0aW5nQXJyYXkoWy4uLmFyckNvcHldKTtcclxuICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDExMCAtIGFuaW1hdGlvblNwZWVkKSk7XHJcbiAgICAgICAgICBzZXRTcHJpbmdzKChpbmRleCA6IG51bWJlcikgPT4gKHsgaGVpZ2h0OiBhcnJDb3B5W2luZGV4XSB9KSk7XHJcbiAgICAgICAgICAoYXJyQ29weSk7XHJcblxyXG4gICAgICAgICAgaiAtPSBnYXA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhcnJDb3B5W2pdID0gdGVtcDtcclxuXHJcbiAgICAgICAgc2V0Q3VycmVudFNvcnRpbmdBcnJheShbLi4uYXJyQ29weV0pO1xyXG4gICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDExMCAtIGFuaW1hdGlvblNwZWVkKSk7XHJcbiAgICAgICAgc2V0U3ByaW5ncygoaW5kZXggOiBudW1iZXIpID0+ICh7IGhlaWdodDogYXJyQ29weVtpbmRleF0gfSkpO1xyXG4gICAgICAgIChhcnJDb3B5KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07Il0sIm5hbWVzIjpbInNoZWxsU29ydCIsImFycmF5IiwiYW5pbWF0aW9uU3BlZWQiLCJzZXRDdXJyZW50U29ydGluZ0FycmF5Iiwic2V0U3ByaW5ncyIsImFyckNvcHkiLCJuIiwibGVuZ3RoIiwiZ2FwIiwiTWF0aCIsImZsb29yIiwiaSIsInRlbXAiLCJqIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiaW5kZXgiLCJoZWlnaHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/algorithms/shellShort.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/CounterInput.tsx":
/*!*****************************************!*\
  !*** ./app/components/CounterInput.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n\nconst CounterInput = (param)=>{\n    let { value, onIncrement, onDecrement, type } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex items-center\",\n        children: [\n            type === \"W\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                children: [\n                    type,\n                    \" : \"\n                ]\n            }, void 0, true, {\n                fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\components\\\\CounterInput.tsx\",\n                lineNumber: 15,\n                columnNumber: 26\n            }, undefined),\n            type === \"H\" && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                children: [\n                    type,\n                    \" : \"\n                ]\n            }, void 0, true, {\n                fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\components\\\\CounterInput.tsx\",\n                lineNumber: 16,\n                columnNumber: 26\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: onDecrement,\n                className: \"px-2\",\n                children: \"-\"\n            }, void 0, false, {\n                fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\components\\\\CounterInput.tsx\",\n                lineNumber: 18,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                type: \"text\",\n                className: \"ml-2 mr-2 text-gray-900 dark:text-white border-0 bg-transparent text-sm font-normal focus:outline-none focus:ring-0 max-w-[2.5rem] text-center\",\n                placeholder: \"\",\n                value: value,\n                readOnly: true\n            }, void 0, false, {\n                fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\components\\\\CounterInput.tsx\",\n                lineNumber: 21,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                onClick: onIncrement,\n                className: \"px-2\",\n                children: \"+\"\n            }, void 0, false, {\n                fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\components\\\\CounterInput.tsx\",\n                lineNumber: 28,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true, {\n        fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\components\\\\CounterInput.tsx\",\n        lineNumber: 14,\n        columnNumber: 5\n    }, undefined);\n};\n_c = CounterInput;\n/* harmony default export */ __webpack_exports__[\"default\"] = (CounterInput);\nvar _c;\n$RefreshReg$(_c, \"CounterInput\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL0NvdW50ZXJJbnB1dC50c3giLCJtYXBwaW5ncyI6Ijs7O0FBQUEsTUFBTUEsZUFBZTtRQUFDLEVBQ2xCQyxLQUFLLEVBQ0xDLFdBQVcsRUFDWEMsV0FBVyxFQUNYQyxJQUFJLEVBTVA7eUJBR0csOERBQUNDO1FBQUlDLFdBQVU7O1lBQ1ZGLFNBQVMscUJBQU8sOERBQUNHOztvQkFBT0g7b0JBQUs7Ozs7Ozs7WUFDN0JBLFNBQVMscUJBQU8sOERBQUNHOztvQkFBT0g7b0JBQUs7Ozs7Ozs7MEJBRTlCLDhEQUFDSTtnQkFBT0MsU0FBU047Z0JBQWFHLFdBQVU7MEJBQU87Ozs7OzswQkFHL0MsOERBQUNJO2dCQUNHTixNQUFLO2dCQUNMRSxXQUFVO2dCQUNWSyxhQUFZO2dCQUNaVixPQUFPQTtnQkFDUFcsUUFBUTs7Ozs7OzBCQUVaLDhEQUFDSjtnQkFBT0MsU0FBU1A7Z0JBQWFJLFdBQVU7MEJBQU87Ozs7Ozs7Ozs7Ozs7S0EzQmpETjtBQWtDTiwrREFBZUEsWUFBWUEsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9hcHAvY29tcG9uZW50cy9Db3VudGVySW5wdXQudHN4P2ExZWIiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgQ291bnRlcklucHV0ID0gKHtcclxuICAgIHZhbHVlLFxyXG4gICAgb25JbmNyZW1lbnQsXHJcbiAgICBvbkRlY3JlbWVudCxcclxuICAgIHR5cGVcclxufToge1xyXG4gICAgdmFsdWU6IGFueSxcclxuICAgIG9uSW5jcmVtZW50OiBhbnksXHJcbiAgICBvbkRlY3JlbWVudDogYW55LFxyXG4gICAgdHlwZTogYW55XHJcbn0pID0+IChcclxuXHJcbiAgICBcclxuICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICB7dHlwZSA9PT0gXCJXXCIgJiYgPGxhYmVsPnt0eXBlfSA6IDwvbGFiZWw+fVxyXG4gICAgICAgIHt0eXBlID09PSBcIkhcIiAmJiA8bGFiZWw+e3R5cGV9IDogPC9sYWJlbD59XHJcblxyXG4gICAgICAgIDxidXR0b24gb25DbGljaz17b25EZWNyZW1lbnR9IGNsYXNzTmFtZT1cInB4LTJcIj5cclxuICAgICAgICAgICAgLVxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cIm1sLTIgbXItMiB0ZXh0LWdyYXktOTAwIGRhcms6dGV4dC13aGl0ZSBib3JkZXItMCBiZy10cmFuc3BhcmVudCB0ZXh0LXNtIGZvbnQtbm9ybWFsIGZvY3VzOm91dGxpbmUtbm9uZSBmb2N1czpyaW5nLTAgbWF4LXctWzIuNXJlbV0gdGV4dC1jZW50ZXJcIlxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlwiXHJcbiAgICAgICAgICAgIHZhbHVlPXt2YWx1ZX1cclxuICAgICAgICAgICAgcmVhZE9ubHlcclxuICAgICAgICAvPlxyXG4gICAgICAgIDxidXR0b24gb25DbGljaz17b25JbmNyZW1lbnR9IGNsYXNzTmFtZT1cInB4LTJcIj5cclxuICAgICAgICAgICAgK1xyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgPC9kaXY+XHJcbik7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgQ291bnRlcklucHV0OyJdLCJuYW1lcyI6WyJDb3VudGVySW5wdXQiLCJ2YWx1ZSIsIm9uSW5jcmVtZW50Iiwib25EZWNyZW1lbnQiLCJ0eXBlIiwiZGl2IiwiY2xhc3NOYW1lIiwibGFiZWwiLCJidXR0b24iLCJvbkNsaWNrIiwiaW5wdXQiLCJwbGFjZWhvbGRlciIsInJlYWRPbmx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/CounterInput.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/components/RangeSlider.tsx":
/*!****************************************!*\
  !*** ./app/components/RangeSlider.tsx ***!
  \****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnimationSpeed: function() { return /* binding */ AnimationSpeed; },\n/* harmony export */   ArraySize: function() { return /* binding */ ArraySize; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n\nconst ArraySize = (param)=>{\n    let { arraySize, setArraySize } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                className: \"text-gray-300\",\n                children: [\n                    \"Array : \",\n                    arraySize\n                ]\n            }, void 0, true, {\n                fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\components\\\\RangeSlider.tsx\",\n                lineNumber: 9,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                type: \"range\",\n                min: \"2\",\n                max: \"50\",\n                value: arraySize,\n                onChange: (e)=>setArraySize(parseInt(e.target.value)),\n                className: \"ml-2\"\n            }, void 0, false, {\n                fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\components\\\\RangeSlider.tsx\",\n                lineNumber: 10,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true);\n};\n_c = ArraySize;\nconst AnimationSpeed = (param)=>{\n    let { animationSpeed, setAnimationSpeed } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                className: \"text-gray-300\",\n                children: \"Animation Speed\"\n            }, void 0, false, {\n                fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\components\\\\RangeSlider.tsx\",\n                lineNumber: 29,\n                columnNumber: 9\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                type: \"range\",\n                min: \"10\",\n                max: \"100\",\n                value: animationSpeed,\n                onChange: (e)=>setAnimationSpeed(parseInt(e.target.value)),\n                className: \"ml-2\"\n            }, void 0, false, {\n                fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\components\\\\RangeSlider.tsx\",\n                lineNumber: 30,\n                columnNumber: 9\n            }, undefined)\n        ]\n    }, void 0, true);\n};\n_c1 = AnimationSpeed;\n\nvar _c, _c1;\n$RefreshReg$(_c, \"ArraySize\");\n$RefreshReg$(_c1, \"AnimationSpeed\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9jb21wb25lbnRzL1JhbmdlU2xpZGVyLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTUEsWUFBWTtRQUFDLEVBQ2ZDLFNBQVMsRUFDVEMsWUFBWSxFQUlmO3lCQUNHOzswQkFDSSw4REFBQ0M7Z0JBQU1DLFdBQVU7O29CQUFnQjtvQkFBU0g7Ozs7Ozs7MEJBQzFDLDhEQUFDSTtnQkFDR0MsTUFBSztnQkFDTEMsS0FBSTtnQkFDSkMsS0FBSTtnQkFDSkMsT0FBT1I7Z0JBQ1BTLFVBQVUsQ0FBQ0MsSUFBTVQsYUFBYVUsU0FBU0QsRUFBRUUsTUFBTSxDQUFDSixLQUFLO2dCQUNyREwsV0FBVTs7Ozs7Ozs7O0tBZmhCSjtBQW9CTixNQUFNYyxpQkFBaUI7UUFBQyxFQUNwQkMsY0FBYyxFQUNkQyxpQkFBaUIsRUFJcEI7eUJBQ0c7OzBCQUNJLDhEQUFDYjtnQkFBTUMsV0FBVTswQkFBZ0I7Ozs7OzswQkFDakMsOERBQUNDO2dCQUNHQyxNQUFLO2dCQUNMQyxLQUFJO2dCQUNKQyxLQUFJO2dCQUNKQyxPQUFPTTtnQkFDUEwsVUFBVSxDQUFDQyxJQUFNSyxrQkFBa0JKLFNBQVNELEVBQUVFLE1BQU0sQ0FBQ0osS0FBSztnQkFDMURMLFdBQVU7Ozs7Ozs7OztNQWZoQlU7QUFzQitCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL2FwcC9jb21wb25lbnRzL1JhbmdlU2xpZGVyLnRzeD8xZmVjIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFycmF5U2l6ZSA9ICh7XHJcbiAgICBhcnJheVNpemUsXHJcbiAgICBzZXRBcnJheVNpemUsXHJcbn06IHtcclxuICAgIGFycmF5U2l6ZTogYW55LFxyXG4gICAgc2V0QXJyYXlTaXplOiBhbnksXHJcbn0pID0+IChcclxuICAgIDw+XHJcbiAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cInRleHQtZ3JheS0zMDBcIj5BcnJheSA6IHthcnJheVNpemV9PC9sYWJlbD5cclxuICAgICAgICA8aW5wdXRcclxuICAgICAgICAgICAgdHlwZT1cInJhbmdlXCJcclxuICAgICAgICAgICAgbWluPVwiMlwiXHJcbiAgICAgICAgICAgIG1heD1cIjUwXCJcclxuICAgICAgICAgICAgdmFsdWU9e2FycmF5U2l6ZX1cclxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRBcnJheVNpemUocGFyc2VJbnQoZS50YXJnZXQudmFsdWUpKX1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwibWwtMlwiXHJcbiAgICAgICAgLz5cclxuICAgIDwvPlxyXG4pO1xyXG5cclxuY29uc3QgQW5pbWF0aW9uU3BlZWQgPSAoe1xyXG4gICAgYW5pbWF0aW9uU3BlZWQsXHJcbiAgICBzZXRBbmltYXRpb25TcGVlZCxcclxufToge1xyXG4gICAgYW5pbWF0aW9uU3BlZWQ6IGFueSxcclxuICAgIHNldEFuaW1hdGlvblNwZWVkOiBhbnksXHJcbn0pID0+IChcclxuICAgIDw+XHJcbiAgICAgICAgPGxhYmVsIGNsYXNzTmFtZT1cInRleHQtZ3JheS0zMDBcIj5BbmltYXRpb24gU3BlZWQ8L2xhYmVsPlxyXG4gICAgICAgIDxpbnB1dFxyXG4gICAgICAgICAgICB0eXBlPVwicmFuZ2VcIlxyXG4gICAgICAgICAgICBtaW49XCIxMFwiXHJcbiAgICAgICAgICAgIG1heD1cIjEwMFwiXHJcbiAgICAgICAgICAgIHZhbHVlPXthbmltYXRpb25TcGVlZH1cclxuICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiBzZXRBbmltYXRpb25TcGVlZChwYXJzZUludChlLnRhcmdldC52YWx1ZSkpfVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJtbC0yXCJcclxuICAgICAgICAvPlxyXG4gICAgPC8+XHJcbik7XHJcblxyXG5cclxuXHJcbmV4cG9ydCB7IEFycmF5U2l6ZSwgQW5pbWF0aW9uU3BlZWQgfTsiXSwibmFtZXMiOlsiQXJyYXlTaXplIiwiYXJyYXlTaXplIiwic2V0QXJyYXlTaXplIiwibGFiZWwiLCJjbGFzc05hbWUiLCJpbnB1dCIsInR5cGUiLCJtaW4iLCJtYXgiLCJ2YWx1ZSIsIm9uQ2hhbmdlIiwiZSIsInBhcnNlSW50IiwidGFyZ2V0IiwiQW5pbWF0aW9uU3BlZWQiLCJhbmltYXRpb25TcGVlZCIsInNldEFuaW1hdGlvblNwZWVkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/components/RangeSlider.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./app/page.tsx":
/*!**********************!*\
  !*** ./app/page.tsx ***!
  \**********************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_spring__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-spring */ \"(app-pages-browser)/./node_modules/react-spring/dist/react-spring.modern.mjs\");\n/* harmony import */ var _components_CounterInput__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/CounterInput */ \"(app-pages-browser)/./app/components/CounterInput.tsx\");\n/* harmony import */ var _components_RangeSlider__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./components/RangeSlider */ \"(app-pages-browser)/./app/components/RangeSlider.tsx\");\n/* harmony import */ var _algorithms_insertionSort__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./algorithms/insertionSort */ \"(app-pages-browser)/./app/algorithms/insertionSort.tsx\");\n/* harmony import */ var _algorithms_selectionSort__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./algorithms/selectionSort */ \"(app-pages-browser)/./app/algorithms/selectionSort.tsx\");\n/* harmony import */ var _algorithms_bubbleSort__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./algorithms/bubbleSort */ \"(app-pages-browser)/./app/algorithms/bubbleSort.tsx\");\n/* harmony import */ var _algorithms_quickSort__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./algorithms/quickSort */ \"(app-pages-browser)/./app/algorithms/quickSort.tsx\");\n/* harmony import */ var _algorithms_shellShort__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./algorithms/shellShort */ \"(app-pages-browser)/./app/algorithms/shellShort.tsx\");\n/* harmony import */ var _algorithms_mergeSort__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./algorithms/mergeSort */ \"(app-pages-browser)/./app/algorithms/mergeSort.tsx\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\n\n\nconst Button = (param)=>{\n    let { value, functionName } = param;\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n        onClick: functionName,\n        className: \"text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium\",\n        children: value\n    }, void 0, false, {\n        fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n        lineNumber: 15,\n        columnNumber: 5\n    }, undefined);\n};\n_c = Button;\nconst randomArray = (length)=>{\n    return Array.from({\n        length\n    }, ()=>Math.floor(Math.random() * 100) + 1);\n};\nconst SortingVisualizer = ()=>{\n    _s();\n    const [array, setArray] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [animationSpeed, setAnimationSpeed] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(100);\n    const [arraySize, setArraySize] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(10);\n    const [springs, setSprings] = (0,react_spring__WEBPACK_IMPORTED_MODULE_2__.useSprings)(arraySize, (index)=>({\n            height: array[index] || 1\n        }));\n    const [currentSortingArray, setCurrentSortingArray] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [clickHere, setClickHere] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(true);\n    const [barWidth, setBarWidth] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(20);\n    const [barHeight, setBarHeight] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(30);\n    const increaseBarWidth = ()=>{\n        setBarWidth((prevWidth)=>Math.min(50, prevWidth + 1));\n    };\n    const decreaseBarWidth = ()=>{\n        setBarWidth((prevWidth)=>Math.max(10, prevWidth - 1));\n    };\n    const increaseBarHeight = ()=>{\n        setBarHeight((prevHeight)=>Math.min(50, prevHeight + 1));\n    };\n    const decreaseBarHeight = ()=>{\n        setBarHeight((prevHeight)=>Math.max(10, prevHeight - 1));\n    };\n    const generateArray = ()=>{\n        const newArray = randomArray(arraySize);\n        setArray(newArray);\n        setSprings((index)=>({\n                height: newArray[index]\n            }));\n        setCurrentSortingArray(newArray);\n        setClickHere(false);\n    };\n    const swap = (arr, i, j)=>{\n        const temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    };\n    const insertionSortFunction = async ()=>{\n        await (0,_algorithms_insertionSort__WEBPACK_IMPORTED_MODULE_5__.insertionSort)(array, animationSpeed, setCurrentSortingArray, setSprings);\n    };\n    const selectionSortFunction = async ()=>{\n        await (0,_algorithms_selectionSort__WEBPACK_IMPORTED_MODULE_6__.selectionSort)(array, animationSpeed, setCurrentSortingArray, setSprings);\n    };\n    const bubbleSortFunction = async ()=>{\n        await (0,_algorithms_bubbleSort__WEBPACK_IMPORTED_MODULE_7__.bubbleSort)(array, animationSpeed, setCurrentSortingArray, setSprings);\n    };\n    const quickSortFunction = async ()=>{\n        await (0,_algorithms_quickSort__WEBPACK_IMPORTED_MODULE_8__.quickSort)(array, animationSpeed, setCurrentSortingArray, setSprings);\n    };\n    const shellSortFunction = async ()=>{\n        await (0,_algorithms_shellShort__WEBPACK_IMPORTED_MODULE_9__.shellSort)(array, animationSpeed, setCurrentSortingArray, setSprings);\n    };\n    const mergeSortFunction = async ()=>{\n        await (0,_algorithms_mergeSort__WEBPACK_IMPORTED_MODULE_10__.mergeSort)(array, animationSpeed, setCurrentSortingArray, setSprings);\n    };\n    const changeSize = async ()=>{\n        let arrCopy = [\n            ...array\n        ];\n        arrCopy = arrCopy.map((height)=>Math.floor(height / 2));\n        setCurrentSortingArray([\n            ...arrCopy\n        ]);\n        setArray(arrCopy);\n        setSprings((index)=>({\n                height: arrCopy[index]\n            }));\n        arrCopy;\n        await new Promise((resolve)=>setTimeout(resolve, 110 - animationSpeed));\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n        className: \"flex flex-col items-center justify-center p-5\",\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n            className: \"w-full\",\n            children: [\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"w-full bg-zinc-900 rounded-lg text-white px-3 py-2 text-lg font-medium mb-5\",\n                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                        children: \"Comparison Sorting Algorithms\"\n                    }, void 0, false, {\n                        fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                        lineNumber: 110,\n                        columnNumber: 11\n                    }, undefined)\n                }, void 0, false, {\n                    fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                    lineNumber: 109,\n                    columnNumber: 9\n                }, undefined),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex flex-col md:flex-row items-center space-y-4 md:space-y-0 md:space-x-4 py-5\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Button, {\n                            value: \"Generate Array\",\n                            functionName: generateArray\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 114,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Button, {\n                            value: \"Insertion Sort\",\n                            functionName: insertionSortFunction\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 115,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Button, {\n                            value: \"Selection Sort\",\n                            functionName: selectionSortFunction\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 116,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Button, {\n                            value: \"Bubble Sort\",\n                            functionName: bubbleSortFunction\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 117,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Button, {\n                            value: \"Merge Sort\",\n                            functionName: mergeSortFunction\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 118,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Button, {\n                            value: \"Quick Sort\",\n                            functionName: quickSortFunction\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 119,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Button, {\n                            value: \"Shell Sort\",\n                            functionName: shellSortFunction\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 120,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Button, {\n                            value: \"Change Size\",\n                            functionName: generateArray\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 121,\n                            columnNumber: 11\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                    lineNumber: 113,\n                    columnNumber: 9\n                }, undefined),\n                !clickHere ? /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex flex-wrap justify-center space-y-4 space-x-2 md:space-y-0\",\n                    style: {\n                        height: \"500px\"\n                    },\n                    children: springs.map((props, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"relative\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"absolute top-0 left-1/2 transform -translate-x-1/2 text-white text-xs bg-red-300 \",\n                                    children: currentSortingArray[index]\n                                }, void 0, false, {\n                                    fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                                    lineNumber: 129,\n                                    columnNumber: 17\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_spring__WEBPACK_IMPORTED_MODULE_2__.animated.div, {\n                                    className: \"bg-blue-500\",\n                                    style: {\n                                        height: props.height.to((height)=>\"\".concat(height * (barHeight / 10), \"px\")),\n                                        width: \"\".concat(barWidth, \"px\"),\n                                        marginBottom: \"2px\"\n                                    }\n                                }, void 0, false, {\n                                    fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                                    lineNumber: 132,\n                                    columnNumber: 17\n                                }, undefined)\n                            ]\n                        }, index, true, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 127,\n                            columnNumber: 15\n                        }, undefined))\n                }, void 0, false, {\n                    fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                    lineNumber: 125,\n                    columnNumber: 11\n                }, undefined) : /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex justify-center items-center flex-col space-y-2\",\n                    style: {\n                        height: \"500px\"\n                    },\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            style: {\n                                opacity: 0.5\n                            },\n                            children: \"Set array size and animation speed\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 145,\n                            columnNumber: 13\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            style: {\n                                opacity: 0.5\n                            },\n                            children: \"Click Generate Array\"\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 146,\n                            columnNumber: 13\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                    lineNumber: 144,\n                    columnNumber: 11\n                }, undefined),\n                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"flex flex-col md:flex-row items-center md:items-start ml-0 md:ml-10 space-y-4 md:space-y-0 md:space-x-4 mt-5\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"md:ml-10 py-3\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_RangeSlider__WEBPACK_IMPORTED_MODULE_4__.AnimationSpeed, {\n                                animationSpeed: animationSpeed,\n                                setAnimationSpeed: setAnimationSpeed\n                            }, void 0, false, {\n                                fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                                lineNumber: 152,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 151,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"md:ml-10 py-3\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_RangeSlider__WEBPACK_IMPORTED_MODULE_4__.ArraySize, {\n                                arraySize: arraySize,\n                                setArraySize: setArraySize\n                            }, void 0, false, {\n                                fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                                lineNumber: 155,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 154,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"md:ml-10 py-3\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_CounterInput__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                value: barWidth,\n                                onIncrement: increaseBarWidth,\n                                onDecrement: decreaseBarWidth,\n                                type: \"W\"\n                            }, void 0, false, {\n                                fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                                lineNumber: 158,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 157,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"md:ml-10 py-3\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_CounterInput__WEBPACK_IMPORTED_MODULE_3__[\"default\"], {\n                                value: barHeight,\n                                onIncrement: increaseBarHeight,\n                                onDecrement: decreaseBarHeight,\n                                type: \"H\"\n                            }, void 0, false, {\n                                fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                                lineNumber: 161,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                            lineNumber: 160,\n                            columnNumber: 11\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n                    lineNumber: 150,\n                    columnNumber: 9\n                }, undefined)\n            ]\n        }, void 0, true, {\n            fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n            lineNumber: 107,\n            columnNumber: 7\n        }, undefined)\n    }, void 0, false, {\n        fileName: \"D:\\\\Comparison-Sorting-Algorithms\\\\app\\\\page.tsx\",\n        lineNumber: 106,\n        columnNumber: 5\n    }, undefined);\n};\n_s(SortingVisualizer, \"dF2/xpeJJhB4H14xDGrwyJm/G2c=\", false, function() {\n    return [\n        react_spring__WEBPACK_IMPORTED_MODULE_2__.useSprings\n    ];\n});\n_c1 = SortingVisualizer;\n/* harmony default export */ __webpack_exports__[\"default\"] = (SortingVisualizer);\nvar _c, _c1;\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c1, \"SortingVisualizer\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/page.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs":
/*!***********************************************************************************!*\
  !*** ./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Animated: function() { return /* binding */ Animated; },\n/* harmony export */   AnimatedArray: function() { return /* binding */ AnimatedArray; },\n/* harmony export */   AnimatedObject: function() { return /* binding */ AnimatedObject; },\n/* harmony export */   AnimatedString: function() { return /* binding */ AnimatedString; },\n/* harmony export */   AnimatedValue: function() { return /* binding */ AnimatedValue; },\n/* harmony export */   createHost: function() { return /* binding */ createHost; },\n/* harmony export */   getAnimated: function() { return /* binding */ getAnimated; },\n/* harmony export */   getAnimatedType: function() { return /* binding */ getAnimatedType; },\n/* harmony export */   getPayload: function() { return /* binding */ getPayload; },\n/* harmony export */   isAnimated: function() { return /* binding */ isAnimated; },\n/* harmony export */   setAnimated: function() { return /* binding */ setAnimated; }\n/* harmony export */ });\n/* harmony import */ var _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/shared */ \"(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n// src/Animated.ts\n\nvar $node = Symbol.for(\"Animated:node\");\nvar isAnimated = (value)=>!!value && value[$node] === value;\nvar getAnimated = (owner)=>owner && owner[$node];\nvar setAnimated = (owner, node)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.defineHidden)(owner, $node, node);\nvar getPayload = (owner)=>owner && owner[$node] && owner[$node].getPayload();\nvar Animated = class {\n    /** Get every `AnimatedValue` used by this node. */ getPayload() {\n        return this.payload || [];\n    }\n    constructor(){\n        setAnimated(this, this);\n    }\n};\n// src/AnimatedValue.ts\n\nvar AnimatedValue = class extends Animated {\n    /** @internal */ static create(value) {\n        return new AnimatedValue(value);\n    }\n    getPayload() {\n        return [\n            this\n        ];\n    }\n    getValue() {\n        return this._value;\n    }\n    setValue(value, step) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(value)) {\n            this.lastPosition = value;\n            if (step) {\n                value = Math.round(value / step) * step;\n                if (this.done) {\n                    this.lastPosition = value;\n                }\n            }\n        }\n        if (this._value === value) {\n            return false;\n        }\n        this._value = value;\n        return true;\n    }\n    reset() {\n        const { done } = this;\n        this.done = false;\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(this._value)) {\n            this.elapsedTime = 0;\n            this.durationProgress = 0;\n            this.lastPosition = this._value;\n            if (done) this.lastVelocity = null;\n            this.v0 = null;\n        }\n    }\n    constructor(_value){\n        super();\n        this._value = _value;\n        this.done = true;\n        this.durationProgress = 0;\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(this._value)) {\n            this.lastPosition = this._value;\n        }\n    }\n};\n// src/AnimatedString.ts\n\nvar AnimatedString = class extends AnimatedValue {\n    /** @internal */ static create(value) {\n        return new AnimatedString(value);\n    }\n    getValue() {\n        const value = this._string;\n        return value == null ? this._string = this._toString(this._value) : value;\n    }\n    setValue(value) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(value)) {\n            if (value == this._string) {\n                return false;\n            }\n            this._string = value;\n            this._value = 1;\n        } else if (super.setValue(value)) {\n            this._string = null;\n        } else {\n            return false;\n        }\n        return true;\n    }\n    reset(goal) {\n        if (goal) {\n            this._toString = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator)({\n                output: [\n                    this.getValue(),\n                    goal\n                ]\n            });\n        }\n        this._value = 0;\n        super.reset();\n    }\n    constructor(value){\n        super(0);\n        this._string = null;\n        this._toString = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator)({\n            output: [\n                value,\n                value\n            ]\n        });\n    }\n};\n// src/AnimatedArray.ts\n\n// src/AnimatedObject.ts\n\n// src/context.ts\nvar TreeContext = {\n    dependencies: null\n};\n// src/AnimatedObject.ts\nvar AnimatedObject = class extends Animated {\n    getValue(animated) {\n        const values = {};\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(this.source, (source, key)=>{\n            if (isAnimated(source)) {\n                values[key] = source.getValue(animated);\n            } else if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n                values[key] = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(source);\n            } else if (!animated) {\n                values[key] = source;\n            }\n        });\n        return values;\n    }\n    /** Replace the raw object data */ setValue(source) {\n        this.source = source;\n        this.payload = this._makePayload(source);\n    }\n    reset() {\n        if (this.payload) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(this.payload, (node)=>node.reset());\n        }\n    }\n    /** Create a payload set. */ _makePayload(source) {\n        if (source) {\n            const payload = /* @__PURE__ */ new Set();\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(source, this._addToPayload, payload);\n            return Array.from(payload);\n        }\n    }\n    /** Add to a payload set. */ _addToPayload(source) {\n        if (TreeContext.dependencies && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n            TreeContext.dependencies.add(source);\n        }\n        const payload = getPayload(source);\n        if (payload) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(payload, (node)=>this.add(node));\n        }\n    }\n    constructor(source){\n        super();\n        this.source = source;\n        this.setValue(source);\n    }\n};\n// src/AnimatedArray.ts\nvar AnimatedArray = class extends AnimatedObject {\n    /** @internal */ static create(source) {\n        return new AnimatedArray(source);\n    }\n    getValue() {\n        return this.source.map((node)=>node.getValue());\n    }\n    setValue(source) {\n        const payload = this.getPayload();\n        if (source.length == payload.length) {\n            return payload.map((node, i)=>node.setValue(source[i])).some(Boolean);\n        }\n        super.setValue(source.map(makeAnimated));\n        return true;\n    }\n    constructor(source){\n        super(source);\n    }\n};\nfunction makeAnimated(value) {\n    const nodeType = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(value) ? AnimatedString : AnimatedValue;\n    return nodeType.create(value);\n}\n// src/getAnimatedType.ts\n\nfunction getAnimatedType(value) {\n    const parentNode = getAnimated(value);\n    return parentNode ? parentNode.constructor : _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(value) ? AnimatedArray : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(value) ? AnimatedString : AnimatedValue;\n}\n// src/createHost.ts\n\n// src/withAnimated.tsx\n\n\n\nvar withAnimated = (Component, host)=>{\n    var _s = $RefreshSig$();\n    const hasInstance = // Function components must use \"forwardRef\" to avoid being\n    // re-rendered on every animation frame.\n    !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)(_s((givenProps, givenRef)=>{\n        _s();\n        const instanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n        const ref = hasInstance && // eslint-disable-next-line react-hooks/rules-of-hooks\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((value)=>{\n            instanceRef.current = updateRef(givenRef, value);\n        }, [\n            givenRef\n        ]);\n        const [props, deps] = getAnimatedState(givenProps, host);\n        const forceUpdate = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate)();\n        const callback = ()=>{\n            const instance = instanceRef.current;\n            if (hasInstance && !instance) {\n                return;\n            }\n            const didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false;\n            if (didUpdate === false) {\n                forceUpdate();\n            }\n        };\n        const observer = new PropsObserver(callback, deps);\n        const observerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n            observerRef.current = observer;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(deps, (dep)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(dep, observer));\n            return ()=>{\n                if (observerRef.current) {\n                    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(observerRef.current.deps, (dep)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(dep, observerRef.current));\n                    _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.cancel(observerRef.current.update);\n                }\n            };\n        });\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(callback, []);\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>()=>{\n                const observer2 = observerRef.current;\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(observer2.deps, (dep)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(dep, observer2));\n            });\n        const usedProps = host.getComponentProps(props.getValue());\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Component, {\n            ...usedProps,\n            ref\n        });\n    }, \"Ap8f+txA57fFyfyEQgJjd7YWyo8=\", false, function() {\n        return [\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate,\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce\n        ];\n    }));\n};\nvar PropsObserver = class {\n    eventObserved(event) {\n        if (event.type == \"change\") {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.write(this.update);\n        }\n    }\n    constructor(update, deps){\n        this.update = update;\n        this.deps = deps;\n    }\n};\nfunction getAnimatedState(props, host) {\n    const dependencies = /* @__PURE__ */ new Set();\n    TreeContext.dependencies = dependencies;\n    if (props.style) props = {\n        ...props,\n        style: host.createAnimatedStyle(props.style)\n    };\n    props = new AnimatedObject(props);\n    TreeContext.dependencies = null;\n    return [\n        props,\n        dependencies\n    ];\n}\nfunction updateRef(ref, value) {\n    if (ref) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(ref)) ref(value);\n        else ref.current = value;\n    }\n    return value;\n}\n// src/createHost.ts\nvar cacheKey = Symbol.for(\"AnimatedComponent\");\nvar createHost = function(components) {\n    let { applyAnimatedValues = ()=>false, createAnimatedStyle = (style)=>new AnimatedObject(style), getComponentProps = (props)=>props } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    const hostConfig = {\n        applyAnimatedValues,\n        createAnimatedStyle,\n        getComponentProps\n    };\n    const animated = (Component)=>{\n        const displayName = getDisplayName(Component) || \"Anonymous\";\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(Component)) {\n            Component = animated[Component] || (animated[Component] = withAnimated(Component, hostConfig));\n        } else {\n            Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));\n        }\n        Component.displayName = \"Animated(\".concat(displayName, \")\");\n        return Component;\n    };\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(components, (Component, key)=>{\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(components)) {\n            key = getDisplayName(Component);\n        }\n        animated[key] = animated(Component);\n    });\n    return {\n        animated\n    };\n};\nvar getDisplayName = (arg)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(arg) ? arg : arg && _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(arg.displayName) ? arg.displayName : _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(arg) && arg.name || null;\n //# sourceMappingURL=react-spring_animated.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/core/dist/react-spring_core.modern.mjs":
/*!***************************************************************************!*\
  !*** ./node_modules/@react-spring/core/dist/react-spring_core.modern.mjs ***!
  \***************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: function() { return /* reexport safe */ _react_spring_types__WEBPACK_IMPORTED_MODULE_3__.Any; },\n/* harmony export */   BailSignal: function() { return /* binding */ BailSignal; },\n/* harmony export */   Controller: function() { return /* binding */ Controller; },\n/* harmony export */   FrameValue: function() { return /* binding */ FrameValue; },\n/* harmony export */   Globals: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals; },\n/* harmony export */   Interpolation: function() { return /* binding */ Interpolation; },\n/* harmony export */   Spring: function() { return /* binding */ Spring; },\n/* harmony export */   SpringContext: function() { return /* binding */ SpringContext; },\n/* harmony export */   SpringRef: function() { return /* binding */ SpringRef; },\n/* harmony export */   SpringValue: function() { return /* binding */ SpringValue; },\n/* harmony export */   Trail: function() { return /* binding */ Trail; },\n/* harmony export */   Transition: function() { return /* binding */ Transition; },\n/* harmony export */   config: function() { return /* binding */ config; },\n/* harmony export */   createInterpolator: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator; },\n/* harmony export */   easings: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.easings; },\n/* harmony export */   inferTo: function() { return /* binding */ inferTo; },\n/* harmony export */   interpolate: function() { return /* binding */ interpolate; },\n/* harmony export */   to: function() { return /* binding */ to; },\n/* harmony export */   update: function() { return /* binding */ update; },\n/* harmony export */   useChain: function() { return /* binding */ useChain; },\n/* harmony export */   useInView: function() { return /* binding */ useInView; },\n/* harmony export */   useIsomorphicLayoutEffect: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect; },\n/* harmony export */   useReducedMotion: function() { return /* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useReducedMotion; },\n/* harmony export */   useResize: function() { return /* binding */ useResize; },\n/* harmony export */   useScroll: function() { return /* binding */ useScroll; },\n/* harmony export */   useSpring: function() { return /* binding */ useSpring; },\n/* harmony export */   useSpringRef: function() { return /* binding */ useSpringRef; },\n/* harmony export */   useSpringValue: function() { return /* binding */ useSpringValue; },\n/* harmony export */   useSprings: function() { return /* binding */ useSprings; },\n/* harmony export */   useTrail: function() { return /* binding */ useTrail; },\n/* harmony export */   useTransition: function() { return /* binding */ useTransition; }\n/* harmony export */ });\n/* harmony import */ var _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/shared */ \"(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-spring/animated */ \"(app-pages-browser)/./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs\");\n/* harmony import */ var _react_spring_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-spring/types */ \"(app-pages-browser)/./node_modules/@react-spring/types/dist/react-spring_types.modern.mjs\");\n// src/hooks/useChain.ts\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$();\n\n// src/helpers.ts\n\nfunction callProp(value) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(value) ? value(...args) : value;\n}\nvar matchProp = (value, key)=>value === true || !!(key && value && (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(value) ? value(key) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(value).includes(key)));\nvar resolveProp = (prop, key)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(prop) ? key && prop[key] : prop;\nvar getDefaultProp = (props, key)=>props.default === true ? props[key] : props.default ? props.default[key] : void 0;\nvar noopTransform = (value)=>value;\nvar getDefaultProps = function(props) {\n    let transform = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noopTransform;\n    let keys = DEFAULT_PROPS;\n    if (props.default && props.default !== true) {\n        props = props.default;\n        keys = Object.keys(props);\n    }\n    const defaults2 = {};\n    for (const key of keys){\n        const value = transform(props[key], key);\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(value)) {\n            defaults2[key] = value;\n        }\n    }\n    return defaults2;\n};\nvar DEFAULT_PROPS = [\n    \"config\",\n    \"onProps\",\n    \"onStart\",\n    \"onChange\",\n    \"onPause\",\n    \"onResume\",\n    \"onRest\"\n];\nvar RESERVED_PROPS = {\n    config: 1,\n    from: 1,\n    to: 1,\n    ref: 1,\n    loop: 1,\n    reset: 1,\n    pause: 1,\n    cancel: 1,\n    reverse: 1,\n    immediate: 1,\n    default: 1,\n    delay: 1,\n    onProps: 1,\n    onStart: 1,\n    onChange: 1,\n    onPause: 1,\n    onResume: 1,\n    onRest: 1,\n    onResolve: 1,\n    // Transition props\n    items: 1,\n    trail: 1,\n    sort: 1,\n    expires: 1,\n    initial: 1,\n    enter: 1,\n    update: 1,\n    leave: 1,\n    children: 1,\n    onDestroyed: 1,\n    // Internal props\n    keys: 1,\n    callId: 1,\n    parentId: 1\n};\nfunction getForwardProps(props) {\n    const forward = {};\n    let count = 0;\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(props, (value, prop)=>{\n        if (!RESERVED_PROPS[prop]) {\n            forward[prop] = value;\n            count++;\n        }\n    });\n    if (count) {\n        return forward;\n    }\n}\nfunction inferTo(props) {\n    const to2 = getForwardProps(props);\n    if (to2) {\n        const out = {\n            to: to2\n        };\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(props, (val, key)=>key in to2 || (out[key] = val));\n        return out;\n    }\n    return {\n        ...props\n    };\n}\nfunction computeGoal(value) {\n    value = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(value);\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(value) ? value.map(computeGoal) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(value) ? _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.createStringInterpolator({\n        range: [\n            0,\n            1\n        ],\n        output: [\n            value,\n            value\n        ]\n    })(1) : value;\n}\nfunction hasProps(props) {\n    for(const _ in props)return true;\n    return false;\n}\nfunction isAsyncTo(to2) {\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(to2) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(to2) && _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2[0]);\n}\nfunction detachRefs(ctrl, ref) {\n    var _ctrl_ref;\n    (_ctrl_ref = ctrl.ref) === null || _ctrl_ref === void 0 ? void 0 : _ctrl_ref.delete(ctrl);\n    ref === null || ref === void 0 ? void 0 : ref.delete(ctrl);\n}\nfunction replaceRef(ctrl, ref) {\n    if (ref && ctrl.ref !== ref) {\n        var _ctrl_ref;\n        (_ctrl_ref = ctrl.ref) === null || _ctrl_ref === void 0 ? void 0 : _ctrl_ref.delete(ctrl);\n        ref.add(ctrl);\n        ctrl.ref = ref;\n    }\n}\n// src/hooks/useChain.ts\nfunction useChain(refs, timeSteps) {\n    let timeFrame = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1e3;\n    _s();\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        if (timeSteps) {\n            let prevDelay = 0;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(refs, (ref, i)=>{\n                const controllers = ref.current;\n                if (controllers.length) {\n                    let delay = timeFrame * timeSteps[i];\n                    if (isNaN(delay)) delay = prevDelay;\n                    else prevDelay = delay;\n                    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(controllers, (ctrl)=>{\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ctrl.queue, (props)=>{\n                            const memoizedDelayProp = props.delay;\n                            props.delay = (key)=>delay + callProp(memoizedDelayProp || 0, key);\n                        });\n                    });\n                    ref.start();\n                }\n            });\n        } else {\n            let p = Promise.resolve();\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(refs, (ref)=>{\n                const controllers = ref.current;\n                if (controllers.length) {\n                    const queues = controllers.map((ctrl)=>{\n                        const q = ctrl.queue;\n                        ctrl.queue = [];\n                        return q;\n                    });\n                    p = p.then(()=>{\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(controllers, (ctrl, i)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(queues[i] || [], (update2)=>ctrl.queue.push(update2)));\n                        return Promise.all(ref.start());\n                    });\n                }\n            });\n        }\n    });\n}\n_s(useChain, \"Vd+jpwighRca2oU8HoLqd+zm4Bo=\", false, function() {\n    return [\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useSpring.ts\n\n// src/hooks/useSprings.ts\n\n\n// src/SpringValue.ts\n\n\n// src/AnimationConfig.ts\n\n// src/constants.ts\nvar config = {\n    default: {\n        tension: 170,\n        friction: 26\n    },\n    gentle: {\n        tension: 120,\n        friction: 14\n    },\n    wobbly: {\n        tension: 180,\n        friction: 12\n    },\n    stiff: {\n        tension: 210,\n        friction: 20\n    },\n    slow: {\n        tension: 280,\n        friction: 60\n    },\n    molasses: {\n        tension: 280,\n        friction: 120\n    }\n};\n// src/AnimationConfig.ts\nvar defaults = {\n    ...config.default,\n    mass: 1,\n    damping: 1,\n    easing: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.easings.linear,\n    clamp: false\n};\nvar AnimationConfig = class {\n    constructor(){\n        /**\n     * The initial velocity of one or more values.\n     *\n     * @default 0\n     */ this.velocity = 0;\n        Object.assign(this, defaults);\n    }\n};\nfunction mergeConfig(config2, newConfig, defaultConfig) {\n    if (defaultConfig) {\n        defaultConfig = {\n            ...defaultConfig\n        };\n        sanitizeConfig(defaultConfig, newConfig);\n        newConfig = {\n            ...defaultConfig,\n            ...newConfig\n        };\n    }\n    sanitizeConfig(config2, newConfig);\n    Object.assign(config2, newConfig);\n    for(const key in defaults){\n        if (config2[key] == null) {\n            config2[key] = defaults[key];\n        }\n    }\n    let { frequency, damping } = config2;\n    const { mass } = config2;\n    if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(frequency)) {\n        if (frequency < 0.01) frequency = 0.01;\n        if (damping < 0) damping = 0;\n        config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n        config2.friction = 4 * Math.PI * damping * mass / frequency;\n    }\n    return config2;\n}\nfunction sanitizeConfig(config2, props) {\n    if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.decay)) {\n        config2.duration = void 0;\n    } else {\n        const isTensionConfig = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.tension) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.friction);\n        if (isTensionConfig || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.frequency) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.damping) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.mass)) {\n            config2.duration = void 0;\n            config2.decay = void 0;\n        }\n        if (isTensionConfig) {\n            config2.frequency = void 0;\n        }\n    }\n}\n// src/Animation.ts\nvar emptyArray = [];\nvar Animation = class {\n    constructor(){\n        this.changed = false;\n        this.values = emptyArray;\n        this.toValues = null;\n        this.fromValues = emptyArray;\n        this.config = new AnimationConfig();\n        this.immediate = false;\n    }\n};\n// src/scheduleProps.ts\n\nfunction scheduleProps(callId, param) {\n    let { key, props, defaultProps, state, actions } = param;\n    return new Promise((resolve, reject)=>{\n        let delay;\n        let timeout;\n        var _props_cancel;\n        let cancel = matchProp((_props_cancel = props.cancel) !== null && _props_cancel !== void 0 ? _props_cancel : defaultProps === null || defaultProps === void 0 ? void 0 : defaultProps.cancel, key);\n        if (cancel) {\n            onStart();\n        } else {\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.pause)) {\n                state.paused = matchProp(props.pause, key);\n            }\n            let pause = defaultProps === null || defaultProps === void 0 ? void 0 : defaultProps.pause;\n            if (pause !== true) {\n                pause = state.paused || matchProp(pause, key);\n            }\n            delay = callProp(props.delay || 0, key);\n            if (pause) {\n                state.resumeQueue.add(onResume);\n                actions.pause();\n            } else {\n                actions.resume();\n                onResume();\n            }\n        }\n        function onPause() {\n            state.resumeQueue.add(onResume);\n            state.timeouts.delete(timeout);\n            timeout.cancel();\n            delay = timeout.time - _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.now();\n        }\n        function onResume() {\n            if (delay > 0 && !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n                state.delayed = true;\n                timeout = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.setTimeout(onStart, delay);\n                state.pauseQueue.add(onPause);\n                state.timeouts.add(timeout);\n            } else {\n                onStart();\n            }\n        }\n        function onStart() {\n            if (state.delayed) {\n                state.delayed = false;\n            }\n            state.pauseQueue.delete(onPause);\n            state.timeouts.delete(timeout);\n            if (callId <= (state.cancelId || 0)) {\n                cancel = true;\n            }\n            try {\n                actions.start({\n                    ...props,\n                    callId,\n                    cancel\n                }, resolve);\n            } catch (err) {\n                reject(err);\n            }\n        }\n    });\n}\n// src/runAsync.ts\n\n// src/AnimationResult.ts\nvar getCombinedResult = (target, results)=>results.length == 1 ? results[0] : results.some((result)=>result.cancelled) ? getCancelledResult(target.get()) : results.every((result)=>result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every((result)=>result.finished));\nvar getNoopResult = (value)=>({\n        value,\n        noop: true,\n        finished: true,\n        cancelled: false\n    });\nvar getFinishedResult = function(value, finished) {\n    let cancelled = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    return {\n        value,\n        finished,\n        cancelled\n    };\n};\nvar getCancelledResult = (value)=>({\n        value,\n        cancelled: true,\n        finished: false\n    });\n// src/runAsync.ts\nfunction runAsync(to2, props, state, target) {\n    const { callId, parentId, onRest } = props;\n    const { asyncTo: prevTo, promise: prevPromise } = state;\n    if (!parentId && to2 === prevTo && !props.reset) {\n        return prevPromise;\n    }\n    return state.promise = (async ()=>{\n        state.asyncId = callId;\n        state.asyncTo = to2;\n        const defaultProps = getDefaultProps(props, (value, key)=>// The `onRest` prop is only called when the `runAsync` promise is resolved.\n            key === \"onRest\" ? void 0 : value);\n        let preventBail;\n        let bail;\n        const bailPromise = new Promise((resolve, reject)=>(preventBail = resolve, bail = reject));\n        const bailIfEnded = (bailSignal)=>{\n            const bailResult = // The `cancel` prop or `stop` method was used.\n            callId <= (state.cancelId || 0) && getCancelledResult(target) || // The async `to` prop was replaced.\n            callId !== state.asyncId && getFinishedResult(target, false);\n            if (bailResult) {\n                bailSignal.result = bailResult;\n                bail(bailSignal);\n                throw bailSignal;\n            }\n        };\n        const animate = (arg1, arg2)=>{\n            const bailSignal = new BailSignal();\n            const skipAnimationSignal = new SkipAnimationSignal();\n            return (async ()=>{\n                if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n                    stopAsync(state);\n                    skipAnimationSignal.result = getFinishedResult(target, false);\n                    bail(skipAnimationSignal);\n                    throw skipAnimationSignal;\n                }\n                bailIfEnded(bailSignal);\n                const props2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(arg1) ? {\n                    ...arg1\n                } : {\n                    ...arg2,\n                    to: arg1\n                };\n                props2.parentId = callId;\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(defaultProps, (value, key)=>{\n                    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props2[key])) {\n                        props2[key] = value;\n                    }\n                });\n                const result2 = await target.start(props2);\n                bailIfEnded(bailSignal);\n                if (state.paused) {\n                    await new Promise((resume)=>{\n                        state.resumeQueue.add(resume);\n                    });\n                }\n                return result2;\n            })();\n        };\n        let result;\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n            stopAsync(state);\n            return getFinishedResult(target, false);\n        }\n        try {\n            let animating;\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(to2)) {\n                animating = (async (queue)=>{\n                    for (const props2 of queue){\n                        await animate(props2);\n                    }\n                })(to2);\n            } else {\n                animating = Promise.resolve(to2(animate, target.stop.bind(target)));\n            }\n            await Promise.all([\n                animating.then(preventBail),\n                bailPromise\n            ]);\n            result = getFinishedResult(target.get(), true, false);\n        } catch (err) {\n            if (err instanceof BailSignal) {\n                result = err.result;\n            } else if (err instanceof SkipAnimationSignal) {\n                result = err.result;\n            } else {\n                throw err;\n            }\n        } finally{\n            if (callId == state.asyncId) {\n                state.asyncId = parentId;\n                state.asyncTo = parentId ? prevTo : void 0;\n                state.promise = parentId ? prevPromise : void 0;\n            }\n        }\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(onRest)) {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                onRest(result, target, target.item);\n            });\n        }\n        return result;\n    })();\n}\nfunction stopAsync(state, cancelId) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(state.timeouts, (t)=>t.cancel());\n    state.pauseQueue.clear();\n    state.resumeQueue.clear();\n    state.asyncId = state.asyncTo = state.promise = void 0;\n    if (cancelId) state.cancelId = cancelId;\n}\nvar BailSignal = class extends Error {\n    constructor(){\n        super(\"An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.\");\n    }\n};\nvar SkipAnimationSignal = class extends Error {\n    constructor(){\n        super(\"SkipAnimationSignal\");\n    }\n};\n// src/FrameValue.ts\n\n\nvar isFrameValue = (value)=>value instanceof FrameValue;\nvar nextId = 1;\nvar FrameValue = class extends _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.FluidValue {\n    get priority() {\n        return this._priority;\n    }\n    set priority(priority) {\n        if (this._priority != priority) {\n            this._priority = priority;\n            this._onPriorityChange(priority);\n        }\n    }\n    /** Get the current value */ get() {\n        const node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        return node && node.getValue();\n    }\n    /** Create a spring that maps our value to another value */ to() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.to(this, args);\n    }\n    /** @deprecated Use the `to` method instead. */ interpolate() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.deprecateInterpolate)();\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.to(this, args);\n    }\n    toJSON() {\n        return this.get();\n    }\n    observerAdded(count) {\n        if (count == 1) this._attach();\n    }\n    observerRemoved(count) {\n        if (count == 0) this._detach();\n    }\n    /** Called when the first child is added. */ _attach() {}\n    /** Called when the last child is removed. */ _detach() {}\n    /** Tell our children about our new value */ _onChange(value) {\n        let idle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(this, {\n            type: \"change\",\n            parent: this,\n            value,\n            idle\n        });\n    }\n    /** Tell our children about our new priority */ _onPriorityChange(priority) {\n        if (!this.idle) {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.sort(this);\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(this, {\n            type: \"priority\",\n            parent: this,\n            priority\n        });\n    }\n    constructor(){\n        super(...arguments);\n        this.id = nextId++;\n        this._priority = 0;\n    }\n};\n// src/SpringPhase.ts\nvar $P = Symbol.for(\"SpringPhase\");\nvar HAS_ANIMATED = 1;\nvar IS_ANIMATING = 2;\nvar IS_PAUSED = 4;\nvar hasAnimated = (target)=>(target[$P] & HAS_ANIMATED) > 0;\nvar isAnimating = (target)=>(target[$P] & IS_ANIMATING) > 0;\nvar isPaused = (target)=>(target[$P] & IS_PAUSED) > 0;\nvar setActiveBit = (target, active)=>active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;\nvar setPausedBit = (target, paused)=>paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;\n// src/SpringValue.ts\nvar SpringValue = class extends FrameValue {\n    /** Equals true when not advancing on each frame. */ get idle() {\n        return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);\n    }\n    get goal() {\n        return (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(this.animation.to);\n    }\n    get velocity() {\n        const node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        return node instanceof _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2)=>node2.lastVelocity || 0);\n    }\n    /**\n   * When true, this value has been animated at least once.\n   */ get hasAnimated() {\n        return hasAnimated(this);\n    }\n    /**\n   * When true, this value has an unfinished animation,\n   * which is either active or paused.\n   */ get isAnimating() {\n        return isAnimating(this);\n    }\n    /**\n   * When true, all current and future animations are paused.\n   */ get isPaused() {\n        return isPaused(this);\n    }\n    /**\n   *\n   *\n   */ get isDelayed() {\n        return this._state.delayed;\n    }\n    /** Advance the current animation by a number of milliseconds */ advance(dt) {\n        let idle = true;\n        let changed = false;\n        const anim = this.animation;\n        let { toValues } = anim;\n        const { config: config2 } = anim;\n        const payload = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getPayload)(anim.to);\n        if (!payload && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(anim.to)) {\n            toValues = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(anim.to));\n        }\n        anim.values.forEach((node2, i)=>{\n            if (node2.done) return;\n            const to2 = // Animated strings always go from 0 to 1.\n            node2.constructor == _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];\n            let finished = anim.immediate;\n            let position = to2;\n            if (!finished) {\n                position = node2.lastPosition;\n                if (config2.tension <= 0) {\n                    node2.done = true;\n                    return;\n                }\n                let elapsed = node2.elapsedTime += dt;\n                const from = anim.fromValues[i];\n                const v0 = node2.v0 != null ? node2.v0 : node2.v0 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(config2.velocity) ? config2.velocity[i] : config2.velocity;\n                let velocity;\n                const precision = config2.precision || (from == to2 ? 5e-3 : Math.min(1, Math.abs(to2 - from) * 1e-3));\n                if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(config2.duration)) {\n                    let p = 1;\n                    if (config2.duration > 0) {\n                        if (this._memoizedDuration !== config2.duration) {\n                            this._memoizedDuration = config2.duration;\n                            if (node2.durationProgress > 0) {\n                                node2.elapsedTime = config2.duration * node2.durationProgress;\n                                elapsed = node2.elapsedTime += dt;\n                            }\n                        }\n                        p = (config2.progress || 0) + elapsed / this._memoizedDuration;\n                        p = p > 1 ? 1 : p < 0 ? 0 : p;\n                        node2.durationProgress = p;\n                    }\n                    position = from + config2.easing(p) * (to2 - from);\n                    velocity = (position - node2.lastPosition) / dt;\n                    finished = p == 1;\n                } else if (config2.decay) {\n                    const decay = config2.decay === true ? 0.998 : config2.decay;\n                    const e = Math.exp(-(1 - decay) * elapsed);\n                    position = from + v0 / (1 - decay) * (1 - e);\n                    finished = Math.abs(node2.lastPosition - position) <= precision;\n                    velocity = v0 * e;\n                } else {\n                    velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;\n                    const restVelocity = config2.restVelocity || precision / 10;\n                    const bounceFactor = config2.clamp ? 0 : config2.bounce;\n                    const canBounce = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(bounceFactor);\n                    const isGrowing = from == to2 ? node2.v0 > 0 : from < to2;\n                    let isMoving;\n                    let isBouncing = false;\n                    const step = 1;\n                    const numSteps = Math.ceil(dt / step);\n                    for(let n = 0; n < numSteps; ++n){\n                        isMoving = Math.abs(velocity) > restVelocity;\n                        if (!isMoving) {\n                            finished = Math.abs(to2 - position) <= precision;\n                            if (finished) {\n                                break;\n                            }\n                        }\n                        if (canBounce) {\n                            isBouncing = position == to2 || position > to2 == isGrowing;\n                            if (isBouncing) {\n                                velocity = -velocity * bounceFactor;\n                                position = to2;\n                            }\n                        }\n                        const springForce = -config2.tension * 1e-6 * (position - to2);\n                        const dampingForce = -config2.friction * 1e-3 * velocity;\n                        const acceleration = (springForce + dampingForce) / config2.mass;\n                        velocity = velocity + acceleration * step;\n                        position = position + velocity * step;\n                    }\n                }\n                node2.lastVelocity = velocity;\n                if (Number.isNaN(position)) {\n                    console.warn(\"Got NaN while animating:\", this);\n                    finished = true;\n                }\n            }\n            if (payload && !payload[i].done) {\n                finished = false;\n            }\n            if (finished) {\n                node2.done = true;\n            } else {\n                idle = false;\n            }\n            if (node2.setValue(position, config2.round)) {\n                changed = true;\n            }\n        });\n        const node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        const currVal = node.getValue();\n        if (idle) {\n            const finalVal = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(anim.to);\n            if ((currVal !== finalVal || changed) && !config2.decay) {\n                node.setValue(finalVal);\n                this._onChange(finalVal);\n            } else if (changed && config2.decay) {\n                this._onChange(currVal);\n            }\n            this._stop();\n        } else if (changed) {\n            this._onChange(currVal);\n        }\n    }\n    /** Set the current value, while stopping the current animation */ set(value) {\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n            this._stop();\n            this._focus(value);\n            this._set(value);\n        });\n        return this;\n    }\n    /**\n   * Freeze the active animation in time, as well as any updates merged\n   * before `resume` is called.\n   */ pause() {\n        this._update({\n            pause: true\n        });\n    }\n    /** Resume the animation if paused. */ resume() {\n        this._update({\n            pause: false\n        });\n    }\n    /** Skip to the end of the current animation. */ finish() {\n        if (isAnimating(this)) {\n            const { to: to2, config: config2 } = this.animation;\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                this._onStart();\n                if (!config2.decay) {\n                    this._set(to2, false);\n                }\n                this._stop();\n            });\n        }\n        return this;\n    }\n    /** Push props into the pending queue. */ update(props) {\n        const queue = this.queue || (this.queue = []);\n        queue.push(props);\n        return this;\n    }\n    start(to2, arg2) {\n        let queue;\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(to2)) {\n            queue = [\n                _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2) ? to2 : {\n                    ...arg2,\n                    to: to2\n                }\n            ];\n        } else {\n            queue = this.queue || [];\n            this.queue = [];\n        }\n        return Promise.all(queue.map((props)=>{\n            const up = this._update(props);\n            return up;\n        })).then((results)=>getCombinedResult(this, results));\n    }\n    /**\n   * Stop the current animation, and cancel any delayed updates.\n   *\n   * Pass `true` to call `onRest` with `cancelled: true`.\n   */ stop(cancel) {\n        const { to: to2 } = this.animation;\n        this._focus(this.get());\n        stopAsync(this._state, cancel && this._lastCallId);\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>this._stop(to2, cancel));\n        return this;\n    }\n    /** Restart the animation. */ reset() {\n        this._update({\n            reset: true\n        });\n    }\n    /** @internal */ eventObserved(event) {\n        if (event.type == \"change\") {\n            this._start();\n        } else if (event.type == \"priority\") {\n            this.priority = event.priority + 1;\n        }\n    }\n    /**\n   * Parse the `to` and `from` range from the given `props` object.\n   *\n   * This also ensures the initial value is available to animated components\n   * during the render phase.\n   */ _prepareNode(props) {\n        const key = this.key || \"\";\n        let { to: to2, from } = props;\n        to2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2) ? to2[key] : to2;\n        if (to2 == null || isAsyncTo(to2)) {\n            to2 = void 0;\n        }\n        from = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(from) ? from[key] : from;\n        if (from == null) {\n            from = void 0;\n        }\n        const range = {\n            to: to2,\n            from\n        };\n        if (!hasAnimated(this)) {\n            if (props.reverse) [to2, from] = [\n                from,\n                to2\n            ];\n            from = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(from);\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(from)) {\n                this._set(from);\n            } else if (!(0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this)) {\n                this._set(to2);\n            }\n        }\n        return range;\n    }\n    /** Every update is processed by this method before merging. */ _update(param, isLoop) {\n        let { ...props } = param;\n        const { key, defaultProps } = this;\n        if (props.default) Object.assign(defaultProps, getDefaultProps(props, (value, prop)=>/^on/.test(prop) ? resolveProp(value, key) : value));\n        mergeActiveFn(this, props, \"onProps\");\n        sendEvent(this, \"onProps\", props, this);\n        const range = this._prepareNode(props);\n        if (Object.isFrozen(this)) {\n            throw Error(\"Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?\");\n        }\n        const state = this._state;\n        return scheduleProps(++this._lastCallId, {\n            key,\n            props,\n            defaultProps,\n            state,\n            actions: {\n                pause: ()=>{\n                    if (!isPaused(this)) {\n                        setPausedBit(this, true);\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(state.pauseQueue);\n                        sendEvent(this, \"onPause\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n                    }\n                },\n                resume: ()=>{\n                    if (isPaused(this)) {\n                        setPausedBit(this, false);\n                        if (isAnimating(this)) {\n                            this._resume();\n                        }\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(state.resumeQueue);\n                        sendEvent(this, \"onResume\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n                    }\n                },\n                start: this._merge.bind(this, range)\n            }\n        }).then((result)=>{\n            if (props.loop && result.finished && !(isLoop && result.noop)) {\n                const nextProps = createLoopUpdate(props);\n                if (nextProps) {\n                    return this._update(nextProps, true);\n                }\n            }\n            return result;\n        });\n    }\n    /** Merge props into the current animation */ _merge(range, props, resolve) {\n        if (props.cancel) {\n            this.stop(true);\n            return resolve(getCancelledResult(this));\n        }\n        const hasToProp = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(range.to);\n        const hasFromProp = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(range.from);\n        if (hasToProp || hasFromProp) {\n            if (props.callId > this._lastToId) {\n                this._lastToId = props.callId;\n            } else {\n                return resolve(getCancelledResult(this));\n            }\n        }\n        const { key, defaultProps, animation: anim } = this;\n        const { to: prevTo, from: prevFrom } = anim;\n        let { to: to2 = prevTo, from = prevFrom } = range;\n        if (hasFromProp && !hasToProp && (!props.default || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(to2))) {\n            to2 = from;\n        }\n        if (props.reverse) [to2, from] = [\n            from,\n            to2\n        ];\n        const hasFromChanged = !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(from, prevFrom);\n        if (hasFromChanged) {\n            anim.from = from;\n        }\n        from = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(from);\n        const hasToChanged = !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(to2, prevTo);\n        if (hasToChanged) {\n            this._focus(to2);\n        }\n        const hasAsyncTo = isAsyncTo(props.to);\n        const { config: config2 } = anim;\n        const { decay, velocity } = config2;\n        if (hasToProp || hasFromProp) {\n            config2.velocity = 0;\n        }\n        if (props.config && !hasAsyncTo) {\n            mergeConfig(config2, callProp(props.config, key), // Avoid calling the same \"config\" prop twice.\n            props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n        }\n        let node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        if (!node || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(to2)) {\n            return resolve(getFinishedResult(this, true));\n        }\n        const reset = // When `reset` is undefined, the `from` prop implies `reset: true`,\n        // except for declarative updates. When `reset` is defined, there\n        // must exist a value to animate from.\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.reset) ? hasFromProp && !props.default : !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(from) && matchProp(props.reset, key);\n        const value = reset ? from : this.get();\n        const goal = computeGoal(to2);\n        const isAnimatable = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(goal) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(goal) || (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(goal);\n        const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n        if (hasToChanged) {\n            const nodeType = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimatedType)(to2);\n            if (nodeType !== node.constructor) {\n                if (immediate) {\n                    node = this._set(goal);\n                } else throw Error(\"Cannot animate between \".concat(node.constructor.name, \" and \").concat(nodeType.name, ', as the \"to\" prop suggests'));\n            }\n        }\n        const goalType = node.constructor;\n        let started = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2);\n        let finished = false;\n        if (!started) {\n            const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;\n            if (hasToChanged || hasValueChanged) {\n                finished = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(computeGoal(value), goal);\n                started = !finished;\n            }\n            if (!(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(anim.immediate, immediate) && !immediate || !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(config2.decay, decay) || !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(config2.velocity, velocity)) {\n                started = true;\n            }\n        }\n        if (finished && isAnimating(this)) {\n            if (anim.changed && !reset) {\n                started = true;\n            } else if (!started) {\n                this._stop(prevTo);\n            }\n        }\n        if (!hasAsyncTo) {\n            if (started || (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(prevTo)) {\n                anim.values = node.getPayload();\n                anim.toValues = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2) ? null : goalType == _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.AnimatedString ? [\n                    1\n                ] : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(goal);\n            }\n            if (anim.immediate != immediate) {\n                anim.immediate = immediate;\n                if (!immediate && !reset) {\n                    this._set(prevTo);\n                }\n            }\n            if (started) {\n                const { onRest } = anim;\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ACTIVE_EVENTS, (type)=>mergeActiveFn(this, props, type));\n                const result = getFinishedResult(this, checkFinished(this, prevTo));\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(this._pendingCalls, result);\n                this._pendingCalls.add(resolve);\n                if (anim.changed) _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                    anim.changed = !reset;\n                    onRest === null || onRest === void 0 ? void 0 : onRest(result, this);\n                    if (reset) {\n                        callProp(defaultProps.onRest, result);\n                    } else {\n                        var _anim_onStart;\n                        (_anim_onStart = anim.onStart) === null || _anim_onStart === void 0 ? void 0 : _anim_onStart.call(anim, result, this);\n                    }\n                });\n            }\n        }\n        if (reset) {\n            this._set(value);\n        }\n        if (hasAsyncTo) {\n            resolve(runAsync(props.to, props, this._state, this));\n        } else if (started) {\n            this._start();\n        } else if (isAnimating(this) && !hasToChanged) {\n            this._pendingCalls.add(resolve);\n        } else {\n            resolve(getNoopResult(value));\n        }\n    }\n    /** Update the `animation.to` value, which might be a `FluidValue` */ _focus(value) {\n        const anim = this.animation;\n        if (value !== anim.to) {\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidObservers)(this)) {\n                this._detach();\n            }\n            anim.to = value;\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidObservers)(this)) {\n                this._attach();\n            }\n        }\n    }\n    _attach() {\n        let priority = 0;\n        const { to: to2 } = this.animation;\n        if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2)) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(to2, this);\n            if (isFrameValue(to2)) {\n                priority = to2.priority + 1;\n            }\n        }\n        this.priority = priority;\n    }\n    _detach() {\n        const { to: to2 } = this.animation;\n        if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2)) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(to2, this);\n        }\n    }\n    /**\n   * Update the current value from outside the frameloop,\n   * and return the `Animated` node.\n   */ _set(arg) {\n        let idle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        const value = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(arg);\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(value)) {\n            const oldNode = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n            if (!oldNode || !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(value, oldNode.getValue())) {\n                const nodeType = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimatedType)(value);\n                if (!oldNode || oldNode.constructor != nodeType) {\n                    (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.setAnimated)(this, nodeType.create(value));\n                } else {\n                    oldNode.setValue(value);\n                }\n                if (oldNode) {\n                    _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                        this._onChange(value, idle);\n                    });\n                }\n            }\n        }\n        return (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n    }\n    _onStart() {\n        const anim = this.animation;\n        if (!anim.changed) {\n            anim.changed = true;\n            sendEvent(this, \"onStart\", getFinishedResult(this, checkFinished(this, anim.to)), this);\n        }\n    }\n    _onChange(value, idle) {\n        if (!idle) {\n            this._onStart();\n            callProp(this.animation.onChange, value, this);\n        }\n        callProp(this.defaultProps.onChange, value, this);\n        super._onChange(value, idle);\n    }\n    // This method resets the animation state (even if already animating) to\n    // ensure the latest from/to range is used, and it also ensures this spring\n    // is added to the frameloop.\n    _start() {\n        const anim = this.animation;\n        (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this).reset((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(anim.to));\n        if (!anim.immediate) {\n            anim.fromValues = anim.values.map((node)=>node.lastPosition);\n        }\n        if (!isAnimating(this)) {\n            setActiveBit(this, true);\n            if (!isPaused(this)) {\n                this._resume();\n            }\n        }\n    }\n    _resume() {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n            this.finish();\n        } else {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.start(this);\n        }\n    }\n    /**\n   * Exit the frameloop and notify `onRest` listeners.\n   *\n   * Always wrap `_stop` calls with `batchedUpdates`.\n   */ _stop(goal, cancel) {\n        if (isAnimating(this)) {\n            setActiveBit(this, false);\n            const anim = this.animation;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(anim.values, (node)=>{\n                node.done = true;\n            });\n            if (anim.toValues) {\n                anim.onChange = anim.onPause = anim.onResume = void 0;\n            }\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(this, {\n                type: \"idle\",\n                parent: this\n            });\n            const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal !== null && goal !== void 0 ? goal : anim.to));\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(this._pendingCalls, result);\n            if (anim.changed) {\n                anim.changed = false;\n                sendEvent(this, \"onRest\", result, this);\n            }\n        }\n    }\n    constructor(arg1, arg2){\n        super();\n        /** The animation state */ this.animation = new Animation();\n        /** Some props have customizable default values */ this.defaultProps = {};\n        /** The state for `runAsync` calls */ this._state = {\n            paused: false,\n            delayed: false,\n            pauseQueue: /* @__PURE__ */ new Set(),\n            resumeQueue: /* @__PURE__ */ new Set(),\n            timeouts: /* @__PURE__ */ new Set()\n        };\n        /** The promise resolvers of pending `start` calls */ this._pendingCalls = /* @__PURE__ */ new Set();\n        /** The counter for tracking `scheduleProps` calls */ this._lastCallId = 0;\n        /** The last `scheduleProps` call that changed the `to` prop */ this._lastToId = 0;\n        this._memoizedDuration = 0;\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(arg1) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(arg2)) {\n            const props = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(arg1) ? {\n                ...arg1\n            } : {\n                ...arg2,\n                from: arg1\n            };\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.default)) {\n                props.default = true;\n            }\n            this.start(props);\n        }\n    }\n};\nfunction checkFinished(target, to2) {\n    const goal = computeGoal(to2);\n    const value = computeGoal(target.get());\n    return (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(value, goal);\n}\nfunction createLoopUpdate(props) {\n    let loop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : props.loop, to2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : props.to;\n    const loopRet = callProp(loop);\n    if (loopRet) {\n        const overrides = loopRet !== true && inferTo(loopRet);\n        const reverse = (overrides || props).reverse;\n        const reset = !overrides || overrides.reset;\n        return createUpdate({\n            ...props,\n            loop,\n            // Avoid updating default props when looping.\n            default: false,\n            // Never loop the `pause` prop.\n            pause: void 0,\n            // For the \"reverse\" prop to loop as expected, the \"to\" prop\n            // must be undefined. The \"reverse\" prop is ignored when the\n            // \"to\" prop is an array or function.\n            to: !reverse || isAsyncTo(to2) ? to2 : void 0,\n            // Ignore the \"from\" prop except on reset.\n            from: reset ? props.from : void 0,\n            reset,\n            // The \"loop\" prop can return a \"useSpring\" props object to\n            // override any of the original props.\n            ...overrides\n        });\n    }\n}\nfunction createUpdate(props) {\n    const { to: to2, from } = props = inferTo(props);\n    const keys = /* @__PURE__ */ new Set();\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2)) findDefined(to2, keys);\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(from)) findDefined(from, keys);\n    props.keys = keys.size ? Array.from(keys) : null;\n    return props;\n}\nfunction declareUpdate(props) {\n    const update2 = createUpdate(props);\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(update2.default)) {\n        update2.default = getDefaultProps(update2);\n    }\n    return update2;\n}\nfunction findDefined(values, keys) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(values, (value, key)=>value != null && keys.add(key));\n}\nvar ACTIVE_EVENTS = [\n    \"onStart\",\n    \"onRest\",\n    \"onChange\",\n    \"onPause\",\n    \"onResume\"\n];\nfunction mergeActiveFn(target, props, type) {\n    target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;\n}\nfunction sendEvent(target, type) {\n    for(var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++){\n        args[_key - 2] = arguments[_key];\n    }\n    var _target_animation_type, _target_animation, _target_defaultProps_type, _target_defaultProps;\n    (_target_animation_type = (_target_animation = target.animation)[type]) === null || _target_animation_type === void 0 ? void 0 : _target_animation_type.call(_target_animation, ...args);\n    (_target_defaultProps_type = (_target_defaultProps = target.defaultProps)[type]) === null || _target_defaultProps_type === void 0 ? void 0 : _target_defaultProps_type.call(_target_defaultProps, ...args);\n}\n// src/Controller.ts\n\nvar BATCHED_EVENTS = [\n    \"onStart\",\n    \"onChange\",\n    \"onRest\"\n];\nvar nextId2 = 1;\nvar Controller = class {\n    /**\n   * Equals `true` when no spring values are in the frameloop, and\n   * no async animation is currently active.\n   */ get idle() {\n        return !this._state.asyncTo && Object.values(this.springs).every((spring)=>{\n            return spring.idle && !spring.isDelayed && !spring.isPaused;\n        });\n    }\n    get item() {\n        return this._item;\n    }\n    set item(item) {\n        this._item = item;\n    }\n    /** Get the current values of our springs */ get() {\n        const values = {};\n        this.each((spring, key)=>values[key] = spring.get());\n        return values;\n    }\n    /** Set the current values without animating. */ set(values) {\n        for(const key in values){\n            const value = values[key];\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(value)) {\n                this.springs[key].set(value);\n            }\n        }\n    }\n    /** Push an update onto the queue of each value. */ update(props) {\n        if (props) {\n            this.queue.push(createUpdate(props));\n        }\n        return this;\n    }\n    /**\n   * Start the queued animations for every spring, and resolve the returned\n   * promise once all queued animations have finished or been cancelled.\n   *\n   * When you pass a queue (instead of nothing), that queue is used instead of\n   * the queued animations added with the `update` method, which are left alone.\n   */ start(props) {\n        let { queue } = this;\n        if (props) {\n            queue = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(props).map(createUpdate);\n        } else {\n            this.queue = [];\n        }\n        if (this._flush) {\n            return this._flush(this, queue);\n        }\n        prepareKeys(this, queue);\n        return flushUpdateQueue(this, queue);\n    }\n    /** @internal */ stop(arg, keys) {\n        if (arg !== !!arg) {\n            keys = arg;\n        }\n        if (keys) {\n            const springs = this.springs;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys), (key)=>springs[key].stop(!!arg));\n        } else {\n            stopAsync(this._state, this._lastAsyncId);\n            this.each((spring)=>spring.stop(!!arg));\n        }\n        return this;\n    }\n    /** Freeze the active animation in time */ pause(keys) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(keys)) {\n            this.start({\n                pause: true\n            });\n        } else {\n            const springs = this.springs;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys), (key)=>springs[key].pause());\n        }\n        return this;\n    }\n    /** Resume the animation if paused. */ resume(keys) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(keys)) {\n            this.start({\n                pause: false\n            });\n        } else {\n            const springs = this.springs;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys), (key)=>springs[key].resume());\n        }\n        return this;\n    }\n    /** Call a function once per spring value */ each(iterator) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(this.springs, iterator);\n    }\n    /** @internal Called at the end of every animation frame */ _onFrame() {\n        const { onStart, onChange, onRest } = this._events;\n        const active = this._active.size > 0;\n        const changed = this._changed.size > 0;\n        if (active && !this._started || changed && !this._started) {\n            this._started = true;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(onStart, (param)=>{\n                let [onStart2, result] = param;\n                result.value = this.get();\n                onStart2(result, this, this._item);\n            });\n        }\n        const idle = !active && this._started;\n        const values = changed || idle && onRest.size ? this.get() : null;\n        if (changed && onChange.size) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(onChange, (param)=>{\n                let [onChange2, result] = param;\n                result.value = values;\n                onChange2(result, this, this._item);\n            });\n        }\n        if (idle) {\n            this._started = false;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(onRest, (param)=>{\n                let [onRest2, result] = param;\n                result.value = values;\n                onRest2(result, this, this._item);\n            });\n        }\n    }\n    /** @internal */ eventObserved(event) {\n        if (event.type == \"change\") {\n            this._changed.add(event.parent);\n            if (!event.idle) {\n                this._active.add(event.parent);\n            }\n        } else if (event.type == \"idle\") {\n            this._active.delete(event.parent);\n        } else return;\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.onFrame(this._onFrame);\n    }\n    constructor(props, flush3){\n        this.id = nextId2++;\n        /** The animated values */ this.springs = {};\n        /** The queue of props passed to the `update` method. */ this.queue = [];\n        /** The counter for tracking `scheduleProps` calls */ this._lastAsyncId = 0;\n        /** The values currently being animated */ this._active = /* @__PURE__ */ new Set();\n        /** The values that changed recently */ this._changed = /* @__PURE__ */ new Set();\n        /** Equals false when `onStart` listeners can be called */ this._started = false;\n        /** State used by the `runAsync` function */ this._state = {\n            paused: false,\n            pauseQueue: /* @__PURE__ */ new Set(),\n            resumeQueue: /* @__PURE__ */ new Set(),\n            timeouts: /* @__PURE__ */ new Set()\n        };\n        /** The event queues that are flushed once per frame maximum */ this._events = {\n            onStart: /* @__PURE__ */ new Map(),\n            onChange: /* @__PURE__ */ new Map(),\n            onRest: /* @__PURE__ */ new Map()\n        };\n        this._onFrame = this._onFrame.bind(this);\n        if (flush3) {\n            this._flush = flush3;\n        }\n        if (props) {\n            this.start({\n                default: true,\n                ...props\n            });\n        }\n    }\n};\nfunction flushUpdateQueue(ctrl, queue) {\n    return Promise.all(queue.map((props)=>flushUpdate(ctrl, props))).then((results)=>getCombinedResult(ctrl, results));\n}\nasync function flushUpdate(ctrl, props, isLoop) {\n    const { keys, to: to2, from, loop, onRest, onResolve } = props;\n    const defaults2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(props.default) && props.default;\n    if (loop) {\n        props.loop = false;\n    }\n    if (to2 === false) props.to = null;\n    if (from === false) props.from = null;\n    const asyncTo = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(to2) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(to2) ? to2 : void 0;\n    if (asyncTo) {\n        props.to = void 0;\n        props.onRest = void 0;\n        if (defaults2) {\n            defaults2.onRest = void 0;\n        }\n    } else {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(BATCHED_EVENTS, (key)=>{\n            const handler = props[key];\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(handler)) {\n                const queue = ctrl[\"_events\"][key];\n                props[key] = (param)=>{\n                    let { finished, cancelled } = param;\n                    const result2 = queue.get(handler);\n                    if (result2) {\n                        if (!finished) result2.finished = false;\n                        if (cancelled) result2.cancelled = true;\n                    } else {\n                        queue.set(handler, {\n                            value: null,\n                            finished: finished || false,\n                            cancelled: cancelled || false\n                        });\n                    }\n                };\n                if (defaults2) {\n                    defaults2[key] = props[key];\n                }\n            }\n        });\n    }\n    const state = ctrl[\"_state\"];\n    if (props.pause === !state.paused) {\n        state.paused = props.pause;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(props.pause ? state.pauseQueue : state.resumeQueue);\n    } else if (state.paused) {\n        props.pause = true;\n    }\n    const promises = (keys || Object.keys(ctrl.springs)).map((key)=>ctrl.springs[key].start(props));\n    const cancel = props.cancel === true || getDefaultProp(props, \"cancel\") === true;\n    if (asyncTo || cancel && state.asyncId) {\n        promises.push(scheduleProps(++ctrl[\"_lastAsyncId\"], {\n            props,\n            state,\n            actions: {\n                pause: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.noop,\n                resume: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.noop,\n                start (props2, resolve) {\n                    if (cancel) {\n                        stopAsync(state, ctrl[\"_lastAsyncId\"]);\n                        resolve(getCancelledResult(ctrl));\n                    } else {\n                        props2.onRest = onRest;\n                        resolve(runAsync(asyncTo, props2, state, ctrl));\n                    }\n                }\n            }\n        }));\n    }\n    if (state.paused) {\n        await new Promise((resume)=>{\n            state.resumeQueue.add(resume);\n        });\n    }\n    const result = getCombinedResult(ctrl, await Promise.all(promises));\n    if (loop && result.finished && !(isLoop && result.noop)) {\n        const nextProps = createLoopUpdate(props, loop, to2);\n        if (nextProps) {\n            prepareKeys(ctrl, [\n                nextProps\n            ]);\n            return flushUpdate(ctrl, nextProps, true);\n        }\n    }\n    if (onResolve) {\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>onResolve(result, ctrl, ctrl.item));\n    }\n    return result;\n}\nfunction getSprings(ctrl, props) {\n    const springs = {\n        ...ctrl.springs\n    };\n    if (props) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(props), (props2)=>{\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props2.keys)) {\n                props2 = createUpdate(props2);\n            }\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(props2.to)) {\n                props2 = {\n                    ...props2,\n                    to: void 0\n                };\n            }\n            prepareSprings(springs, props2, (key)=>{\n                return createSpring(key);\n            });\n        });\n    }\n    setSprings(ctrl, springs);\n    return springs;\n}\nfunction setSprings(ctrl, springs) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(springs, (spring, key)=>{\n        if (!ctrl.springs[key]) {\n            ctrl.springs[key] = spring;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(spring, ctrl);\n        }\n    });\n}\nfunction createSpring(key, observer) {\n    const spring = new SpringValue();\n    spring.key = key;\n    if (observer) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(spring, observer);\n    }\n    return spring;\n}\nfunction prepareSprings(springs, props, create) {\n    if (props.keys) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(props.keys, (key)=>{\n            const spring = springs[key] || (springs[key] = create(key));\n            spring[\"_prepareNode\"](props);\n        });\n    }\n}\nfunction prepareKeys(ctrl, queue) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(queue, (props)=>{\n        prepareSprings(ctrl.springs, props, (key)=>{\n            return createSpring(key, ctrl);\n        });\n    });\n}\n// src/SpringContext.tsx\n\n\n\nvar SpringContext = (param)=>{\n    let { children, ...props } = param;\n    _s1();\n    const inherited = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ctx);\n    const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;\n    props = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useMemoOne)(()=>({\n            pause,\n            immediate\n        }), [\n        pause,\n        immediate\n    ]);\n    const { Provider } = ctx;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Provider, {\n        value: props\n    }, children);\n};\n_s1(SpringContext, \"iAoqMYsYmgTC4tx7ORbDhJzNWJE=\", false, function() {\n    return [\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useMemoOne\n    ];\n});\n_c = SpringContext;\nvar ctx = makeContext(SpringContext, {});\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\nfunction makeContext(target, init) {\n    Object.assign(target, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(init));\n    target.Provider._context = target;\n    target.Consumer._context = target;\n    return target;\n}\n// src/SpringRef.ts\n\nvar SpringRef = ()=>{\n    const current = [];\n    const SpringRef2 = function(props) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.deprecateDirectCall)();\n        const results = [];\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>{\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props)) {\n                results.push(ctrl.start());\n            } else {\n                const update2 = _getProps(props, ctrl, i);\n                if (update2) {\n                    results.push(ctrl.start(update2));\n                }\n            }\n        });\n        return results;\n    };\n    SpringRef2.current = current;\n    SpringRef2.add = function(ctrl) {\n        if (!current.includes(ctrl)) {\n            current.push(ctrl);\n        }\n    };\n    SpringRef2.delete = function(ctrl) {\n        const i = current.indexOf(ctrl);\n        if (~i) current.splice(i, 1);\n    };\n    SpringRef2.pause = function() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl)=>ctrl.pause(...arguments));\n        return this;\n    };\n    SpringRef2.resume = function() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl)=>ctrl.resume(...arguments));\n        return this;\n    };\n    SpringRef2.set = function(values) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>{\n            const update2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(values) ? values(i, ctrl) : values;\n            if (update2) {\n                ctrl.set(update2);\n            }\n        });\n    };\n    SpringRef2.start = function(props) {\n        const results = [];\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>{\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props)) {\n                results.push(ctrl.start());\n            } else {\n                const update2 = this._getProps(props, ctrl, i);\n                if (update2) {\n                    results.push(ctrl.start(update2));\n                }\n            }\n        });\n        return results;\n    };\n    SpringRef2.stop = function() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl)=>ctrl.stop(...arguments));\n        return this;\n    };\n    SpringRef2.update = function(props) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>ctrl.update(this._getProps(props, ctrl, i)));\n        return this;\n    };\n    const _getProps = function(arg, ctrl, index) {\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(arg) ? arg(index, ctrl) : arg;\n    };\n    SpringRef2._getProps = _getProps;\n    return SpringRef2;\n};\n_c1 = SpringRef;\n// src/hooks/useSprings.ts\nfunction useSprings(length, props, deps) {\n    _s2();\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props) && props;\n    if (propsFn && !deps) deps = [];\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n    const layoutId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const forceUpdate = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate)();\n    const state = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            ctrls: [],\n            queue: [],\n            flush (ctrl, updates2) {\n                const springs2 = getSprings(ctrl, updates2);\n                const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key)=>!ctrl.springs[key]);\n                return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve)=>{\n                    setSprings(ctrl, springs2);\n                    state.queue.push(()=>{\n                        resolve(flushUpdateQueue(ctrl, updates2));\n                    });\n                    forceUpdate();\n                });\n            }\n        }), []);\n    const ctrls = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([\n        ...state.ctrls\n    ]);\n    const updates = [];\n    const prevLength = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev)(length) || 0;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ctrls.current.slice(length, prevLength), (ctrl)=>{\n            detachRefs(ctrl, ref);\n            ctrl.stop(true);\n        });\n        ctrls.current.length = length;\n        declareUpdates(prevLength, length);\n    }, [\n        length\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        declareUpdates(0, Math.min(prevLength, length));\n    }, deps);\n    function declareUpdates(startIndex, endIndex) {\n        for(let i = startIndex; i < endIndex; i++){\n            const ctrl = ctrls.current[i] || (ctrls.current[i] = new Controller(null, state.flush));\n            const update2 = propsFn ? propsFn(i, ctrl) : props[i];\n            if (update2) {\n                updates[i] = declareUpdate(update2);\n            }\n        }\n    }\n    const springs = ctrls.current.map((ctrl, i)=>getSprings(ctrl, updates[i]));\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SpringContext);\n    const prevContext = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev)(context);\n    const hasContext = context !== prevContext && hasProps(context);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        layoutId.current++;\n        state.ctrls = ctrls.current;\n        const { queue } = state;\n        if (queue.length) {\n            state.queue = [];\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(queue, (cb)=>cb());\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ctrls.current, (ctrl, i)=>{\n            ref === null || ref === void 0 ? void 0 : ref.add(ctrl);\n            if (hasContext) {\n                ctrl.start({\n                    default: context\n                });\n            }\n            const update2 = updates[i];\n            if (update2) {\n                replaceRef(ctrl, update2.ref);\n                if (ctrl.ref) {\n                    ctrl.queue.push(update2);\n                } else {\n                    ctrl.start(update2);\n                }\n            }\n        });\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(state.ctrls, (ctrl)=>ctrl.stop(true));\n        });\n    const values = springs.map((x)=>({\n            ...x\n        }));\n    return ref ? [\n        values,\n        ref\n    ] : values;\n}\n_s2(useSprings, \"hYYBNj8i3sOeF76E+RzhO8u7udI=\", false, function() {\n    return [\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev,\n        react__WEBPACK_IMPORTED_MODULE_1__.useContext,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce\n    ];\n});\n// src/hooks/useSpring.ts\nfunction useSpring(props, deps) {\n    _s3();\n    const isFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props);\n    const [[values], ref] = useSprings(1, isFn ? props : [\n        props\n    ], isFn ? deps || [] : deps);\n    return isFn || arguments.length == 2 ? [\n        values,\n        ref\n    ] : values;\n}\n_s3(useSpring, \"SDMMI4TeIG06gbUyDm+G9xb8npc=\", false, function() {\n    return [\n        useSprings\n    ];\n});\n// src/hooks/useSpringRef.ts\n\nvar initSpringRef = ()=>SpringRef();\nvar useSpringRef = ()=>{\n    _s4();\n    return (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initSpringRef)[0];\n};\n_s4(useSpringRef, \"WMYQrW8aTW5m34e+VWfswQ7OC0U=\");\n// src/hooks/useSpringValue.ts\n\nvar useSpringValue = (initial, props)=>{\n    _s5();\n    const springValue = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useConstant)(()=>new SpringValue(initial, props));\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>()=>{\n            springValue.stop();\n        });\n    return springValue;\n};\n_s5(useSpringValue, \"hGrzQbJ6TUSsox7ygS/NDs7Qfw4=\", false, function() {\n    return [\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useConstant,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce\n    ];\n});\n// src/hooks/useTrail.ts\n\nfunction useTrail(length, propsArg, deps) {\n    _s6();\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(propsArg) && propsArg;\n    if (propsFn && !deps) deps = [];\n    let reverse = true;\n    let passedRef = void 0;\n    const result = useSprings(length, (i, ctrl)=>{\n        const props = propsFn ? propsFn(i, ctrl) : propsArg;\n        passedRef = props.ref;\n        reverse = reverse && props.reverse;\n        return props;\n    }, // Ensure the props function is called when no deps exist.\n    // This works around the 3 argument rule.\n    deps || [\n        {}\n    ]);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(result[1].current, (ctrl, i)=>{\n            const parent = result[1].current[i + (reverse ? 1 : -1)];\n            replaceRef(ctrl, passedRef);\n            if (ctrl.ref) {\n                if (parent) {\n                    ctrl.update({\n                        to: parent.springs\n                    });\n                }\n                return;\n            }\n            if (parent) {\n                ctrl.start({\n                    to: parent.springs\n                });\n            } else {\n                ctrl.start();\n            }\n        });\n    }, deps);\n    if (propsFn || arguments.length == 3) {\n        const ref = passedRef !== null && passedRef !== void 0 ? passedRef : result[1];\n        ref[\"_getProps\"] = (propsArg2, ctrl, i)=>{\n            const props = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(propsArg2) ? propsArg2(i, ctrl) : propsArg2;\n            if (props) {\n                const parent = ref.current[i + (props.reverse ? 1 : -1)];\n                if (parent) props.to = parent.springs;\n                return props;\n            }\n        };\n        return result;\n    }\n    return result[0];\n}\n_s6(useTrail, \"rP/7uOiOJQcSEwKyLsIPapcM2tA=\", false, function() {\n    return [\n        useSprings,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useTransition.tsx\n\n\n\nfunction useTransition(data, props, deps) {\n    _s7();\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props) && props;\n    const { reset, sort, trail = 0, expires = true, exitBeforeEnter = false, onDestroyed, ref: propsRef, config: propsConfig } = propsFn ? propsFn() : props;\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n    const items = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(data);\n    const transitions = [];\n    const usedTransitions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const prevTransitions = reset ? null : usedTransitions.current;\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        usedTransitions.current = transitions;\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(transitions, (t)=>{\n            ref === null || ref === void 0 ? void 0 : ref.add(t.ctrl);\n            t.ctrl.ref = ref;\n        });\n        return ()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(usedTransitions.current, (t)=>{\n                if (t.expired) {\n                    clearTimeout(t.expirationId);\n                }\n                detachRefs(t.ctrl, ref);\n                t.ctrl.stop(true);\n            });\n        };\n    });\n    const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);\n    const expired = reset && usedTransitions.current || [];\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(expired, (param)=>{\n            let { ctrl, item, key } = param;\n            detachRefs(ctrl, ref);\n            callProp(onDestroyed, item, key);\n        }));\n    const reused = [];\n    if (prevTransitions) (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(prevTransitions, (t, i)=>{\n        if (t.expired) {\n            clearTimeout(t.expirationId);\n            expired.push(t);\n        } else {\n            i = reused[i] = keys.indexOf(t.key);\n            if (~i) transitions[i] = t;\n        }\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(items, (item, i)=>{\n        if (!transitions[i]) {\n            transitions[i] = {\n                key: keys[i],\n                item,\n                phase: \"mount\" /* MOUNT */ ,\n                ctrl: new Controller()\n            };\n            transitions[i].ctrl.item = item;\n        }\n    });\n    if (reused.length) {\n        let i = -1;\n        const { leave } = propsFn ? propsFn() : props;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(reused, (keyIndex, prevIndex)=>{\n            const t = prevTransitions[prevIndex];\n            if (~keyIndex) {\n                i = transitions.indexOf(t);\n                transitions[i] = {\n                    ...t,\n                    item: items[keyIndex]\n                };\n            } else if (leave) {\n                transitions.splice(++i, 0, t);\n            }\n        });\n    }\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(sort)) {\n        transitions.sort((a, b)=>sort(a.item, b.item));\n    }\n    let delay = -trail;\n    const forceUpdate = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate)();\n    const defaultProps = getDefaultProps(props);\n    const changes = /* @__PURE__ */ new Map();\n    const exitingTransitions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(/* @__PURE__ */ new Map());\n    const forceChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(transitions, (t, i)=>{\n        const key = t.key;\n        const prevPhase = t.phase;\n        const p = propsFn ? propsFn() : props;\n        let to2;\n        let phase;\n        const propsDelay = callProp(p.delay || 0, key);\n        if (prevPhase == \"mount\" /* MOUNT */ ) {\n            to2 = p.enter;\n            phase = \"enter\" /* ENTER */ ;\n        } else {\n            const isLeave = keys.indexOf(key) < 0;\n            if (prevPhase != \"leave\" /* LEAVE */ ) {\n                if (isLeave) {\n                    to2 = p.leave;\n                    phase = \"leave\" /* LEAVE */ ;\n                } else if (to2 = p.update) {\n                    phase = \"update\" /* UPDATE */ ;\n                } else return;\n            } else if (!isLeave) {\n                to2 = p.enter;\n                phase = \"enter\" /* ENTER */ ;\n            } else return;\n        }\n        to2 = callProp(to2, t.item, i);\n        to2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2) ? inferTo(to2) : {\n            to: to2\n        };\n        if (!to2.config) {\n            const config2 = propsConfig || defaultProps.config;\n            to2.config = callProp(config2, t.item, i, phase);\n        }\n        delay += trail;\n        const payload = {\n            ...defaultProps,\n            // we need to add our props.delay value you here.\n            delay: propsDelay + delay,\n            ref: propsRef,\n            immediate: p.immediate,\n            // This prevents implied resets.\n            reset: false,\n            // Merge any phase-specific props.\n            ...to2\n        };\n        if (phase == \"enter\" /* ENTER */  && _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(payload.from)) {\n            const p2 = propsFn ? propsFn() : props;\n            const from = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(p2.initial) || prevTransitions ? p2.from : p2.initial;\n            payload.from = callProp(from, t.item, i);\n        }\n        const { onResolve } = payload;\n        payload.onResolve = (result)=>{\n            callProp(onResolve, result);\n            const transitions2 = usedTransitions.current;\n            const t2 = transitions2.find((t3)=>t3.key === key);\n            if (!t2) return;\n            if (result.cancelled && t2.phase != \"update\" /* UPDATE */ ) {\n                return;\n            }\n            if (t2.ctrl.idle) {\n                const idle = transitions2.every((t3)=>t3.ctrl.idle);\n                if (t2.phase == \"leave\" /* LEAVE */ ) {\n                    const expiry = callProp(expires, t2.item);\n                    if (expiry !== false) {\n                        const expiryMs = expiry === true ? 0 : expiry;\n                        t2.expired = true;\n                        if (!idle && expiryMs > 0) {\n                            if (expiryMs <= 2147483647) t2.expirationId = setTimeout(forceUpdate, expiryMs);\n                            return;\n                        }\n                    }\n                }\n                if (idle && transitions2.some((t3)=>t3.expired)) {\n                    exitingTransitions.current.delete(t2);\n                    if (exitBeforeEnter) {\n                        forceChange.current = true;\n                    }\n                    forceUpdate();\n                }\n            }\n        };\n        const springs = getSprings(t.ctrl, payload);\n        if (phase === \"leave\" /* LEAVE */  && exitBeforeEnter) {\n            exitingTransitions.current.set(t, {\n                phase,\n                springs,\n                payload\n            });\n        } else {\n            changes.set(t, {\n                phase,\n                springs,\n                payload\n            });\n        }\n    });\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SpringContext);\n    const prevContext = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev)(context);\n    const hasContext = context !== prevContext && hasProps(context);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        if (hasContext) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(transitions, (t)=>{\n                t.ctrl.start({\n                    default: context\n                });\n            });\n        }\n    }, [\n        context\n    ]);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(changes, (_, t)=>{\n        if (exitingTransitions.current.size) {\n            const ind = transitions.findIndex((state)=>state.key === t.key);\n            transitions.splice(ind, 1);\n        }\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(exitingTransitions.current.size ? exitingTransitions.current : changes, (param, t)=>{\n            let { phase, payload } = param;\n            const { ctrl } = t;\n            t.phase = phase;\n            ref === null || ref === void 0 ? void 0 : ref.add(ctrl);\n            if (hasContext && phase == \"enter\" /* ENTER */ ) {\n                ctrl.start({\n                    default: context\n                });\n            }\n            if (payload) {\n                replaceRef(ctrl, payload.ref);\n                if ((ctrl.ref || ref) && !forceChange.current) {\n                    ctrl.update(payload);\n                } else {\n                    ctrl.start(payload);\n                    if (forceChange.current) {\n                        forceChange.current = false;\n                    }\n                }\n            }\n        });\n    }, reset ? void 0 : deps);\n    const renderTransitions = (render)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, transitions.map((t, i)=>{\n            const { springs } = changes.get(t) || t.ctrl;\n            const elem = render({\n                ...springs\n            }, t.item, t, i);\n            return elem && elem.type ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(elem.type, {\n                ...elem.props,\n                key: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(t.key) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(t.key) ? t.key : t.ctrl.id,\n                ref: elem.ref\n            }) : elem;\n        }));\n    return ref ? [\n        renderTransitions,\n        ref\n    ] : renderTransitions;\n}\n_s7(useTransition, \"42pB3Ij5X1DSdJfTRN9xEyhj2Bo=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useMemo,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_1__.useContext,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\nvar nextKey = 1;\nfunction getKeys(items, param, prevTransitions) {\n    let { key, keys = key } = param;\n    if (keys === null) {\n        const reused = /* @__PURE__ */ new Set();\n        return items.map((item)=>{\n            const t = prevTransitions && prevTransitions.find((t2)=>t2.item === item && t2.phase !== \"leave\" /* LEAVE */  && !reused.has(t2));\n            if (t) {\n                reused.add(t);\n                return t.key;\n            }\n            return nextKey++;\n        });\n    }\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(keys) ? items : _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(keys) ? items.map(keys) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys);\n}\n// src/hooks/useScroll.ts\n\nvar useScroll = function() {\n    let { container, ...springOptions } = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n    _s8();\n    const [scrollValues, api] = useSpring(()=>({\n            scrollX: 0,\n            scrollY: 0,\n            scrollXProgress: 0,\n            scrollYProgress: 0,\n            ...springOptions\n        }), []);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        const cleanupScroll = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.onScroll)((param)=>{\n            let { x, y } = param;\n            api.start({\n                scrollX: x.current,\n                scrollXProgress: x.progress,\n                scrollY: y.current,\n                scrollYProgress: y.progress\n            });\n        }, {\n            container: (container === null || container === void 0 ? void 0 : container.current) || void 0\n        });\n        return ()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(Object.values(scrollValues), (value)=>value.stop());\n            cleanupScroll();\n        };\n    }, []);\n    return scrollValues;\n};\n_s8(useScroll, \"Jti96r2Rws6Ekr5fIwfu+1CFXcw=\", false, function() {\n    return [\n        useSpring,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useResize.ts\n\nvar useResize = (param)=>{\n    let { container, ...springOptions } = param;\n    _s9();\n    const [sizeValues, api] = useSpring(()=>({\n            width: 0,\n            height: 0,\n            ...springOptions\n        }), []);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        const cleanupScroll = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.onResize)((param)=>{\n            let { width, height } = param;\n            api.start({\n                width,\n                height,\n                immediate: sizeValues.width.get() === 0 || sizeValues.height.get() === 0\n            });\n        }, {\n            container: (container === null || container === void 0 ? void 0 : container.current) || void 0\n        });\n        return ()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(Object.values(sizeValues), (value)=>value.stop());\n            cleanupScroll();\n        };\n    }, []);\n    return sizeValues;\n};\n_s9(useResize, \"IQ4lWHNynSxWdhY6Jf1n8BSsJMs=\", false, function() {\n    return [\n        useSpring,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useInView.ts\n\n\nvar defaultThresholdOptions = {\n    any: 0,\n    all: 1\n};\nfunction useInView(props, args) {\n    _s10();\n    const [isInView, setIsInView] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props) && props;\n    const springsProps = propsFn ? propsFn() : {};\n    const { to: to2 = {}, from = {}, ...restSpringProps } = springsProps;\n    const intersectionArguments = propsFn ? args : props;\n    const [springs, api] = useSpring(()=>({\n            from,\n            ...restSpringProps\n        }), []);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        const element = ref.current;\n        const { root, once, amount = \"any\", ...restArgs } = intersectionArguments !== null && intersectionArguments !== void 0 ? intersectionArguments : {};\n        if (!element || once && isInView || typeof IntersectionObserver === \"undefined\") return;\n        const activeIntersections = /* @__PURE__ */ new WeakMap();\n        const onEnter = ()=>{\n            if (to2) {\n                api.start(to2);\n            }\n            setIsInView(true);\n            const cleanup = ()=>{\n                if (from) {\n                    api.start(from);\n                }\n                setIsInView(false);\n            };\n            return once ? void 0 : cleanup;\n        };\n        const handleIntersection = (entries)=>{\n            entries.forEach((entry)=>{\n                const onLeave = activeIntersections.get(entry.target);\n                if (entry.isIntersecting === Boolean(onLeave)) {\n                    return;\n                }\n                if (entry.isIntersecting) {\n                    const newOnLeave = onEnter();\n                    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(newOnLeave)) {\n                        activeIntersections.set(entry.target, newOnLeave);\n                    } else {\n                        observer.unobserve(entry.target);\n                    }\n                } else if (onLeave) {\n                    onLeave();\n                    activeIntersections.delete(entry.target);\n                }\n            });\n        };\n        const observer = new IntersectionObserver(handleIntersection, {\n            root: root && root.current || void 0,\n            threshold: typeof amount === \"number\" || Array.isArray(amount) ? amount : defaultThresholdOptions[amount],\n            ...restArgs\n        });\n        observer.observe(element);\n        return ()=>observer.unobserve(element);\n    }, [\n        intersectionArguments\n    ]);\n    if (propsFn) {\n        return [\n            ref,\n            springs\n        ];\n    }\n    return [\n        ref,\n        isInView\n    ];\n}\n_s10(useInView, \"7PuQs9I897GO6tzsabnAsgHidAU=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_1__.useState,\n        react__WEBPACK_IMPORTED_MODULE_1__.useRef,\n        useSpring,\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect\n    ];\n});\n// src/components/Spring.tsx\nfunction Spring(param) {\n    let { children, ...props } = param;\n    _s11();\n    return children(useSpring(props));\n}\n_s11(Spring, \"osm+04XShAFeF/DrWOpJZHjaaNg=\", false, function() {\n    return [\n        useSpring\n    ];\n});\n_c2 = Spring;\n// src/components/Trail.tsx\n\nfunction Trail(param) {\n    let { items, children, ...props } = param;\n    _s12();\n    const trails = useTrail(items.length, props);\n    return items.map((item, index)=>{\n        const result = children(item, index);\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(result) ? result(trails[index]) : result;\n    });\n}\n_s12(Trail, \"IZ78DWwcRLiU/XMADn7w03VEdK0=\", false, function() {\n    return [\n        useTrail\n    ];\n});\n_c3 = Trail;\n// src/components/Transition.tsx\nfunction Transition(param) {\n    let { items, children, ...props } = param;\n    _s13();\n    return useTransition(items, props)(children);\n}\n_s13(Transition, \"28mb38mkSsMdKhDodgMEJ1axbVA=\", false, function() {\n    return [\n        useTransition\n    ];\n});\n_c4 = Transition;\n// src/interpolate.ts\n\n// src/Interpolation.ts\n\n\nvar Interpolation = class extends FrameValue {\n    advance(_dt) {\n        const value = this._get();\n        const oldValue = this.get();\n        if (!(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(value, oldValue)) {\n            (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this).setValue(value);\n            this._onChange(value, this.idle);\n        }\n        if (!this.idle && checkIdle(this._active)) {\n            becomeIdle(this);\n        }\n    }\n    _get() {\n        const inputs = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(this.source) ? this.source.map(_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(this.source));\n        return this.calc(...inputs);\n    }\n    _start() {\n        if (this.idle && !checkIdle(this._active)) {\n            this.idle = false;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getPayload)(this), (node)=>{\n                node.done = false;\n            });\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n                _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>this.advance());\n                becomeIdle(this);\n            } else {\n                _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.start(this);\n            }\n        }\n    }\n    // Observe our sources only when we're observed.\n    _attach() {\n        let priority = 1;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.source), (source)=>{\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(source, this);\n            }\n            if (isFrameValue(source)) {\n                if (!source.idle) {\n                    this._active.add(source);\n                }\n                priority = Math.max(priority, source.priority + 1);\n            }\n        });\n        this.priority = priority;\n        this._start();\n    }\n    // Stop observing our sources once we have no observers.\n    _detach() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.source), (source)=>{\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(source, this);\n            }\n        });\n        this._active.clear();\n        becomeIdle(this);\n    }\n    /** @internal */ eventObserved(event) {\n        if (event.type == \"change\") {\n            if (event.idle) {\n                this.advance();\n            } else {\n                this._active.add(event.parent);\n                this._start();\n            }\n        } else if (event.type == \"idle\") {\n            this._active.delete(event.parent);\n        } else if (event.type == \"priority\") {\n            this.priority = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.source).reduce((highest, parent)=>Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);\n        }\n    }\n    constructor(source, args){\n        super();\n        this.source = source;\n        /** Equals false when in the frameloop */ this.idle = true;\n        /** The inputs which are currently animating */ this._active = /* @__PURE__ */ new Set();\n        this.calc = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator)(...args);\n        const value = this._get();\n        const nodeType = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimatedType)(value);\n        (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.setAnimated)(this, nodeType.create(value));\n    }\n};\nfunction isIdle(source) {\n    return source.idle !== false;\n}\nfunction checkIdle(active) {\n    return !active.size || Array.from(active).every(isIdle);\n}\nfunction becomeIdle(self) {\n    if (!self.idle) {\n        self.idle = true;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getPayload)(self), (node)=>{\n            node.done = true;\n        });\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(self, {\n            type: \"idle\",\n            parent: self\n        });\n    }\n}\n// src/interpolate.ts\nvar to = function(source) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return new Interpolation(source, args);\n};\nvar interpolate = function(source) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.deprecateInterpolate)(), new Interpolation(source, args);\n};\n// src/globals.ts\n\n_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.assign({\n    createStringInterpolator: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createStringInterpolator,\n    to: (source, args)=>new Interpolation(source, args)\n});\nvar update = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.advance;\n// src/index.ts\n\n\n //# sourceMappingURL=react-spring_core.modern.mjs.map\nvar _c, _c1, _c2, _c3, _c4;\n$RefreshReg$(_c, \"SpringContext\");\n$RefreshReg$(_c1, \"SpringRef\");\n$RefreshReg$(_c2, \"Spring\");\n$RefreshReg$(_c3, \"Trail\");\n$RefreshReg$(_c4, \"Transition\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3ByaW5nL2NvcmUvZGlzdC9yZWFjdC1zcHJpbmdfY29yZS5tb2Rlcm4ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsd0JBQXdCOztBQUMrQztBQUV2RSxpQkFBaUI7QUFRYTtBQUM5QixTQUFTUyxTQUFTQyxLQUFLO0lBQUU7UUFBR0MsS0FBSCwyQkFBTzs7SUFDOUIsT0FBT1Qsb0RBQUVBLENBQUNVLEdBQUcsQ0FBQ0YsU0FBU0EsU0FBU0MsUUFBUUQ7QUFDMUM7QUFDQSxJQUFJRyxZQUFZLENBQUNILE9BQU9JLE1BQVFKLFVBQVUsUUFBUSxDQUFDLENBQUVJLENBQUFBLE9BQU9KLFNBQVVSLENBQUFBLG9EQUFFQSxDQUFDVSxHQUFHLENBQUNGLFNBQVNBLE1BQU1JLE9BQU9YLDZEQUFPQSxDQUFDTyxPQUFPSyxRQUFRLENBQUNELElBQUcsQ0FBQztBQUMvSCxJQUFJRSxjQUFjLENBQUNDLE1BQU1ILE1BQVFaLG9EQUFFQSxDQUFDZ0IsR0FBRyxDQUFDRCxRQUFRSCxPQUFPRyxJQUFJLENBQUNILElBQUksR0FBR0c7QUFDbkUsSUFBSUUsaUJBQWlCLENBQUNDLE9BQU9OLE1BQVFNLE1BQU1DLE9BQU8sS0FBSyxPQUFPRCxLQUFLLENBQUNOLElBQUksR0FBR00sTUFBTUMsT0FBTyxHQUFHRCxNQUFNQyxPQUFPLENBQUNQLElBQUksR0FBRyxLQUFLO0FBQ3JILElBQUlRLGdCQUFnQixDQUFDWixRQUFVQTtBQUMvQixJQUFJYSxrQkFBa0IsU0FBQ0g7UUFBT0ksNkVBQVlGO0lBQ3hDLElBQUlHLE9BQU9DO0lBQ1gsSUFBSU4sTUFBTUMsT0FBTyxJQUFJRCxNQUFNQyxPQUFPLEtBQUssTUFBTTtRQUMzQ0QsUUFBUUEsTUFBTUMsT0FBTztRQUNyQkksT0FBT0UsT0FBT0YsSUFBSSxDQUFDTDtJQUNyQjtJQUNBLE1BQU1RLFlBQVks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LElBQUksSUFBSUMsTUFBTXhWLElBQUksQ0FBQ3VQLFFBQVFwRSxLQUFLLENBQUNrWjtBQUNsRDtBQUNBLFNBQVNQLFdBQVdRLElBQUk7SUFDdEIsSUFBSSxDQUFDQSxLQUFLOVYsSUFBSSxFQUFFO1FBQ2Q4VixLQUFLOVYsSUFBSSxHQUFHO1FBQ1prVSwwREFBTUEsQ0FBQ2Msa0VBQVdBLENBQUNjLE9BQU8sQ0FBQ3ZXO1lBQ3pCQSxLQUFLc0MsSUFBSSxHQUFHO1FBQ2Q7UUFDQTRTLHdFQUFtQkEsQ0FBQ3FCLE1BQU07WUFDeEI3VixNQUFNO1lBQ05DLFFBQVE0VjtRQUNWO0lBQ0Y7QUFDRjtBQUVBLHFCQUFxQjtBQUNyQixJQUFJcmtCLEtBQUssU0FBQytqQjtxQ0FBV3JsQjtRQUFBQTs7V0FBUyxJQUFJOGtCLGNBQWNPLFFBQVFybEI7O0FBQ3hELElBQUlzUCxjQUFjLFNBQUMrVjtxQ0FBV3JsQjtRQUFBQTs7V0FBVTRqQiwwRUFBcUJBLElBQUksSUFBSWtCLGNBQWNPLFFBQVFybEI7O0FBRTNGLGlCQUFpQjtBQUthO0FBQzlCSix5REFBT0EsQ0FBQ3dKLE1BQU0sQ0FBQztJQUNieEYsd0JBQXdCQSw0RUFBQUE7SUFDeEJ0QyxJQUFJLENBQUMrakIsUUFBUXJsQixPQUFTLElBQUk4a0IsY0FBY08sUUFBUXJsQjtBQUNsRDtBQUNBLElBQUk0QyxTQUFTZ2pCLDJEQUFVQSxDQUFDdlUsT0FBTztBQUUvQixlQUFlO0FBTWU7QUFDTTtBQWdDbEMsQ0FDRixxREFBcUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC1zcHJpbmcvY29yZS9kaXN0L3JlYWN0LXNwcmluZ19jb3JlLm1vZGVybi5tanM/NWY4YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvaG9va3MvdXNlQ2hhaW4udHNcbmltcG9ydCB7IGVhY2gsIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcblxuLy8gc3JjL2hlbHBlcnMudHNcbmltcG9ydCB7XG4gIGlzLFxuICB0b0FycmF5LFxuICBlYWNoUHJvcCxcbiAgZ2V0Rmx1aWRWYWx1ZSxcbiAgaXNBbmltYXRlZFN0cmluZyxcbiAgR2xvYmFscyBhcyBHXG59IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuZnVuY3Rpb24gY2FsbFByb3AodmFsdWUsIC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGlzLmZ1bih2YWx1ZSkgPyB2YWx1ZSguLi5hcmdzKSA6IHZhbHVlO1xufVxudmFyIG1hdGNoUHJvcCA9ICh2YWx1ZSwga2V5KSA9PiB2YWx1ZSA9PT0gdHJ1ZSB8fCAhIShrZXkgJiYgdmFsdWUgJiYgKGlzLmZ1bih2YWx1ZSkgPyB2YWx1ZShrZXkpIDogdG9BcnJheSh2YWx1ZSkuaW5jbHVkZXMoa2V5KSkpO1xudmFyIHJlc29sdmVQcm9wID0gKHByb3AsIGtleSkgPT4gaXMub2JqKHByb3ApID8ga2V5ICYmIHByb3Bba2V5XSA6IHByb3A7XG52YXIgZ2V0RGVmYXVsdFByb3AgPSAocHJvcHMsIGtleSkgPT4gcHJvcHMuZGVmYXVsdCA9PT0gdHJ1ZSA/IHByb3BzW2tleV0gOiBwcm9wcy5kZWZhdWx0ID8gcHJvcHMuZGVmYXVsdFtrZXldIDogdm9pZCAwO1xudmFyIG5vb3BUcmFuc2Zvcm0gPSAodmFsdWUpID0+IHZhbHVlO1xudmFyIGdldERlZmF1bHRQcm9wcyA9IChwcm9wcywgdHJhbnNmb3JtID0gbm9vcFRyYW5zZm9ybSkgPT4ge1xuICBsZXQga2V5cyA9IERFRkFVTFRfUFJPUFM7XG4gIGlmIChwcm9wcy5kZWZhdWx0ICYmIHByb3BzLmRlZmF1bHQgIT09IHRydWUpIHtcbiAgICBwcm9wcyA9IHByb3BzLmRlZmF1bHQ7XG4gICAga2V5cyA9IE9iamVjdC5rZXlzKHByb3BzKTtcbiAgfVxuICBjb25zdCBkZWZhdWx0czIgPSB7fTtcbiAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgIGNvbnN0IHZhbHVlID0gdHJhbnNmb3JtKHByb3BzW2tleV0sIGtleSk7XG4gICAgaWYgKCFpcy51bmQodmFsdWUpKSB7XG4gICAgICBkZWZhdWx0czJba2V5XSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZGVmYXVsdHMyO1xufTtcbnZhciBERUZBVUxUX1BST1BTID0gW1xuICBcImNvbmZpZ1wiLFxuICBcIm9uUHJvcHNcIixcbiAgXCJvblN0YXJ0XCIsXG4gIFwib25DaGFuZ2VcIixcbiAgXCJvblBhdXNlXCIsXG4gIFwib25SZXN1bWVcIixcbiAgXCJvblJlc3RcIlxuXTtcbnZhciBSRVNFUlZFRF9QUk9QUyA9IHtcbiAgY29uZmlnOiAxLFxuICBmcm9tOiAxLFxuICB0bzogMSxcbiAgcmVmOiAxLFxuICBsb29wOiAxLFxuICByZXNldDogMSxcbiAgcGF1c2U6IDEsXG4gIGNhbmNlbDogMSxcbiAgcmV2ZXJzZTogMSxcbiAgaW1tZWRpYXRlOiAxLFxuICBkZWZhdWx0OiAxLFxuICBkZWxheTogMSxcbiAgb25Qcm9wczogMSxcbiAgb25TdGFydDogMSxcbiAgb25DaGFuZ2U6IDEsXG4gIG9uUGF1c2U6IDEsXG4gIG9uUmVzdW1lOiAxLFxuICBvblJlc3Q6IDEsXG4gIG9uUmVzb2x2ZTogMSxcbiAgLy8gVHJhbnNpdGlvbiBwcm9wc1xuICBpdGVtczogMSxcbiAgdHJhaWw6IDEsXG4gIHNvcnQ6IDEsXG4gIGV4cGlyZXM6IDEsXG4gIGluaXRpYWw6IDEsXG4gIGVudGVyOiAxLFxuICB1cGRhdGU6IDEsXG4gIGxlYXZlOiAxLFxuICBjaGlsZHJlbjogMSxcbiAgb25EZXN0cm95ZWQ6IDEsXG4gIC8vIEludGVybmFsIHByb3BzXG4gIGtleXM6IDEsXG4gIGNhbGxJZDogMSxcbiAgcGFyZW50SWQ6IDFcbn07XG5mdW5jdGlvbiBnZXRGb3J3YXJkUHJvcHMocHJvcHMpIHtcbiAgY29uc3QgZm9yd2FyZCA9IHt9O1xuICBsZXQgY291bnQgPSAwO1xuICBlYWNoUHJvcChwcm9wcywgKHZhbHVlLCBwcm9wKSA9PiB7XG4gICAgaWYgKCFSRVNFUlZFRF9QUk9QU1twcm9wXSkge1xuICAgICAgZm9yd2FyZFtwcm9wXSA9IHZhbHVlO1xuICAgICAgY291bnQrKztcbiAgICB9XG4gIH0pO1xuICBpZiAoY291bnQpIHtcbiAgICByZXR1cm4gZm9yd2FyZDtcbiAgfVxufVxuZnVuY3Rpb24gaW5mZXJUbyhwcm9wcykge1xuICBjb25zdCB0bzIgPSBnZXRGb3J3YXJkUHJvcHMocHJvcHMpO1xuICBpZiAodG8yKSB7XG4gICAgY29uc3Qgb3V0ID0geyB0bzogdG8yIH07XG4gICAgZWFjaFByb3AocHJvcHMsICh2YWwsIGtleSkgPT4ga2V5IGluIHRvMiB8fCAob3V0W2tleV0gPSB2YWwpKTtcbiAgICByZXR1cm4gb3V0O1xuICB9XG4gIHJldHVybiB7IC4uLnByb3BzIH07XG59XG5mdW5jdGlvbiBjb21wdXRlR29hbCh2YWx1ZSkge1xuICB2YWx1ZSA9IGdldEZsdWlkVmFsdWUodmFsdWUpO1xuICByZXR1cm4gaXMuYXJyKHZhbHVlKSA/IHZhbHVlLm1hcChjb21wdXRlR29hbCkgOiBpc0FuaW1hdGVkU3RyaW5nKHZhbHVlKSA/IEcuY3JlYXRlU3RyaW5nSW50ZXJwb2xhdG9yKHtcbiAgICByYW5nZTogWzAsIDFdLFxuICAgIG91dHB1dDogW3ZhbHVlLCB2YWx1ZV1cbiAgfSkoMSkgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGhhc1Byb3BzKHByb3BzKSB7XG4gIGZvciAoY29uc3QgXyBpbiBwcm9wcylcbiAgICByZXR1cm4gdHJ1ZTtcbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXNBc3luY1RvKHRvMikge1xuICByZXR1cm4gaXMuZnVuKHRvMikgfHwgaXMuYXJyKHRvMikgJiYgaXMub2JqKHRvMlswXSk7XG59XG5mdW5jdGlvbiBkZXRhY2hSZWZzKGN0cmwsIHJlZikge1xuICBjdHJsLnJlZj8uZGVsZXRlKGN0cmwpO1xuICByZWY/LmRlbGV0ZShjdHJsKTtcbn1cbmZ1bmN0aW9uIHJlcGxhY2VSZWYoY3RybCwgcmVmKSB7XG4gIGlmIChyZWYgJiYgY3RybC5yZWYgIT09IHJlZikge1xuICAgIGN0cmwucmVmPy5kZWxldGUoY3RybCk7XG4gICAgcmVmLmFkZChjdHJsKTtcbiAgICBjdHJsLnJlZiA9IHJlZjtcbiAgfVxufVxuXG4vLyBzcmMvaG9va3MvdXNlQ2hhaW4udHNcbmZ1bmN0aW9uIHVzZUNoYWluKHJlZnMsIHRpbWVTdGVwcywgdGltZUZyYW1lID0gMWUzKSB7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh0aW1lU3RlcHMpIHtcbiAgICAgIGxldCBwcmV2RGVsYXkgPSAwO1xuICAgICAgZWFjaChyZWZzLCAocmVmLCBpKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvbnRyb2xsZXJzID0gcmVmLmN1cnJlbnQ7XG4gICAgICAgIGlmIChjb250cm9sbGVycy5sZW5ndGgpIHtcbiAgICAgICAgICBsZXQgZGVsYXkgPSB0aW1lRnJhbWUgKiB0aW1lU3RlcHNbaV07XG4gICAgICAgICAgaWYgKGlzTmFOKGRlbGF5KSlcbiAgICAgICAgICAgIGRlbGF5ID0gcHJldkRlbGF5O1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIHByZXZEZWxheSA9IGRlbGF5O1xuICAgICAgICAgIGVhY2goY29udHJvbGxlcnMsIChjdHJsKSA9PiB7XG4gICAgICAgICAgICBlYWNoKGN0cmwucXVldWUsIChwcm9wcykgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBtZW1vaXplZERlbGF5UHJvcCA9IHByb3BzLmRlbGF5O1xuICAgICAgICAgICAgICBwcm9wcy5kZWxheSA9IChrZXkpID0+IGRlbGF5ICsgY2FsbFByb3AobWVtb2l6ZWREZWxheVByb3AgfHwgMCwga2V5KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJlZi5zdGFydCgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgIGVhY2gocmVmcywgKHJlZikgPT4ge1xuICAgICAgICBjb25zdCBjb250cm9sbGVycyA9IHJlZi5jdXJyZW50O1xuICAgICAgICBpZiAoY29udHJvbGxlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgY29uc3QgcXVldWVzID0gY29udHJvbGxlcnMubWFwKChjdHJsKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBxID0gY3RybC5xdWV1ZTtcbiAgICAgICAgICAgIGN0cmwucXVldWUgPSBbXTtcbiAgICAgICAgICAgIHJldHVybiBxO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHAgPSBwLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgZWFjaChcbiAgICAgICAgICAgICAgY29udHJvbGxlcnMsXG4gICAgICAgICAgICAgIChjdHJsLCBpKSA9PiBlYWNoKHF1ZXVlc1tpXSB8fCBbXSwgKHVwZGF0ZTIpID0+IGN0cmwucXVldWUucHVzaCh1cGRhdGUyKSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocmVmLnN0YXJ0KCkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBzcmMvaG9va3MvdXNlU3ByaW5nLnRzXG5pbXBvcnQgeyBpcyBhcyBpczkgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcblxuLy8gc3JjL2hvb2tzL3VzZVNwcmluZ3MudHNcbmltcG9ydCB7IHVzZUNvbnRleHQgYXMgdXNlQ29udGV4dDIsIHVzZU1lbW8sIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgaXMgYXMgaXM4LFxuICBlYWNoIGFzIGVhY2g1LFxuICB1c2VQcmV2LFxuICB1c2VPbmNlLFxuICB1c2VGb3JjZVVwZGF0ZSxcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCBhcyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0MlxufSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcblxuLy8gc3JjL1NwcmluZ1ZhbHVlLnRzXG5pbXBvcnQge1xuICBpcyBhcyBpczUsXG4gIHJhZiBhcyByYWYzLFxuICBlYWNoIGFzIGVhY2gyLFxuICBpc0VxdWFsLFxuICB0b0FycmF5IGFzIHRvQXJyYXkyLFxuICBlYWNoUHJvcCBhcyBlYWNoUHJvcDMsXG4gIGZyYW1lTG9vcCBhcyBmcmFtZUxvb3AyLFxuICBmbHVzaENhbGxzLFxuICBnZXRGbHVpZFZhbHVlIGFzIGdldEZsdWlkVmFsdWUyLFxuICBpc0FuaW1hdGVkU3RyaW5nIGFzIGlzQW5pbWF0ZWRTdHJpbmcyLFxuICBHbG9iYWxzIGFzIEc1LFxuICBjYWxsRmx1aWRPYnNlcnZlcnMgYXMgY2FsbEZsdWlkT2JzZXJ2ZXJzMixcbiAgaGFzRmx1aWRWYWx1ZSxcbiAgYWRkRmx1aWRPYnNlcnZlcixcbiAgcmVtb3ZlRmx1aWRPYnNlcnZlcixcbiAgZ2V0Rmx1aWRPYnNlcnZlcnNcbn0gZnJvbSBcIkByZWFjdC1zcHJpbmcvc2hhcmVkXCI7XG5pbXBvcnQge1xuICBBbmltYXRlZFZhbHVlLFxuICBBbmltYXRlZFN0cmluZyxcbiAgZ2V0UGF5bG9hZCxcbiAgZ2V0QW5pbWF0ZWQgYXMgZ2V0QW5pbWF0ZWQyLFxuICBzZXRBbmltYXRlZCxcbiAgZ2V0QW5pbWF0ZWRUeXBlXG59IGZyb20gXCJAcmVhY3Qtc3ByaW5nL2FuaW1hdGVkXCI7XG5cbi8vIHNyYy9BbmltYXRpb25Db25maWcudHNcbmltcG9ydCB7IGlzIGFzIGlzMiwgZWFzaW5ncyB9IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuXG4vLyBzcmMvY29uc3RhbnRzLnRzXG52YXIgY29uZmlnID0ge1xuICBkZWZhdWx0OiB7IHRlbnNpb246IDE3MCwgZnJpY3Rpb246IDI2IH0sXG4gIGdlbnRsZTogeyB0ZW5zaW9uOiAxMjAsIGZyaWN0aW9uOiAxNCB9LFxuICB3b2JibHk6IHsgdGVuc2lvbjogMTgwLCBmcmljdGlvbjogMTIgfSxcbiAgc3RpZmY6IHsgdGVuc2lvbjogMjEwLCBmcmljdGlvbjogMjAgfSxcbiAgc2xvdzogeyB0ZW5zaW9uOiAyODAsIGZyaWN0aW9uOiA2MCB9LFxuICBtb2xhc3NlczogeyB0ZW5zaW9uOiAyODAsIGZyaWN0aW9uOiAxMjAgfVxufTtcblxuLy8gc3JjL0FuaW1hdGlvbkNvbmZpZy50c1xudmFyIGRlZmF1bHRzID0ge1xuICAuLi5jb25maWcuZGVmYXVsdCxcbiAgbWFzczogMSxcbiAgZGFtcGluZzogMSxcbiAgZWFzaW5nOiBlYXNpbmdzLmxpbmVhcixcbiAgY2xhbXA6IGZhbHNlXG59O1xudmFyIEFuaW1hdGlvbkNvbmZpZyA9IGNsYXNzIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLyoqXG4gICAgICogVGhlIGluaXRpYWwgdmVsb2NpdHkgb2Ygb25lIG9yIG1vcmUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuICAgIHRoaXMudmVsb2NpdHkgPSAwO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgZGVmYXVsdHMpO1xuICB9XG59O1xuZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMiwgbmV3Q29uZmlnLCBkZWZhdWx0Q29uZmlnKSB7XG4gIGlmIChkZWZhdWx0Q29uZmlnKSB7XG4gICAgZGVmYXVsdENvbmZpZyA9IHsgLi4uZGVmYXVsdENvbmZpZyB9O1xuICAgIHNhbml0aXplQ29uZmlnKGRlZmF1bHRDb25maWcsIG5ld0NvbmZpZyk7XG4gICAgbmV3Q29uZmlnID0geyAuLi5kZWZhdWx0Q29uZmlnLCAuLi5uZXdDb25maWcgfTtcbiAgfVxuICBzYW5pdGl6ZUNvbmZpZyhjb25maWcyLCBuZXdDb25maWcpO1xuICBPYmplY3QuYXNzaWduKGNvbmZpZzIsIG5ld0NvbmZpZyk7XG4gIGZvciAoY29uc3Qga2V5IGluIGRlZmF1bHRzKSB7XG4gICAgaWYgKGNvbmZpZzJba2V5XSA9PSBudWxsKSB7XG4gICAgICBjb25maWcyW2tleV0gPSBkZWZhdWx0c1trZXldO1xuICAgIH1cbiAgfVxuICBsZXQgeyBmcmVxdWVuY3ksIGRhbXBpbmcgfSA9IGNvbmZpZzI7XG4gIGNvbnN0IHsgbWFzcyB9ID0gY29uZmlnMjtcbiAgaWYgKCFpczIudW5kKGZyZXF1ZW5jeSkpIHtcbiAgICBpZiAoZnJlcXVlbmN5IDwgMC4wMSlcbiAgICAgIGZyZXF1ZW5jeSA9IDAuMDE7XG4gICAgaWYgKGRhbXBpbmcgPCAwKVxuICAgICAgZGFtcGluZyA9IDA7XG4gICAgY29uZmlnMi50ZW5zaW9uID0gTWF0aC5wb3coMiAqIE1hdGguUEkgLyBmcmVxdWVuY3ksIDIpICogbWFzcztcbiAgICBjb25maWcyLmZyaWN0aW9uID0gNCAqIE1hdGguUEkgKiBkYW1waW5nICogbWFzcyAvIGZyZXF1ZW5jeTtcbiAgfVxuICByZXR1cm4gY29uZmlnMjtcbn1cbmZ1bmN0aW9uIHNhbml0aXplQ29uZmlnKGNvbmZpZzIsIHByb3BzKSB7XG4gIGlmICghaXMyLnVuZChwcm9wcy5kZWNheSkpIHtcbiAgICBjb25maWcyLmR1cmF0aW9uID0gdm9pZCAwO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IGlzVGVuc2lvbkNvbmZpZyA9ICFpczIudW5kKHByb3BzLnRlbnNpb24pIHx8ICFpczIudW5kKHByb3BzLmZyaWN0aW9uKTtcbiAgICBpZiAoaXNUZW5zaW9uQ29uZmlnIHx8ICFpczIudW5kKHByb3BzLmZyZXF1ZW5jeSkgfHwgIWlzMi51bmQocHJvcHMuZGFtcGluZykgfHwgIWlzMi51bmQocHJvcHMubWFzcykpIHtcbiAgICAgIGNvbmZpZzIuZHVyYXRpb24gPSB2b2lkIDA7XG4gICAgICBjb25maWcyLmRlY2F5ID0gdm9pZCAwO1xuICAgIH1cbiAgICBpZiAoaXNUZW5zaW9uQ29uZmlnKSB7XG4gICAgICBjb25maWcyLmZyZXF1ZW5jeSA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbn1cblxuLy8gc3JjL0FuaW1hdGlvbi50c1xudmFyIGVtcHR5QXJyYXkgPSBbXTtcbnZhciBBbmltYXRpb24gPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuICAgIHRoaXMudmFsdWVzID0gZW1wdHlBcnJheTtcbiAgICB0aGlzLnRvVmFsdWVzID0gbnVsbDtcbiAgICB0aGlzLmZyb21WYWx1ZXMgPSBlbXB0eUFycmF5O1xuICAgIHRoaXMuY29uZmlnID0gbmV3IEFuaW1hdGlvbkNvbmZpZygpO1xuICAgIHRoaXMuaW1tZWRpYXRlID0gZmFsc2U7XG4gIH1cbn07XG5cbi8vIHNyYy9zY2hlZHVsZVByb3BzLnRzXG5pbXBvcnQgeyBpcyBhcyBpczMsIHJhZiwgR2xvYmFscyBhcyBHMiB9IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuZnVuY3Rpb24gc2NoZWR1bGVQcm9wcyhjYWxsSWQsIHsga2V5LCBwcm9wcywgZGVmYXVsdFByb3BzLCBzdGF0ZSwgYWN0aW9ucyB9KSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgbGV0IGRlbGF5O1xuICAgIGxldCB0aW1lb3V0O1xuICAgIGxldCBjYW5jZWwgPSBtYXRjaFByb3AocHJvcHMuY2FuY2VsID8/IGRlZmF1bHRQcm9wcz8uY2FuY2VsLCBrZXkpO1xuICAgIGlmIChjYW5jZWwpIHtcbiAgICAgIG9uU3RhcnQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFpczMudW5kKHByb3BzLnBhdXNlKSkge1xuICAgICAgICBzdGF0ZS5wYXVzZWQgPSBtYXRjaFByb3AocHJvcHMucGF1c2UsIGtleSk7XG4gICAgICB9XG4gICAgICBsZXQgcGF1c2UgPSBkZWZhdWx0UHJvcHM/LnBhdXNlO1xuICAgICAgaWYgKHBhdXNlICE9PSB0cnVlKSB7XG4gICAgICAgIHBhdXNlID0gc3RhdGUucGF1c2VkIHx8IG1hdGNoUHJvcChwYXVzZSwga2V5KTtcbiAgICAgIH1cbiAgICAgIGRlbGF5ID0gY2FsbFByb3AocHJvcHMuZGVsYXkgfHwgMCwga2V5KTtcbiAgICAgIGlmIChwYXVzZSkge1xuICAgICAgICBzdGF0ZS5yZXN1bWVRdWV1ZS5hZGQob25SZXN1bWUpO1xuICAgICAgICBhY3Rpb25zLnBhdXNlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3Rpb25zLnJlc3VtZSgpO1xuICAgICAgICBvblJlc3VtZSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvblBhdXNlKCkge1xuICAgICAgc3RhdGUucmVzdW1lUXVldWUuYWRkKG9uUmVzdW1lKTtcbiAgICAgIHN0YXRlLnRpbWVvdXRzLmRlbGV0ZSh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQuY2FuY2VsKCk7XG4gICAgICBkZWxheSA9IHRpbWVvdXQudGltZSAtIHJhZi5ub3coKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25SZXN1bWUoKSB7XG4gICAgICBpZiAoZGVsYXkgPiAwICYmICFHMi5za2lwQW5pbWF0aW9uKSB7XG4gICAgICAgIHN0YXRlLmRlbGF5ZWQgPSB0cnVlO1xuICAgICAgICB0aW1lb3V0ID0gcmFmLnNldFRpbWVvdXQob25TdGFydCwgZGVsYXkpO1xuICAgICAgICBzdGF0ZS5wYXVzZVF1ZXVlLmFkZChvblBhdXNlKTtcbiAgICAgICAgc3RhdGUudGltZW91dHMuYWRkKHRpbWVvdXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb25TdGFydCgpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBvblN0YXJ0KCkge1xuICAgICAgaWYgKHN0YXRlLmRlbGF5ZWQpIHtcbiAgICAgICAgc3RhdGUuZGVsYXllZCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgc3RhdGUucGF1c2VRdWV1ZS5kZWxldGUob25QYXVzZSk7XG4gICAgICBzdGF0ZS50aW1lb3V0cy5kZWxldGUodGltZW91dCk7XG4gICAgICBpZiAoY2FsbElkIDw9IChzdGF0ZS5jYW5jZWxJZCB8fCAwKSkge1xuICAgICAgICBjYW5jZWwgPSB0cnVlO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgYWN0aW9ucy5zdGFydCh7IC4uLnByb3BzLCBjYWxsSWQsIGNhbmNlbCB9LCByZXNvbHZlKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufVxuXG4vLyBzcmMvcnVuQXN5bmMudHNcbmltcG9ydCB7XG4gIGlzIGFzIGlzNCxcbiAgcmFmIGFzIHJhZjIsXG4gIGZsdXNoLFxuICBlYWNoUHJvcCBhcyBlYWNoUHJvcDIsXG4gIEdsb2JhbHMgYXMgRzNcbn0gZnJvbSBcIkByZWFjdC1zcHJpbmcvc2hhcmVkXCI7XG5cbi8vIHNyYy9BbmltYXRpb25SZXN1bHQudHNcbnZhciBnZXRDb21iaW5lZFJlc3VsdCA9ICh0YXJnZXQsIHJlc3VsdHMpID0+IHJlc3VsdHMubGVuZ3RoID09IDEgPyByZXN1bHRzWzBdIDogcmVzdWx0cy5zb21lKChyZXN1bHQpID0+IHJlc3VsdC5jYW5jZWxsZWQpID8gZ2V0Q2FuY2VsbGVkUmVzdWx0KHRhcmdldC5nZXQoKSkgOiByZXN1bHRzLmV2ZXJ5KChyZXN1bHQpID0+IHJlc3VsdC5ub29wKSA/IGdldE5vb3BSZXN1bHQodGFyZ2V0LmdldCgpKSA6IGdldEZpbmlzaGVkUmVzdWx0KFxuICB0YXJnZXQuZ2V0KCksXG4gIHJlc3VsdHMuZXZlcnkoKHJlc3VsdCkgPT4gcmVzdWx0LmZpbmlzaGVkKVxuKTtcbnZhciBnZXROb29wUmVzdWx0ID0gKHZhbHVlKSA9PiAoe1xuICB2YWx1ZSxcbiAgbm9vcDogdHJ1ZSxcbiAgZmluaXNoZWQ6IHRydWUsXG4gIGNhbmNlbGxlZDogZmFsc2Vcbn0pO1xudmFyIGdldEZpbmlzaGVkUmVzdWx0ID0gKHZhbHVlLCBmaW5pc2hlZCwgY2FuY2VsbGVkID0gZmFsc2UpID0+ICh7XG4gIHZhbHVlLFxuICBmaW5pc2hlZCxcbiAgY2FuY2VsbGVkXG59KTtcbnZhciBnZXRDYW5jZWxsZWRSZXN1bHQgPSAodmFsdWUpID0+ICh7XG4gIHZhbHVlLFxuICBjYW5jZWxsZWQ6IHRydWUsXG4gIGZpbmlzaGVkOiBmYWxzZVxufSk7XG5cbi8vIHNyYy9ydW5Bc3luYy50c1xuZnVuY3Rpb24gcnVuQXN5bmModG8yLCBwcm9wcywgc3RhdGUsIHRhcmdldCkge1xuICBjb25zdCB7IGNhbGxJZCwgcGFyZW50SWQsIG9uUmVzdCB9ID0gcHJvcHM7XG4gIGNvbnN0IHsgYXN5bmNUbzogcHJldlRvLCBwcm9taXNlOiBwcmV2UHJvbWlzZSB9ID0gc3RhdGU7XG4gIGlmICghcGFyZW50SWQgJiYgdG8yID09PSBwcmV2VG8gJiYgIXByb3BzLnJlc2V0KSB7XG4gICAgcmV0dXJuIHByZXZQcm9taXNlO1xuICB9XG4gIHJldHVybiBzdGF0ZS5wcm9taXNlID0gKGFzeW5jICgpID0+IHtcbiAgICBzdGF0ZS5hc3luY0lkID0gY2FsbElkO1xuICAgIHN0YXRlLmFzeW5jVG8gPSB0bzI7XG4gICAgY29uc3QgZGVmYXVsdFByb3BzID0gZ2V0RGVmYXVsdFByb3BzKFxuICAgICAgcHJvcHMsXG4gICAgICAodmFsdWUsIGtleSkgPT4gKFxuICAgICAgICAvLyBUaGUgYG9uUmVzdGAgcHJvcCBpcyBvbmx5IGNhbGxlZCB3aGVuIHRoZSBgcnVuQXN5bmNgIHByb21pc2UgaXMgcmVzb2x2ZWQuXG4gICAgICAgIGtleSA9PT0gXCJvblJlc3RcIiA/IHZvaWQgMCA6IHZhbHVlXG4gICAgICApXG4gICAgKTtcbiAgICBsZXQgcHJldmVudEJhaWw7XG4gICAgbGV0IGJhaWw7XG4gICAgY29uc3QgYmFpbFByb21pc2UgPSBuZXcgUHJvbWlzZShcbiAgICAgIChyZXNvbHZlLCByZWplY3QpID0+IChwcmV2ZW50QmFpbCA9IHJlc29sdmUsIGJhaWwgPSByZWplY3QpXG4gICAgKTtcbiAgICBjb25zdCBiYWlsSWZFbmRlZCA9IChiYWlsU2lnbmFsKSA9PiB7XG4gICAgICBjb25zdCBiYWlsUmVzdWx0ID0gKFxuICAgICAgICAvLyBUaGUgYGNhbmNlbGAgcHJvcCBvciBgc3RvcGAgbWV0aG9kIHdhcyB1c2VkLlxuICAgICAgICBjYWxsSWQgPD0gKHN0YXRlLmNhbmNlbElkIHx8IDApICYmIGdldENhbmNlbGxlZFJlc3VsdCh0YXJnZXQpIHx8IC8vIFRoZSBhc3luYyBgdG9gIHByb3Agd2FzIHJlcGxhY2VkLlxuICAgICAgICBjYWxsSWQgIT09IHN0YXRlLmFzeW5jSWQgJiYgZ2V0RmluaXNoZWRSZXN1bHQodGFyZ2V0LCBmYWxzZSlcbiAgICAgICk7XG4gICAgICBpZiAoYmFpbFJlc3VsdCkge1xuICAgICAgICBiYWlsU2lnbmFsLnJlc3VsdCA9IGJhaWxSZXN1bHQ7XG4gICAgICAgIGJhaWwoYmFpbFNpZ25hbCk7XG4gICAgICAgIHRocm93IGJhaWxTaWduYWw7XG4gICAgICB9XG4gICAgfTtcbiAgICBjb25zdCBhbmltYXRlID0gKGFyZzEsIGFyZzIpID0+IHtcbiAgICAgIGNvbnN0IGJhaWxTaWduYWwgPSBuZXcgQmFpbFNpZ25hbCgpO1xuICAgICAgY29uc3Qgc2tpcEFuaW1hdGlvblNpZ25hbCA9IG5ldyBTa2lwQW5pbWF0aW9uU2lnbmFsKCk7XG4gICAgICByZXR1cm4gKGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKEczLnNraXBBbmltYXRpb24pIHtcbiAgICAgICAgICBzdG9wQXN5bmMoc3RhdGUpO1xuICAgICAgICAgIHNraXBBbmltYXRpb25TaWduYWwucmVzdWx0ID0gZ2V0RmluaXNoZWRSZXN1bHQodGFyZ2V0LCBmYWxzZSk7XG4gICAgICAgICAgYmFpbChza2lwQW5pbWF0aW9uU2lnbmFsKTtcbiAgICAgICAgICB0aHJvdyBza2lwQW5pbWF0aW9uU2lnbmFsO1xuICAgICAgICB9XG4gICAgICAgIGJhaWxJZkVuZGVkKGJhaWxTaWduYWwpO1xuICAgICAgICBjb25zdCBwcm9wczIgPSBpczQub2JqKGFyZzEpID8geyAuLi5hcmcxIH0gOiB7IC4uLmFyZzIsIHRvOiBhcmcxIH07XG4gICAgICAgIHByb3BzMi5wYXJlbnRJZCA9IGNhbGxJZDtcbiAgICAgICAgZWFjaFByb3AyKGRlZmF1bHRQcm9wcywgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICBpZiAoaXM0LnVuZChwcm9wczJba2V5XSkpIHtcbiAgICAgICAgICAgIHByb3BzMltrZXldID0gdmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzdWx0MiA9IGF3YWl0IHRhcmdldC5zdGFydChwcm9wczIpO1xuICAgICAgICBiYWlsSWZFbmRlZChiYWlsU2lnbmFsKTtcbiAgICAgICAgaWYgKHN0YXRlLnBhdXNlZCkge1xuICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlKChyZXN1bWUpID0+IHtcbiAgICAgICAgICAgIHN0YXRlLnJlc3VtZVF1ZXVlLmFkZChyZXN1bWUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQyO1xuICAgICAgfSkoKTtcbiAgICB9O1xuICAgIGxldCByZXN1bHQ7XG4gICAgaWYgKEczLnNraXBBbmltYXRpb24pIHtcbiAgICAgIHN0b3BBc3luYyhzdGF0ZSk7XG4gICAgICByZXR1cm4gZ2V0RmluaXNoZWRSZXN1bHQodGFyZ2V0LCBmYWxzZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBsZXQgYW5pbWF0aW5nO1xuICAgICAgaWYgKGlzNC5hcnIodG8yKSkge1xuICAgICAgICBhbmltYXRpbmcgPSAoYXN5bmMgKHF1ZXVlKSA9PiB7XG4gICAgICAgICAgZm9yIChjb25zdCBwcm9wczIgb2YgcXVldWUpIHtcbiAgICAgICAgICAgIGF3YWl0IGFuaW1hdGUocHJvcHMyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pKHRvMik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhbmltYXRpbmcgPSBQcm9taXNlLnJlc29sdmUodG8yKGFuaW1hdGUsIHRhcmdldC5zdG9wLmJpbmQodGFyZ2V0KSkpO1xuICAgICAgfVxuICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoW2FuaW1hdGluZy50aGVuKHByZXZlbnRCYWlsKSwgYmFpbFByb21pc2VdKTtcbiAgICAgIHJlc3VsdCA9IGdldEZpbmlzaGVkUmVzdWx0KHRhcmdldC5nZXQoKSwgdHJ1ZSwgZmFsc2UpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgaWYgKGVyciBpbnN0YW5jZW9mIEJhaWxTaWduYWwpIHtcbiAgICAgICAgcmVzdWx0ID0gZXJyLnJlc3VsdDtcbiAgICAgIH0gZWxzZSBpZiAoZXJyIGluc3RhbmNlb2YgU2tpcEFuaW1hdGlvblNpZ25hbCkge1xuICAgICAgICByZXN1bHQgPSBlcnIucmVzdWx0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoY2FsbElkID09IHN0YXRlLmFzeW5jSWQpIHtcbiAgICAgICAgc3RhdGUuYXN5bmNJZCA9IHBhcmVudElkO1xuICAgICAgICBzdGF0ZS5hc3luY1RvID0gcGFyZW50SWQgPyBwcmV2VG8gOiB2b2lkIDA7XG4gICAgICAgIHN0YXRlLnByb21pc2UgPSBwYXJlbnRJZCA/IHByZXZQcm9taXNlIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXM0LmZ1bihvblJlc3QpKSB7XG4gICAgICByYWYyLmJhdGNoZWRVcGRhdGVzKCgpID0+IHtcbiAgICAgICAgb25SZXN0KHJlc3VsdCwgdGFyZ2V0LCB0YXJnZXQuaXRlbSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSkoKTtcbn1cbmZ1bmN0aW9uIHN0b3BBc3luYyhzdGF0ZSwgY2FuY2VsSWQpIHtcbiAgZmx1c2goc3RhdGUudGltZW91dHMsICh0KSA9PiB0LmNhbmNlbCgpKTtcbiAgc3RhdGUucGF1c2VRdWV1ZS5jbGVhcigpO1xuICBzdGF0ZS5yZXN1bWVRdWV1ZS5jbGVhcigpO1xuICBzdGF0ZS5hc3luY0lkID0gc3RhdGUuYXN5bmNUbyA9IHN0YXRlLnByb21pc2UgPSB2b2lkIDA7XG4gIGlmIChjYW5jZWxJZClcbiAgICBzdGF0ZS5jYW5jZWxJZCA9IGNhbmNlbElkO1xufVxudmFyIEJhaWxTaWduYWwgPSBjbGFzcyBleHRlbmRzIEVycm9yIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoXG4gICAgICBcIkFuIGFzeW5jIGFuaW1hdGlvbiBoYXMgYmVlbiBpbnRlcnJ1cHRlZC4gWW91IHNlZSB0aGlzIGVycm9yIGJlY2F1c2UgeW91IGZvcmdvdCB0byB1c2UgYGF3YWl0YCBvciBgLmNhdGNoKC4uLilgIG9uIGl0cyByZXR1cm5lZCBwcm9taXNlLlwiXG4gICAgKTtcbiAgfVxufTtcbnZhciBTa2lwQW5pbWF0aW9uU2lnbmFsID0gY2xhc3MgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKFwiU2tpcEFuaW1hdGlvblNpZ25hbFwiKTtcbiAgfVxufTtcblxuLy8gc3JjL0ZyYW1lVmFsdWUudHNcbmltcG9ydCB7XG4gIGRlcHJlY2F0ZUludGVycG9sYXRlLFxuICBmcmFtZUxvb3AsXG4gIEZsdWlkVmFsdWUgYXMgRmx1aWRWYWx1ZTIsXG4gIEdsb2JhbHMgYXMgRzQsXG4gIGNhbGxGbHVpZE9ic2VydmVyc1xufSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcbmltcG9ydCB7IGdldEFuaW1hdGVkIH0gZnJvbSBcIkByZWFjdC1zcHJpbmcvYW5pbWF0ZWRcIjtcbnZhciBpc0ZyYW1lVmFsdWUgPSAodmFsdWUpID0+IHZhbHVlIGluc3RhbmNlb2YgRnJhbWVWYWx1ZTtcbnZhciBuZXh0SWQgPSAxO1xudmFyIEZyYW1lVmFsdWUgPSBjbGFzcyBleHRlbmRzIEZsdWlkVmFsdWUyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICB0aGlzLmlkID0gbmV4dElkKys7XG4gICAgdGhpcy5fcHJpb3JpdHkgPSAwO1xuICB9XG4gIGdldCBwcmlvcml0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJpb3JpdHk7XG4gIH1cbiAgc2V0IHByaW9yaXR5KHByaW9yaXR5KSB7XG4gICAgaWYgKHRoaXMuX3ByaW9yaXR5ICE9IHByaW9yaXR5KSB7XG4gICAgICB0aGlzLl9wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgICAgdGhpcy5fb25Qcmlvcml0eUNoYW5nZShwcmlvcml0eSk7XG4gICAgfVxuICB9XG4gIC8qKiBHZXQgdGhlIGN1cnJlbnQgdmFsdWUgKi9cbiAgZ2V0KCkge1xuICAgIGNvbnN0IG5vZGUgPSBnZXRBbmltYXRlZCh0aGlzKTtcbiAgICByZXR1cm4gbm9kZSAmJiBub2RlLmdldFZhbHVlKCk7XG4gIH1cbiAgLyoqIENyZWF0ZSBhIHNwcmluZyB0aGF0IG1hcHMgb3VyIHZhbHVlIHRvIGFub3RoZXIgdmFsdWUgKi9cbiAgdG8oLi4uYXJncykge1xuICAgIHJldHVybiBHNC50byh0aGlzLCBhcmdzKTtcbiAgfVxuICAvKiogQGRlcHJlY2F0ZWQgVXNlIHRoZSBgdG9gIG1ldGhvZCBpbnN0ZWFkLiAqL1xuICBpbnRlcnBvbGF0ZSguLi5hcmdzKSB7XG4gICAgZGVwcmVjYXRlSW50ZXJwb2xhdGUoKTtcbiAgICByZXR1cm4gRzQudG8odGhpcywgYXJncyk7XG4gIH1cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLmdldCgpO1xuICB9XG4gIG9ic2VydmVyQWRkZWQoY291bnQpIHtcbiAgICBpZiAoY291bnQgPT0gMSlcbiAgICAgIHRoaXMuX2F0dGFjaCgpO1xuICB9XG4gIG9ic2VydmVyUmVtb3ZlZChjb3VudCkge1xuICAgIGlmIChjb3VudCA9PSAwKVxuICAgICAgdGhpcy5fZGV0YWNoKCk7XG4gIH1cbiAgLyoqIENhbGxlZCB3aGVuIHRoZSBmaXJzdCBjaGlsZCBpcyBhZGRlZC4gKi9cbiAgX2F0dGFjaCgpIHtcbiAgfVxuICAvKiogQ2FsbGVkIHdoZW4gdGhlIGxhc3QgY2hpbGQgaXMgcmVtb3ZlZC4gKi9cbiAgX2RldGFjaCgpIHtcbiAgfVxuICAvKiogVGVsbCBvdXIgY2hpbGRyZW4gYWJvdXQgb3VyIG5ldyB2YWx1ZSAqL1xuICBfb25DaGFuZ2UodmFsdWUsIGlkbGUgPSBmYWxzZSkge1xuICAgIGNhbGxGbHVpZE9ic2VydmVycyh0aGlzLCB7XG4gICAgICB0eXBlOiBcImNoYW5nZVwiLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgICAgdmFsdWUsXG4gICAgICBpZGxlXG4gICAgfSk7XG4gIH1cbiAgLyoqIFRlbGwgb3VyIGNoaWxkcmVuIGFib3V0IG91ciBuZXcgcHJpb3JpdHkgKi9cbiAgX29uUHJpb3JpdHlDaGFuZ2UocHJpb3JpdHkpIHtcbiAgICBpZiAoIXRoaXMuaWRsZSkge1xuICAgICAgZnJhbWVMb29wLnNvcnQodGhpcyk7XG4gICAgfVxuICAgIGNhbGxGbHVpZE9ic2VydmVycyh0aGlzLCB7XG4gICAgICB0eXBlOiBcInByaW9yaXR5XCIsXG4gICAgICBwYXJlbnQ6IHRoaXMsXG4gICAgICBwcmlvcml0eVxuICAgIH0pO1xuICB9XG59O1xuXG4vLyBzcmMvU3ByaW5nUGhhc2UudHNcbnZhciAkUCA9IFN5bWJvbC5mb3IoXCJTcHJpbmdQaGFzZVwiKTtcbnZhciBIQVNfQU5JTUFURUQgPSAxO1xudmFyIElTX0FOSU1BVElORyA9IDI7XG52YXIgSVNfUEFVU0VEID0gNDtcbnZhciBoYXNBbmltYXRlZCA9ICh0YXJnZXQpID0+ICh0YXJnZXRbJFBdICYgSEFTX0FOSU1BVEVEKSA+IDA7XG52YXIgaXNBbmltYXRpbmcgPSAodGFyZ2V0KSA9PiAodGFyZ2V0WyRQXSAmIElTX0FOSU1BVElORykgPiAwO1xudmFyIGlzUGF1c2VkID0gKHRhcmdldCkgPT4gKHRhcmdldFskUF0gJiBJU19QQVVTRUQpID4gMDtcbnZhciBzZXRBY3RpdmVCaXQgPSAodGFyZ2V0LCBhY3RpdmUpID0+IGFjdGl2ZSA/IHRhcmdldFskUF0gfD0gSVNfQU5JTUFUSU5HIHwgSEFTX0FOSU1BVEVEIDogdGFyZ2V0WyRQXSAmPSB+SVNfQU5JTUFUSU5HO1xudmFyIHNldFBhdXNlZEJpdCA9ICh0YXJnZXQsIHBhdXNlZCkgPT4gcGF1c2VkID8gdGFyZ2V0WyRQXSB8PSBJU19QQVVTRUQgOiB0YXJnZXRbJFBdICY9IH5JU19QQVVTRUQ7XG5cbi8vIHNyYy9TcHJpbmdWYWx1ZS50c1xudmFyIFNwcmluZ1ZhbHVlID0gY2xhc3MgZXh0ZW5kcyBGcmFtZVZhbHVlIHtcbiAgY29uc3RydWN0b3IoYXJnMSwgYXJnMikge1xuICAgIHN1cGVyKCk7XG4gICAgLyoqIFRoZSBhbmltYXRpb24gc3RhdGUgKi9cbiAgICB0aGlzLmFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oKTtcbiAgICAvKiogU29tZSBwcm9wcyBoYXZlIGN1c3RvbWl6YWJsZSBkZWZhdWx0IHZhbHVlcyAqL1xuICAgIHRoaXMuZGVmYXVsdFByb3BzID0ge307XG4gICAgLyoqIFRoZSBzdGF0ZSBmb3IgYHJ1bkFzeW5jYCBjYWxscyAqL1xuICAgIHRoaXMuX3N0YXRlID0ge1xuICAgICAgcGF1c2VkOiBmYWxzZSxcbiAgICAgIGRlbGF5ZWQ6IGZhbHNlLFxuICAgICAgcGF1c2VRdWV1ZTogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICAgIHJlc3VtZVF1ZXVlOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpLFxuICAgICAgdGltZW91dHM6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KClcbiAgICB9O1xuICAgIC8qKiBUaGUgcHJvbWlzZSByZXNvbHZlcnMgb2YgcGVuZGluZyBgc3RhcnRgIGNhbGxzICovXG4gICAgdGhpcy5fcGVuZGluZ0NhbGxzID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICAvKiogVGhlIGNvdW50ZXIgZm9yIHRyYWNraW5nIGBzY2hlZHVsZVByb3BzYCBjYWxscyAqL1xuICAgIHRoaXMuX2xhc3RDYWxsSWQgPSAwO1xuICAgIC8qKiBUaGUgbGFzdCBgc2NoZWR1bGVQcm9wc2AgY2FsbCB0aGF0IGNoYW5nZWQgdGhlIGB0b2AgcHJvcCAqL1xuICAgIHRoaXMuX2xhc3RUb0lkID0gMDtcbiAgICB0aGlzLl9tZW1vaXplZER1cmF0aW9uID0gMDtcbiAgICBpZiAoIWlzNS51bmQoYXJnMSkgfHwgIWlzNS51bmQoYXJnMikpIHtcbiAgICAgIGNvbnN0IHByb3BzID0gaXM1Lm9iaihhcmcxKSA/IHsgLi4uYXJnMSB9IDogeyAuLi5hcmcyLCBmcm9tOiBhcmcxIH07XG4gICAgICBpZiAoaXM1LnVuZChwcm9wcy5kZWZhdWx0KSkge1xuICAgICAgICBwcm9wcy5kZWZhdWx0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuc3RhcnQocHJvcHMpO1xuICAgIH1cbiAgfVxuICAvKiogRXF1YWxzIHRydWUgd2hlbiBub3QgYWR2YW5jaW5nIG9uIGVhY2ggZnJhbWUuICovXG4gIGdldCBpZGxlKCkge1xuICAgIHJldHVybiAhKGlzQW5pbWF0aW5nKHRoaXMpIHx8IHRoaXMuX3N0YXRlLmFzeW5jVG8pIHx8IGlzUGF1c2VkKHRoaXMpO1xuICB9XG4gIGdldCBnb2FsKCkge1xuICAgIHJldHVybiBnZXRGbHVpZFZhbHVlMih0aGlzLmFuaW1hdGlvbi50byk7XG4gIH1cbiAgZ2V0IHZlbG9jaXR5KCkge1xuICAgIGNvbnN0IG5vZGUgPSBnZXRBbmltYXRlZDIodGhpcyk7XG4gICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBBbmltYXRlZFZhbHVlID8gbm9kZS5sYXN0VmVsb2NpdHkgfHwgMCA6IG5vZGUuZ2V0UGF5bG9hZCgpLm1hcCgobm9kZTIpID0+IG5vZGUyLmxhc3RWZWxvY2l0eSB8fCAwKTtcbiAgfVxuICAvKipcbiAgICogV2hlbiB0cnVlLCB0aGlzIHZhbHVlIGhhcyBiZWVuIGFuaW1hdGVkIGF0IGxlYXN0IG9uY2UuXG4gICAqL1xuICBnZXQgaGFzQW5pbWF0ZWQoKSB7XG4gICAgcmV0dXJuIGhhc0FuaW1hdGVkKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKiBXaGVuIHRydWUsIHRoaXMgdmFsdWUgaGFzIGFuIHVuZmluaXNoZWQgYW5pbWF0aW9uLFxuICAgKiB3aGljaCBpcyBlaXRoZXIgYWN0aXZlIG9yIHBhdXNlZC5cbiAgICovXG4gIGdldCBpc0FuaW1hdGluZygpIHtcbiAgICByZXR1cm4gaXNBbmltYXRpbmcodGhpcyk7XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gdHJ1ZSwgYWxsIGN1cnJlbnQgYW5kIGZ1dHVyZSBhbmltYXRpb25zIGFyZSBwYXVzZWQuXG4gICAqL1xuICBnZXQgaXNQYXVzZWQoKSB7XG4gICAgcmV0dXJuIGlzUGF1c2VkKHRoaXMpO1xuICB9XG4gIC8qKlxuICAgKlxuICAgKlxuICAgKi9cbiAgZ2V0IGlzRGVsYXllZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGUuZGVsYXllZDtcbiAgfVxuICAvKiogQWR2YW5jZSB0aGUgY3VycmVudCBhbmltYXRpb24gYnkgYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzICovXG4gIGFkdmFuY2UoZHQpIHtcbiAgICBsZXQgaWRsZSA9IHRydWU7XG4gICAgbGV0IGNoYW5nZWQgPSBmYWxzZTtcbiAgICBjb25zdCBhbmltID0gdGhpcy5hbmltYXRpb247XG4gICAgbGV0IHsgdG9WYWx1ZXMgfSA9IGFuaW07XG4gICAgY29uc3QgeyBjb25maWc6IGNvbmZpZzIgfSA9IGFuaW07XG4gICAgY29uc3QgcGF5bG9hZCA9IGdldFBheWxvYWQoYW5pbS50byk7XG4gICAgaWYgKCFwYXlsb2FkICYmIGhhc0ZsdWlkVmFsdWUoYW5pbS50bykpIHtcbiAgICAgIHRvVmFsdWVzID0gdG9BcnJheTIoZ2V0Rmx1aWRWYWx1ZTIoYW5pbS50bykpO1xuICAgIH1cbiAgICBhbmltLnZhbHVlcy5mb3JFYWNoKChub2RlMiwgaSkgPT4ge1xuICAgICAgaWYgKG5vZGUyLmRvbmUpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGNvbnN0IHRvMiA9IChcbiAgICAgICAgLy8gQW5pbWF0ZWQgc3RyaW5ncyBhbHdheXMgZ28gZnJvbSAwIHRvIDEuXG4gICAgICAgIG5vZGUyLmNvbnN0cnVjdG9yID09IEFuaW1hdGVkU3RyaW5nID8gMSA6IHBheWxvYWQgPyBwYXlsb2FkW2ldLmxhc3RQb3NpdGlvbiA6IHRvVmFsdWVzW2ldXG4gICAgICApO1xuICAgICAgbGV0IGZpbmlzaGVkID0gYW5pbS5pbW1lZGlhdGU7XG4gICAgICBsZXQgcG9zaXRpb24gPSB0bzI7XG4gICAgICBpZiAoIWZpbmlzaGVkKSB7XG4gICAgICAgIHBvc2l0aW9uID0gbm9kZTIubGFzdFBvc2l0aW9uO1xuICAgICAgICBpZiAoY29uZmlnMi50ZW5zaW9uIDw9IDApIHtcbiAgICAgICAgICBub2RlMi5kb25lID0gdHJ1ZTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGVsYXBzZWQgPSBub2RlMi5lbGFwc2VkVGltZSArPSBkdDtcbiAgICAgICAgY29uc3QgZnJvbSA9IGFuaW0uZnJvbVZhbHVlc1tpXTtcbiAgICAgICAgY29uc3QgdjAgPSBub2RlMi52MCAhPSBudWxsID8gbm9kZTIudjAgOiBub2RlMi52MCA9IGlzNS5hcnIoY29uZmlnMi52ZWxvY2l0eSkgPyBjb25maWcyLnZlbG9jaXR5W2ldIDogY29uZmlnMi52ZWxvY2l0eTtcbiAgICAgICAgbGV0IHZlbG9jaXR5O1xuICAgICAgICBjb25zdCBwcmVjaXNpb24gPSBjb25maWcyLnByZWNpc2lvbiB8fCAoZnJvbSA9PSB0bzIgPyA1ZS0zIDogTWF0aC5taW4oMSwgTWF0aC5hYnModG8yIC0gZnJvbSkgKiAxZS0zKSk7XG4gICAgICAgIGlmICghaXM1LnVuZChjb25maWcyLmR1cmF0aW9uKSkge1xuICAgICAgICAgIGxldCBwID0gMTtcbiAgICAgICAgICBpZiAoY29uZmlnMi5kdXJhdGlvbiA+IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9tZW1vaXplZER1cmF0aW9uICE9PSBjb25maWcyLmR1cmF0aW9uKSB7XG4gICAgICAgICAgICAgIHRoaXMuX21lbW9pemVkRHVyYXRpb24gPSBjb25maWcyLmR1cmF0aW9uO1xuICAgICAgICAgICAgICBpZiAobm9kZTIuZHVyYXRpb25Qcm9ncmVzcyA+IDApIHtcbiAgICAgICAgICAgICAgICBub2RlMi5lbGFwc2VkVGltZSA9IGNvbmZpZzIuZHVyYXRpb24gKiBub2RlMi5kdXJhdGlvblByb2dyZXNzO1xuICAgICAgICAgICAgICAgIGVsYXBzZWQgPSBub2RlMi5lbGFwc2VkVGltZSArPSBkdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcCA9IChjb25maWcyLnByb2dyZXNzIHx8IDApICsgZWxhcHNlZCAvIHRoaXMuX21lbW9pemVkRHVyYXRpb247XG4gICAgICAgICAgICBwID0gcCA+IDEgPyAxIDogcCA8IDAgPyAwIDogcDtcbiAgICAgICAgICAgIG5vZGUyLmR1cmF0aW9uUHJvZ3Jlc3MgPSBwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwb3NpdGlvbiA9IGZyb20gKyBjb25maWcyLmVhc2luZyhwKSAqICh0bzIgLSBmcm9tKTtcbiAgICAgICAgICB2ZWxvY2l0eSA9IChwb3NpdGlvbiAtIG5vZGUyLmxhc3RQb3NpdGlvbikgLyBkdDtcbiAgICAgICAgICBmaW5pc2hlZCA9IHAgPT0gMTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25maWcyLmRlY2F5KSB7XG4gICAgICAgICAgY29uc3QgZGVjYXkgPSBjb25maWcyLmRlY2F5ID09PSB0cnVlID8gMC45OTggOiBjb25maWcyLmRlY2F5O1xuICAgICAgICAgIGNvbnN0IGUgPSBNYXRoLmV4cCgtKDEgLSBkZWNheSkgKiBlbGFwc2VkKTtcbiAgICAgICAgICBwb3NpdGlvbiA9IGZyb20gKyB2MCAvICgxIC0gZGVjYXkpICogKDEgLSBlKTtcbiAgICAgICAgICBmaW5pc2hlZCA9IE1hdGguYWJzKG5vZGUyLmxhc3RQb3NpdGlvbiAtIHBvc2l0aW9uKSA8PSBwcmVjaXNpb247XG4gICAgICAgICAgdmVsb2NpdHkgPSB2MCAqIGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmVsb2NpdHkgPSBub2RlMi5sYXN0VmVsb2NpdHkgPT0gbnVsbCA/IHYwIDogbm9kZTIubGFzdFZlbG9jaXR5O1xuICAgICAgICAgIGNvbnN0IHJlc3RWZWxvY2l0eSA9IGNvbmZpZzIucmVzdFZlbG9jaXR5IHx8IHByZWNpc2lvbiAvIDEwO1xuICAgICAgICAgIGNvbnN0IGJvdW5jZUZhY3RvciA9IGNvbmZpZzIuY2xhbXAgPyAwIDogY29uZmlnMi5ib3VuY2U7XG4gICAgICAgICAgY29uc3QgY2FuQm91bmNlID0gIWlzNS51bmQoYm91bmNlRmFjdG9yKTtcbiAgICAgICAgICBjb25zdCBpc0dyb3dpbmcgPSBmcm9tID09IHRvMiA/IG5vZGUyLnYwID4gMCA6IGZyb20gPCB0bzI7XG4gICAgICAgICAgbGV0IGlzTW92aW5nO1xuICAgICAgICAgIGxldCBpc0JvdW5jaW5nID0gZmFsc2U7XG4gICAgICAgICAgY29uc3Qgc3RlcCA9IDE7XG4gICAgICAgICAgY29uc3QgbnVtU3RlcHMgPSBNYXRoLmNlaWwoZHQgLyBzdGVwKTtcbiAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IG51bVN0ZXBzOyArK24pIHtcbiAgICAgICAgICAgIGlzTW92aW5nID0gTWF0aC5hYnModmVsb2NpdHkpID4gcmVzdFZlbG9jaXR5O1xuICAgICAgICAgICAgaWYgKCFpc01vdmluZykge1xuICAgICAgICAgICAgICBmaW5pc2hlZCA9IE1hdGguYWJzKHRvMiAtIHBvc2l0aW9uKSA8PSBwcmVjaXNpb247XG4gICAgICAgICAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY2FuQm91bmNlKSB7XG4gICAgICAgICAgICAgIGlzQm91bmNpbmcgPSBwb3NpdGlvbiA9PSB0bzIgfHwgcG9zaXRpb24gPiB0bzIgPT0gaXNHcm93aW5nO1xuICAgICAgICAgICAgICBpZiAoaXNCb3VuY2luZykge1xuICAgICAgICAgICAgICAgIHZlbG9jaXR5ID0gLXZlbG9jaXR5ICogYm91bmNlRmFjdG9yO1xuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdG8yO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBzcHJpbmdGb3JjZSA9IC1jb25maWcyLnRlbnNpb24gKiAxZS02ICogKHBvc2l0aW9uIC0gdG8yKTtcbiAgICAgICAgICAgIGNvbnN0IGRhbXBpbmdGb3JjZSA9IC1jb25maWcyLmZyaWN0aW9uICogMWUtMyAqIHZlbG9jaXR5O1xuICAgICAgICAgICAgY29uc3QgYWNjZWxlcmF0aW9uID0gKHNwcmluZ0ZvcmNlICsgZGFtcGluZ0ZvcmNlKSAvIGNvbmZpZzIubWFzcztcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gdmVsb2NpdHkgKyBhY2NlbGVyYXRpb24gKiBzdGVwO1xuICAgICAgICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiArIHZlbG9jaXR5ICogc3RlcDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbm9kZTIubGFzdFZlbG9jaXR5ID0gdmVsb2NpdHk7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4ocG9zaXRpb24pKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGBHb3QgTmFOIHdoaWxlIGFuaW1hdGluZzpgLCB0aGlzKTtcbiAgICAgICAgICBmaW5pc2hlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChwYXlsb2FkICYmICFwYXlsb2FkW2ldLmRvbmUpIHtcbiAgICAgICAgZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICBub2RlMi5kb25lID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlkbGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChub2RlMi5zZXRWYWx1ZShwb3NpdGlvbiwgY29uZmlnMi5yb3VuZCkpIHtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29uc3Qgbm9kZSA9IGdldEFuaW1hdGVkMih0aGlzKTtcbiAgICBjb25zdCBjdXJyVmFsID0gbm9kZS5nZXRWYWx1ZSgpO1xuICAgIGlmIChpZGxlKSB7XG4gICAgICBjb25zdCBmaW5hbFZhbCA9IGdldEZsdWlkVmFsdWUyKGFuaW0udG8pO1xuICAgICAgaWYgKChjdXJyVmFsICE9PSBmaW5hbFZhbCB8fCBjaGFuZ2VkKSAmJiAhY29uZmlnMi5kZWNheSkge1xuICAgICAgICBub2RlLnNldFZhbHVlKGZpbmFsVmFsKTtcbiAgICAgICAgdGhpcy5fb25DaGFuZ2UoZmluYWxWYWwpO1xuICAgICAgfSBlbHNlIGlmIChjaGFuZ2VkICYmIGNvbmZpZzIuZGVjYXkpIHtcbiAgICAgICAgdGhpcy5fb25DaGFuZ2UoY3VyclZhbCk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zdG9wKCk7XG4gICAgfSBlbHNlIGlmIChjaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9vbkNoYW5nZShjdXJyVmFsKTtcbiAgICB9XG4gIH1cbiAgLyoqIFNldCB0aGUgY3VycmVudCB2YWx1ZSwgd2hpbGUgc3RvcHBpbmcgdGhlIGN1cnJlbnQgYW5pbWF0aW9uICovXG4gIHNldCh2YWx1ZSkge1xuICAgIHJhZjMuYmF0Y2hlZFVwZGF0ZXMoKCkgPT4ge1xuICAgICAgdGhpcy5fc3RvcCgpO1xuICAgICAgdGhpcy5fZm9jdXModmFsdWUpO1xuICAgICAgdGhpcy5fc2V0KHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogRnJlZXplIHRoZSBhY3RpdmUgYW5pbWF0aW9uIGluIHRpbWUsIGFzIHdlbGwgYXMgYW55IHVwZGF0ZXMgbWVyZ2VkXG4gICAqIGJlZm9yZSBgcmVzdW1lYCBpcyBjYWxsZWQuXG4gICAqL1xuICBwYXVzZSgpIHtcbiAgICB0aGlzLl91cGRhdGUoeyBwYXVzZTogdHJ1ZSB9KTtcbiAgfVxuICAvKiogUmVzdW1lIHRoZSBhbmltYXRpb24gaWYgcGF1c2VkLiAqL1xuICByZXN1bWUoKSB7XG4gICAgdGhpcy5fdXBkYXRlKHsgcGF1c2U6IGZhbHNlIH0pO1xuICB9XG4gIC8qKiBTa2lwIHRvIHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgYW5pbWF0aW9uLiAqL1xuICBmaW5pc2goKSB7XG4gICAgaWYgKGlzQW5pbWF0aW5nKHRoaXMpKSB7XG4gICAgICBjb25zdCB7IHRvOiB0bzIsIGNvbmZpZzogY29uZmlnMiB9ID0gdGhpcy5hbmltYXRpb247XG4gICAgICByYWYzLmJhdGNoZWRVcGRhdGVzKCgpID0+IHtcbiAgICAgICAgdGhpcy5fb25TdGFydCgpO1xuICAgICAgICBpZiAoIWNvbmZpZzIuZGVjYXkpIHtcbiAgICAgICAgICB0aGlzLl9zZXQodG8yLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3RvcCgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKiBQdXNoIHByb3BzIGludG8gdGhlIHBlbmRpbmcgcXVldWUuICovXG4gIHVwZGF0ZShwcm9wcykge1xuICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5xdWV1ZSB8fCAodGhpcy5xdWV1ZSA9IFtdKTtcbiAgICBxdWV1ZS5wdXNoKHByb3BzKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICBzdGFydCh0bzIsIGFyZzIpIHtcbiAgICBsZXQgcXVldWU7XG4gICAgaWYgKCFpczUudW5kKHRvMikpIHtcbiAgICAgIHF1ZXVlID0gW2lzNS5vYmoodG8yKSA/IHRvMiA6IHsgLi4uYXJnMiwgdG86IHRvMiB9XTtcbiAgICB9IGVsc2Uge1xuICAgICAgcXVldWUgPSB0aGlzLnF1ZXVlIHx8IFtdO1xuICAgICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICBxdWV1ZS5tYXAoKHByb3BzKSA9PiB7XG4gICAgICAgIGNvbnN0IHVwID0gdGhpcy5fdXBkYXRlKHByb3BzKTtcbiAgICAgICAgcmV0dXJuIHVwO1xuICAgICAgfSlcbiAgICApLnRoZW4oKHJlc3VsdHMpID0+IGdldENvbWJpbmVkUmVzdWx0KHRoaXMsIHJlc3VsdHMpKTtcbiAgfVxuICAvKipcbiAgICogU3RvcCB0aGUgY3VycmVudCBhbmltYXRpb24sIGFuZCBjYW5jZWwgYW55IGRlbGF5ZWQgdXBkYXRlcy5cbiAgICpcbiAgICogUGFzcyBgdHJ1ZWAgdG8gY2FsbCBgb25SZXN0YCB3aXRoIGBjYW5jZWxsZWQ6IHRydWVgLlxuICAgKi9cbiAgc3RvcChjYW5jZWwpIHtcbiAgICBjb25zdCB7IHRvOiB0bzIgfSA9IHRoaXMuYW5pbWF0aW9uO1xuICAgIHRoaXMuX2ZvY3VzKHRoaXMuZ2V0KCkpO1xuICAgIHN0b3BBc3luYyh0aGlzLl9zdGF0ZSwgY2FuY2VsICYmIHRoaXMuX2xhc3RDYWxsSWQpO1xuICAgIHJhZjMuYmF0Y2hlZFVwZGF0ZXMoKCkgPT4gdGhpcy5fc3RvcCh0bzIsIGNhbmNlbCkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKiBSZXN0YXJ0IHRoZSBhbmltYXRpb24uICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuX3VwZGF0ZSh7IHJlc2V0OiB0cnVlIH0pO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgZXZlbnRPYnNlcnZlZChldmVudCkge1xuICAgIGlmIChldmVudC50eXBlID09IFwiY2hhbmdlXCIpIHtcbiAgICAgIHRoaXMuX3N0YXJ0KCk7XG4gICAgfSBlbHNlIGlmIChldmVudC50eXBlID09IFwicHJpb3JpdHlcIikge1xuICAgICAgdGhpcy5wcmlvcml0eSA9IGV2ZW50LnByaW9yaXR5ICsgMTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSBgdG9gIGFuZCBgZnJvbWAgcmFuZ2UgZnJvbSB0aGUgZ2l2ZW4gYHByb3BzYCBvYmplY3QuXG4gICAqXG4gICAqIFRoaXMgYWxzbyBlbnN1cmVzIHRoZSBpbml0aWFsIHZhbHVlIGlzIGF2YWlsYWJsZSB0byBhbmltYXRlZCBjb21wb25lbnRzXG4gICAqIGR1cmluZyB0aGUgcmVuZGVyIHBoYXNlLlxuICAgKi9cbiAgX3ByZXBhcmVOb2RlKHByb3BzKSB7XG4gICAgY29uc3Qga2V5ID0gdGhpcy5rZXkgfHwgXCJcIjtcbiAgICBsZXQgeyB0bzogdG8yLCBmcm9tIH0gPSBwcm9wcztcbiAgICB0bzIgPSBpczUub2JqKHRvMikgPyB0bzJba2V5XSA6IHRvMjtcbiAgICBpZiAodG8yID09IG51bGwgfHwgaXNBc3luY1RvKHRvMikpIHtcbiAgICAgIHRvMiA9IHZvaWQgMDtcbiAgICB9XG4gICAgZnJvbSA9IGlzNS5vYmooZnJvbSkgPyBmcm9tW2tleV0gOiBmcm9tO1xuICAgIGlmIChmcm9tID09IG51bGwpIHtcbiAgICAgIGZyb20gPSB2b2lkIDA7XG4gICAgfVxuICAgIGNvbnN0IHJhbmdlID0geyB0bzogdG8yLCBmcm9tIH07XG4gICAgaWYgKCFoYXNBbmltYXRlZCh0aGlzKSkge1xuICAgICAgaWYgKHByb3BzLnJldmVyc2UpXG4gICAgICAgIFt0bzIsIGZyb21dID0gW2Zyb20sIHRvMl07XG4gICAgICBmcm9tID0gZ2V0Rmx1aWRWYWx1ZTIoZnJvbSk7XG4gICAgICBpZiAoIWlzNS51bmQoZnJvbSkpIHtcbiAgICAgICAgdGhpcy5fc2V0KGZyb20pO1xuICAgICAgfSBlbHNlIGlmICghZ2V0QW5pbWF0ZWQyKHRoaXMpKSB7XG4gICAgICAgIHRoaXMuX3NldCh0bzIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmFuZ2U7XG4gIH1cbiAgLyoqIEV2ZXJ5IHVwZGF0ZSBpcyBwcm9jZXNzZWQgYnkgdGhpcyBtZXRob2QgYmVmb3JlIG1lcmdpbmcuICovXG4gIF91cGRhdGUoeyAuLi5wcm9wcyB9LCBpc0xvb3ApIHtcbiAgICBjb25zdCB7IGtleSwgZGVmYXVsdFByb3BzIH0gPSB0aGlzO1xuICAgIGlmIChwcm9wcy5kZWZhdWx0KVxuICAgICAgT2JqZWN0LmFzc2lnbihcbiAgICAgICAgZGVmYXVsdFByb3BzLFxuICAgICAgICBnZXREZWZhdWx0UHJvcHMoXG4gICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgKHZhbHVlLCBwcm9wKSA9PiAvXm9uLy50ZXN0KHByb3ApID8gcmVzb2x2ZVByb3AodmFsdWUsIGtleSkgOiB2YWx1ZVxuICAgICAgICApXG4gICAgICApO1xuICAgIG1lcmdlQWN0aXZlRm4odGhpcywgcHJvcHMsIFwib25Qcm9wc1wiKTtcbiAgICBzZW5kRXZlbnQodGhpcywgXCJvblByb3BzXCIsIHByb3BzLCB0aGlzKTtcbiAgICBjb25zdCByYW5nZSA9IHRoaXMuX3ByZXBhcmVOb2RlKHByb3BzKTtcbiAgICBpZiAoT2JqZWN0LmlzRnJvemVuKHRoaXMpKSB7XG4gICAgICB0aHJvdyBFcnJvcihcbiAgICAgICAgXCJDYW5ub3QgYW5pbWF0ZSBhIGBTcHJpbmdWYWx1ZWAgb2JqZWN0IHRoYXQgaXMgZnJvemVuLiBEaWQgeW91IGZvcmdldCB0byBwYXNzIHlvdXIgY29tcG9uZW50IHRvIGBhbmltYXRlZCguLi4pYCBiZWZvcmUgYW5pbWF0aW5nIGl0cyBwcm9wcz9cIlxuICAgICAgKTtcbiAgICB9XG4gICAgY29uc3Qgc3RhdGUgPSB0aGlzLl9zdGF0ZTtcbiAgICByZXR1cm4gc2NoZWR1bGVQcm9wcygrK3RoaXMuX2xhc3RDYWxsSWQsIHtcbiAgICAgIGtleSxcbiAgICAgIHByb3BzLFxuICAgICAgZGVmYXVsdFByb3BzLFxuICAgICAgc3RhdGUsXG4gICAgICBhY3Rpb25zOiB7XG4gICAgICAgIHBhdXNlOiAoKSA9PiB7XG4gICAgICAgICAgaWYgKCFpc1BhdXNlZCh0aGlzKSkge1xuICAgICAgICAgICAgc2V0UGF1c2VkQml0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgZmx1c2hDYWxscyhzdGF0ZS5wYXVzZVF1ZXVlKTtcbiAgICAgICAgICAgIHNlbmRFdmVudChcbiAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgXCJvblBhdXNlXCIsXG4gICAgICAgICAgICAgIGdldEZpbmlzaGVkUmVzdWx0KHRoaXMsIGNoZWNrRmluaXNoZWQodGhpcywgdGhpcy5hbmltYXRpb24udG8pKSxcbiAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlc3VtZTogKCkgPT4ge1xuICAgICAgICAgIGlmIChpc1BhdXNlZCh0aGlzKSkge1xuICAgICAgICAgICAgc2V0UGF1c2VkQml0KHRoaXMsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChpc0FuaW1hdGluZyh0aGlzKSkge1xuICAgICAgICAgICAgICB0aGlzLl9yZXN1bWUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZsdXNoQ2FsbHMoc3RhdGUucmVzdW1lUXVldWUpO1xuICAgICAgICAgICAgc2VuZEV2ZW50KFxuICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICBcIm9uUmVzdW1lXCIsXG4gICAgICAgICAgICAgIGdldEZpbmlzaGVkUmVzdWx0KHRoaXMsIGNoZWNrRmluaXNoZWQodGhpcywgdGhpcy5hbmltYXRpb24udG8pKSxcbiAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHN0YXJ0OiB0aGlzLl9tZXJnZS5iaW5kKHRoaXMsIHJhbmdlKVxuICAgICAgfVxuICAgIH0pLnRoZW4oKHJlc3VsdCkgPT4ge1xuICAgICAgaWYgKHByb3BzLmxvb3AgJiYgcmVzdWx0LmZpbmlzaGVkICYmICEoaXNMb29wICYmIHJlc3VsdC5ub29wKSkge1xuICAgICAgICBjb25zdCBuZXh0UHJvcHMgPSBjcmVhdGVMb29wVXBkYXRlKHByb3BzKTtcbiAgICAgICAgaWYgKG5leHRQcm9wcykge1xuICAgICAgICAgIHJldHVybiB0aGlzLl91cGRhdGUobmV4dFByb3BzLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcbiAgfVxuICAvKiogTWVyZ2UgcHJvcHMgaW50byB0aGUgY3VycmVudCBhbmltYXRpb24gKi9cbiAgX21lcmdlKHJhbmdlLCBwcm9wcywgcmVzb2x2ZSkge1xuICAgIGlmIChwcm9wcy5jYW5jZWwpIHtcbiAgICAgIHRoaXMuc3RvcCh0cnVlKTtcbiAgICAgIHJldHVybiByZXNvbHZlKGdldENhbmNlbGxlZFJlc3VsdCh0aGlzKSk7XG4gICAgfVxuICAgIGNvbnN0IGhhc1RvUHJvcCA9ICFpczUudW5kKHJhbmdlLnRvKTtcbiAgICBjb25zdCBoYXNGcm9tUHJvcCA9ICFpczUudW5kKHJhbmdlLmZyb20pO1xuICAgIGlmIChoYXNUb1Byb3AgfHwgaGFzRnJvbVByb3ApIHtcbiAgICAgIGlmIChwcm9wcy5jYWxsSWQgPiB0aGlzLl9sYXN0VG9JZCkge1xuICAgICAgICB0aGlzLl9sYXN0VG9JZCA9IHByb3BzLmNhbGxJZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlKGdldENhbmNlbGxlZFJlc3VsdCh0aGlzKSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHsga2V5LCBkZWZhdWx0UHJvcHMsIGFuaW1hdGlvbjogYW5pbSB9ID0gdGhpcztcbiAgICBjb25zdCB7IHRvOiBwcmV2VG8sIGZyb206IHByZXZGcm9tIH0gPSBhbmltO1xuICAgIGxldCB7IHRvOiB0bzIgPSBwcmV2VG8sIGZyb20gPSBwcmV2RnJvbSB9ID0gcmFuZ2U7XG4gICAgaWYgKGhhc0Zyb21Qcm9wICYmICFoYXNUb1Byb3AgJiYgKCFwcm9wcy5kZWZhdWx0IHx8IGlzNS51bmQodG8yKSkpIHtcbiAgICAgIHRvMiA9IGZyb207XG4gICAgfVxuICAgIGlmIChwcm9wcy5yZXZlcnNlKVxuICAgICAgW3RvMiwgZnJvbV0gPSBbZnJvbSwgdG8yXTtcbiAgICBjb25zdCBoYXNGcm9tQ2hhbmdlZCA9ICFpc0VxdWFsKGZyb20sIHByZXZGcm9tKTtcbiAgICBpZiAoaGFzRnJvbUNoYW5nZWQpIHtcbiAgICAgIGFuaW0uZnJvbSA9IGZyb207XG4gICAgfVxuICAgIGZyb20gPSBnZXRGbHVpZFZhbHVlMihmcm9tKTtcbiAgICBjb25zdCBoYXNUb0NoYW5nZWQgPSAhaXNFcXVhbCh0bzIsIHByZXZUbyk7XG4gICAgaWYgKGhhc1RvQ2hhbmdlZCkge1xuICAgICAgdGhpcy5fZm9jdXModG8yKTtcbiAgICB9XG4gICAgY29uc3QgaGFzQXN5bmNUbyA9IGlzQXN5bmNUbyhwcm9wcy50byk7XG4gICAgY29uc3QgeyBjb25maWc6IGNvbmZpZzIgfSA9IGFuaW07XG4gICAgY29uc3QgeyBkZWNheSwgdmVsb2NpdHkgfSA9IGNvbmZpZzI7XG4gICAgaWYgKGhhc1RvUHJvcCB8fCBoYXNGcm9tUHJvcCkge1xuICAgICAgY29uZmlnMi52ZWxvY2l0eSA9IDA7XG4gICAgfVxuICAgIGlmIChwcm9wcy5jb25maWcgJiYgIWhhc0FzeW5jVG8pIHtcbiAgICAgIG1lcmdlQ29uZmlnKFxuICAgICAgICBjb25maWcyLFxuICAgICAgICBjYWxsUHJvcChwcm9wcy5jb25maWcsIGtleSksXG4gICAgICAgIC8vIEF2b2lkIGNhbGxpbmcgdGhlIHNhbWUgXCJjb25maWdcIiBwcm9wIHR3aWNlLlxuICAgICAgICBwcm9wcy5jb25maWcgIT09IGRlZmF1bHRQcm9wcy5jb25maWcgPyBjYWxsUHJvcChkZWZhdWx0UHJvcHMuY29uZmlnLCBrZXkpIDogdm9pZCAwXG4gICAgICApO1xuICAgIH1cbiAgICBsZXQgbm9kZSA9IGdldEFuaW1hdGVkMih0aGlzKTtcbiAgICBpZiAoIW5vZGUgfHwgaXM1LnVuZCh0bzIpKSB7XG4gICAgICByZXR1cm4gcmVzb2x2ZShnZXRGaW5pc2hlZFJlc3VsdCh0aGlzLCB0cnVlKSk7XG4gICAgfVxuICAgIGNvbnN0IHJlc2V0ID0gKFxuICAgICAgLy8gV2hlbiBgcmVzZXRgIGlzIHVuZGVmaW5lZCwgdGhlIGBmcm9tYCBwcm9wIGltcGxpZXMgYHJlc2V0OiB0cnVlYCxcbiAgICAgIC8vIGV4Y2VwdCBmb3IgZGVjbGFyYXRpdmUgdXBkYXRlcy4gV2hlbiBgcmVzZXRgIGlzIGRlZmluZWQsIHRoZXJlXG4gICAgICAvLyBtdXN0IGV4aXN0IGEgdmFsdWUgdG8gYW5pbWF0ZSBmcm9tLlxuICAgICAgaXM1LnVuZChwcm9wcy5yZXNldCkgPyBoYXNGcm9tUHJvcCAmJiAhcHJvcHMuZGVmYXVsdCA6ICFpczUudW5kKGZyb20pICYmIG1hdGNoUHJvcChwcm9wcy5yZXNldCwga2V5KVxuICAgICk7XG4gICAgY29uc3QgdmFsdWUgPSByZXNldCA/IGZyb20gOiB0aGlzLmdldCgpO1xuICAgIGNvbnN0IGdvYWwgPSBjb21wdXRlR29hbCh0bzIpO1xuICAgIGNvbnN0IGlzQW5pbWF0YWJsZSA9IGlzNS5udW0oZ29hbCkgfHwgaXM1LmFycihnb2FsKSB8fCBpc0FuaW1hdGVkU3RyaW5nMihnb2FsKTtcbiAgICBjb25zdCBpbW1lZGlhdGUgPSAhaGFzQXN5bmNUbyAmJiAoIWlzQW5pbWF0YWJsZSB8fCBtYXRjaFByb3AoZGVmYXVsdFByb3BzLmltbWVkaWF0ZSB8fCBwcm9wcy5pbW1lZGlhdGUsIGtleSkpO1xuICAgIGlmIChoYXNUb0NoYW5nZWQpIHtcbiAgICAgIGNvbnN0IG5vZGVUeXBlID0gZ2V0QW5pbWF0ZWRUeXBlKHRvMik7XG4gICAgICBpZiAobm9kZVR5cGUgIT09IG5vZGUuY29uc3RydWN0b3IpIHtcbiAgICAgICAgaWYgKGltbWVkaWF0ZSkge1xuICAgICAgICAgIG5vZGUgPSB0aGlzLl9zZXQoZ29hbCk7XG4gICAgICAgIH0gZWxzZVxuICAgICAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAgICAgYENhbm5vdCBhbmltYXRlIGJldHdlZW4gJHtub2RlLmNvbnN0cnVjdG9yLm5hbWV9IGFuZCAke25vZGVUeXBlLm5hbWV9LCBhcyB0aGUgXCJ0b1wiIHByb3Agc3VnZ2VzdHNgXG4gICAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZ29hbFR5cGUgPSBub2RlLmNvbnN0cnVjdG9yO1xuICAgIGxldCBzdGFydGVkID0gaGFzRmx1aWRWYWx1ZSh0bzIpO1xuICAgIGxldCBmaW5pc2hlZCA9IGZhbHNlO1xuICAgIGlmICghc3RhcnRlZCkge1xuICAgICAgY29uc3QgaGFzVmFsdWVDaGFuZ2VkID0gcmVzZXQgfHwgIWhhc0FuaW1hdGVkKHRoaXMpICYmIGhhc0Zyb21DaGFuZ2VkO1xuICAgICAgaWYgKGhhc1RvQ2hhbmdlZCB8fCBoYXNWYWx1ZUNoYW5nZWQpIHtcbiAgICAgICAgZmluaXNoZWQgPSBpc0VxdWFsKGNvbXB1dGVHb2FsKHZhbHVlKSwgZ29hbCk7XG4gICAgICAgIHN0YXJ0ZWQgPSAhZmluaXNoZWQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzRXF1YWwoYW5pbS5pbW1lZGlhdGUsIGltbWVkaWF0ZSkgJiYgIWltbWVkaWF0ZSB8fCAhaXNFcXVhbChjb25maWcyLmRlY2F5LCBkZWNheSkgfHwgIWlzRXF1YWwoY29uZmlnMi52ZWxvY2l0eSwgdmVsb2NpdHkpKSB7XG4gICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmluaXNoZWQgJiYgaXNBbmltYXRpbmcodGhpcykpIHtcbiAgICAgIGlmIChhbmltLmNoYW5nZWQgJiYgIXJlc2V0KSB7XG4gICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmICghc3RhcnRlZCkge1xuICAgICAgICB0aGlzLl9zdG9wKHByZXZUbyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghaGFzQXN5bmNUbykge1xuICAgICAgaWYgKHN0YXJ0ZWQgfHwgaGFzRmx1aWRWYWx1ZShwcmV2VG8pKSB7XG4gICAgICAgIGFuaW0udmFsdWVzID0gbm9kZS5nZXRQYXlsb2FkKCk7XG4gICAgICAgIGFuaW0udG9WYWx1ZXMgPSBoYXNGbHVpZFZhbHVlKHRvMikgPyBudWxsIDogZ29hbFR5cGUgPT0gQW5pbWF0ZWRTdHJpbmcgPyBbMV0gOiB0b0FycmF5Mihnb2FsKTtcbiAgICAgIH1cbiAgICAgIGlmIChhbmltLmltbWVkaWF0ZSAhPSBpbW1lZGlhdGUpIHtcbiAgICAgICAgYW5pbS5pbW1lZGlhdGUgPSBpbW1lZGlhdGU7XG4gICAgICAgIGlmICghaW1tZWRpYXRlICYmICFyZXNldCkge1xuICAgICAgICAgIHRoaXMuX3NldChwcmV2VG8pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnRlZCkge1xuICAgICAgICBjb25zdCB7IG9uUmVzdCB9ID0gYW5pbTtcbiAgICAgICAgZWFjaDIoQUNUSVZFX0VWRU5UUywgKHR5cGUpID0+IG1lcmdlQWN0aXZlRm4odGhpcywgcHJvcHMsIHR5cGUpKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZ2V0RmluaXNoZWRSZXN1bHQodGhpcywgY2hlY2tGaW5pc2hlZCh0aGlzLCBwcmV2VG8pKTtcbiAgICAgICAgZmx1c2hDYWxscyh0aGlzLl9wZW5kaW5nQ2FsbHMsIHJlc3VsdCk7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdDYWxscy5hZGQocmVzb2x2ZSk7XG4gICAgICAgIGlmIChhbmltLmNoYW5nZWQpXG4gICAgICAgICAgcmFmMy5iYXRjaGVkVXBkYXRlcygoKSA9PiB7XG4gICAgICAgICAgICBhbmltLmNoYW5nZWQgPSAhcmVzZXQ7XG4gICAgICAgICAgICBvblJlc3Q/LihyZXN1bHQsIHRoaXMpO1xuICAgICAgICAgICAgaWYgKHJlc2V0KSB7XG4gICAgICAgICAgICAgIGNhbGxQcm9wKGRlZmF1bHRQcm9wcy5vblJlc3QsIHJlc3VsdCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhbmltLm9uU3RhcnQ/LihyZXN1bHQsIHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAocmVzZXQpIHtcbiAgICAgIHRoaXMuX3NldCh2YWx1ZSk7XG4gICAgfVxuICAgIGlmIChoYXNBc3luY1RvKSB7XG4gICAgICByZXNvbHZlKHJ1bkFzeW5jKHByb3BzLnRvLCBwcm9wcywgdGhpcy5fc3RhdGUsIHRoaXMpKTtcbiAgICB9IGVsc2UgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgIHRoaXMuX3N0YXJ0KCk7XG4gICAgfSBlbHNlIGlmIChpc0FuaW1hdGluZyh0aGlzKSAmJiAhaGFzVG9DaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9wZW5kaW5nQ2FsbHMuYWRkKHJlc29sdmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXNvbHZlKGdldE5vb3BSZXN1bHQodmFsdWUpKTtcbiAgICB9XG4gIH1cbiAgLyoqIFVwZGF0ZSB0aGUgYGFuaW1hdGlvbi50b2AgdmFsdWUsIHdoaWNoIG1pZ2h0IGJlIGEgYEZsdWlkVmFsdWVgICovXG4gIF9mb2N1cyh2YWx1ZSkge1xuICAgIGNvbnN0IGFuaW0gPSB0aGlzLmFuaW1hdGlvbjtcbiAgICBpZiAodmFsdWUgIT09IGFuaW0udG8pIHtcbiAgICAgIGlmIChnZXRGbHVpZE9ic2VydmVycyh0aGlzKSkge1xuICAgICAgICB0aGlzLl9kZXRhY2goKTtcbiAgICAgIH1cbiAgICAgIGFuaW0udG8gPSB2YWx1ZTtcbiAgICAgIGlmIChnZXRGbHVpZE9ic2VydmVycyh0aGlzKSkge1xuICAgICAgICB0aGlzLl9hdHRhY2goKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgX2F0dGFjaCgpIHtcbiAgICBsZXQgcHJpb3JpdHkgPSAwO1xuICAgIGNvbnN0IHsgdG86IHRvMiB9ID0gdGhpcy5hbmltYXRpb247XG4gICAgaWYgKGhhc0ZsdWlkVmFsdWUodG8yKSkge1xuICAgICAgYWRkRmx1aWRPYnNlcnZlcih0bzIsIHRoaXMpO1xuICAgICAgaWYgKGlzRnJhbWVWYWx1ZSh0bzIpKSB7XG4gICAgICAgIHByaW9yaXR5ID0gdG8yLnByaW9yaXR5ICsgMTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICB9XG4gIF9kZXRhY2goKSB7XG4gICAgY29uc3QgeyB0bzogdG8yIH0gPSB0aGlzLmFuaW1hdGlvbjtcbiAgICBpZiAoaGFzRmx1aWRWYWx1ZSh0bzIpKSB7XG4gICAgICByZW1vdmVGbHVpZE9ic2VydmVyKHRvMiwgdGhpcyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIGN1cnJlbnQgdmFsdWUgZnJvbSBvdXRzaWRlIHRoZSBmcmFtZWxvb3AsXG4gICAqIGFuZCByZXR1cm4gdGhlIGBBbmltYXRlZGAgbm9kZS5cbiAgICovXG4gIF9zZXQoYXJnLCBpZGxlID0gdHJ1ZSkge1xuICAgIGNvbnN0IHZhbHVlID0gZ2V0Rmx1aWRWYWx1ZTIoYXJnKTtcbiAgICBpZiAoIWlzNS51bmQodmFsdWUpKSB7XG4gICAgICBjb25zdCBvbGROb2RlID0gZ2V0QW5pbWF0ZWQyKHRoaXMpO1xuICAgICAgaWYgKCFvbGROb2RlIHx8ICFpc0VxdWFsKHZhbHVlLCBvbGROb2RlLmdldFZhbHVlKCkpKSB7XG4gICAgICAgIGNvbnN0IG5vZGVUeXBlID0gZ2V0QW5pbWF0ZWRUeXBlKHZhbHVlKTtcbiAgICAgICAgaWYgKCFvbGROb2RlIHx8IG9sZE5vZGUuY29uc3RydWN0b3IgIT0gbm9kZVR5cGUpIHtcbiAgICAgICAgICBzZXRBbmltYXRlZCh0aGlzLCBub2RlVHlwZS5jcmVhdGUodmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbGROb2RlLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2xkTm9kZSkge1xuICAgICAgICAgIHJhZjMuYmF0Y2hlZFVwZGF0ZXMoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5fb25DaGFuZ2UodmFsdWUsIGlkbGUpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBnZXRBbmltYXRlZDIodGhpcyk7XG4gIH1cbiAgX29uU3RhcnQoKSB7XG4gICAgY29uc3QgYW5pbSA9IHRoaXMuYW5pbWF0aW9uO1xuICAgIGlmICghYW5pbS5jaGFuZ2VkKSB7XG4gICAgICBhbmltLmNoYW5nZWQgPSB0cnVlO1xuICAgICAgc2VuZEV2ZW50KFxuICAgICAgICB0aGlzLFxuICAgICAgICBcIm9uU3RhcnRcIixcbiAgICAgICAgZ2V0RmluaXNoZWRSZXN1bHQodGhpcywgY2hlY2tGaW5pc2hlZCh0aGlzLCBhbmltLnRvKSksXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIF9vbkNoYW5nZSh2YWx1ZSwgaWRsZSkge1xuICAgIGlmICghaWRsZSkge1xuICAgICAgdGhpcy5fb25TdGFydCgpO1xuICAgICAgY2FsbFByb3AodGhpcy5hbmltYXRpb24ub25DaGFuZ2UsIHZhbHVlLCB0aGlzKTtcbiAgICB9XG4gICAgY2FsbFByb3AodGhpcy5kZWZhdWx0UHJvcHMub25DaGFuZ2UsIHZhbHVlLCB0aGlzKTtcbiAgICBzdXBlci5fb25DaGFuZ2UodmFsdWUsIGlkbGUpO1xuICB9XG4gIC8vIFRoaXMgbWV0aG9kIHJlc2V0cyB0aGUgYW5pbWF0aW9uIHN0YXRlIChldmVuIGlmIGFscmVhZHkgYW5pbWF0aW5nKSB0b1xuICAvLyBlbnN1cmUgdGhlIGxhdGVzdCBmcm9tL3RvIHJhbmdlIGlzIHVzZWQsIGFuZCBpdCBhbHNvIGVuc3VyZXMgdGhpcyBzcHJpbmdcbiAgLy8gaXMgYWRkZWQgdG8gdGhlIGZyYW1lbG9vcC5cbiAgX3N0YXJ0KCkge1xuICAgIGNvbnN0IGFuaW0gPSB0aGlzLmFuaW1hdGlvbjtcbiAgICBnZXRBbmltYXRlZDIodGhpcykucmVzZXQoZ2V0Rmx1aWRWYWx1ZTIoYW5pbS50bykpO1xuICAgIGlmICghYW5pbS5pbW1lZGlhdGUpIHtcbiAgICAgIGFuaW0uZnJvbVZhbHVlcyA9IGFuaW0udmFsdWVzLm1hcCgobm9kZSkgPT4gbm9kZS5sYXN0UG9zaXRpb24pO1xuICAgIH1cbiAgICBpZiAoIWlzQW5pbWF0aW5nKHRoaXMpKSB7XG4gICAgICBzZXRBY3RpdmVCaXQodGhpcywgdHJ1ZSk7XG4gICAgICBpZiAoIWlzUGF1c2VkKHRoaXMpKSB7XG4gICAgICAgIHRoaXMuX3Jlc3VtZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBfcmVzdW1lKCkge1xuICAgIGlmIChHNS5za2lwQW5pbWF0aW9uKSB7XG4gICAgICB0aGlzLmZpbmlzaCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmcmFtZUxvb3AyLnN0YXJ0KHRoaXMpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXhpdCB0aGUgZnJhbWVsb29wIGFuZCBub3RpZnkgYG9uUmVzdGAgbGlzdGVuZXJzLlxuICAgKlxuICAgKiBBbHdheXMgd3JhcCBgX3N0b3BgIGNhbGxzIHdpdGggYGJhdGNoZWRVcGRhdGVzYC5cbiAgICovXG4gIF9zdG9wKGdvYWwsIGNhbmNlbCkge1xuICAgIGlmIChpc0FuaW1hdGluZyh0aGlzKSkge1xuICAgICAgc2V0QWN0aXZlQml0KHRoaXMsIGZhbHNlKTtcbiAgICAgIGNvbnN0IGFuaW0gPSB0aGlzLmFuaW1hdGlvbjtcbiAgICAgIGVhY2gyKGFuaW0udmFsdWVzLCAobm9kZSkgPT4ge1xuICAgICAgICBub2RlLmRvbmUgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgICBpZiAoYW5pbS50b1ZhbHVlcykge1xuICAgICAgICBhbmltLm9uQ2hhbmdlID0gYW5pbS5vblBhdXNlID0gYW5pbS5vblJlc3VtZSA9IHZvaWQgMDtcbiAgICAgIH1cbiAgICAgIGNhbGxGbHVpZE9ic2VydmVyczIodGhpcywge1xuICAgICAgICB0eXBlOiBcImlkbGVcIixcbiAgICAgICAgcGFyZW50OiB0aGlzXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGNhbmNlbCA/IGdldENhbmNlbGxlZFJlc3VsdCh0aGlzLmdldCgpKSA6IGdldEZpbmlzaGVkUmVzdWx0KHRoaXMuZ2V0KCksIGNoZWNrRmluaXNoZWQodGhpcywgZ29hbCA/PyBhbmltLnRvKSk7XG4gICAgICBmbHVzaENhbGxzKHRoaXMuX3BlbmRpbmdDYWxscywgcmVzdWx0KTtcbiAgICAgIGlmIChhbmltLmNoYW5nZWQpIHtcbiAgICAgICAgYW5pbS5jaGFuZ2VkID0gZmFsc2U7XG4gICAgICAgIHNlbmRFdmVudCh0aGlzLCBcIm9uUmVzdFwiLCByZXN1bHQsIHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcbmZ1bmN0aW9uIGNoZWNrRmluaXNoZWQodGFyZ2V0LCB0bzIpIHtcbiAgY29uc3QgZ29hbCA9IGNvbXB1dGVHb2FsKHRvMik7XG4gIGNvbnN0IHZhbHVlID0gY29tcHV0ZUdvYWwodGFyZ2V0LmdldCgpKTtcbiAgcmV0dXJuIGlzRXF1YWwodmFsdWUsIGdvYWwpO1xufVxuZnVuY3Rpb24gY3JlYXRlTG9vcFVwZGF0ZShwcm9wcywgbG9vcCA9IHByb3BzLmxvb3AsIHRvMiA9IHByb3BzLnRvKSB7XG4gIGNvbnN0IGxvb3BSZXQgPSBjYWxsUHJvcChsb29wKTtcbiAgaWYgKGxvb3BSZXQpIHtcbiAgICBjb25zdCBvdmVycmlkZXMgPSBsb29wUmV0ICE9PSB0cnVlICYmIGluZmVyVG8obG9vcFJldCk7XG4gICAgY29uc3QgcmV2ZXJzZSA9IChvdmVycmlkZXMgfHwgcHJvcHMpLnJldmVyc2U7XG4gICAgY29uc3QgcmVzZXQgPSAhb3ZlcnJpZGVzIHx8IG92ZXJyaWRlcy5yZXNldDtcbiAgICByZXR1cm4gY3JlYXRlVXBkYXRlKHtcbiAgICAgIC4uLnByb3BzLFxuICAgICAgbG9vcCxcbiAgICAgIC8vIEF2b2lkIHVwZGF0aW5nIGRlZmF1bHQgcHJvcHMgd2hlbiBsb29waW5nLlxuICAgICAgZGVmYXVsdDogZmFsc2UsXG4gICAgICAvLyBOZXZlciBsb29wIHRoZSBgcGF1c2VgIHByb3AuXG4gICAgICBwYXVzZTogdm9pZCAwLFxuICAgICAgLy8gRm9yIHRoZSBcInJldmVyc2VcIiBwcm9wIHRvIGxvb3AgYXMgZXhwZWN0ZWQsIHRoZSBcInRvXCIgcHJvcFxuICAgICAgLy8gbXVzdCBiZSB1bmRlZmluZWQuIFRoZSBcInJldmVyc2VcIiBwcm9wIGlzIGlnbm9yZWQgd2hlbiB0aGVcbiAgICAgIC8vIFwidG9cIiBwcm9wIGlzIGFuIGFycmF5IG9yIGZ1bmN0aW9uLlxuICAgICAgdG86ICFyZXZlcnNlIHx8IGlzQXN5bmNUbyh0bzIpID8gdG8yIDogdm9pZCAwLFxuICAgICAgLy8gSWdub3JlIHRoZSBcImZyb21cIiBwcm9wIGV4Y2VwdCBvbiByZXNldC5cbiAgICAgIGZyb206IHJlc2V0ID8gcHJvcHMuZnJvbSA6IHZvaWQgMCxcbiAgICAgIHJlc2V0LFxuICAgICAgLy8gVGhlIFwibG9vcFwiIHByb3AgY2FuIHJldHVybiBhIFwidXNlU3ByaW5nXCIgcHJvcHMgb2JqZWN0IHRvXG4gICAgICAvLyBvdmVycmlkZSBhbnkgb2YgdGhlIG9yaWdpbmFsIHByb3BzLlxuICAgICAgLi4ub3ZlcnJpZGVzXG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVVwZGF0ZShwcm9wcykge1xuICBjb25zdCB7IHRvOiB0bzIsIGZyb20gfSA9IHByb3BzID0gaW5mZXJUbyhwcm9wcyk7XG4gIGNvbnN0IGtleXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBpZiAoaXM1Lm9iaih0bzIpKVxuICAgIGZpbmREZWZpbmVkKHRvMiwga2V5cyk7XG4gIGlmIChpczUub2JqKGZyb20pKVxuICAgIGZpbmREZWZpbmVkKGZyb20sIGtleXMpO1xuICBwcm9wcy5rZXlzID0ga2V5cy5zaXplID8gQXJyYXkuZnJvbShrZXlzKSA6IG51bGw7XG4gIHJldHVybiBwcm9wcztcbn1cbmZ1bmN0aW9uIGRlY2xhcmVVcGRhdGUocHJvcHMpIHtcbiAgY29uc3QgdXBkYXRlMiA9IGNyZWF0ZVVwZGF0ZShwcm9wcyk7XG4gIGlmIChpczUudW5kKHVwZGF0ZTIuZGVmYXVsdCkpIHtcbiAgICB1cGRhdGUyLmRlZmF1bHQgPSBnZXREZWZhdWx0UHJvcHModXBkYXRlMik7XG4gIH1cbiAgcmV0dXJuIHVwZGF0ZTI7XG59XG5mdW5jdGlvbiBmaW5kRGVmaW5lZCh2YWx1ZXMsIGtleXMpIHtcbiAgZWFjaFByb3AzKHZhbHVlcywgKHZhbHVlLCBrZXkpID0+IHZhbHVlICE9IG51bGwgJiYga2V5cy5hZGQoa2V5KSk7XG59XG52YXIgQUNUSVZFX0VWRU5UUyA9IFtcbiAgXCJvblN0YXJ0XCIsXG4gIFwib25SZXN0XCIsXG4gIFwib25DaGFuZ2VcIixcbiAgXCJvblBhdXNlXCIsXG4gIFwib25SZXN1bWVcIlxuXTtcbmZ1bmN0aW9uIG1lcmdlQWN0aXZlRm4odGFyZ2V0LCBwcm9wcywgdHlwZSkge1xuICB0YXJnZXQuYW5pbWF0aW9uW3R5cGVdID0gcHJvcHNbdHlwZV0gIT09IGdldERlZmF1bHRQcm9wKHByb3BzLCB0eXBlKSA/IHJlc29sdmVQcm9wKHByb3BzW3R5cGVdLCB0YXJnZXQua2V5KSA6IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIHNlbmRFdmVudCh0YXJnZXQsIHR5cGUsIC4uLmFyZ3MpIHtcbiAgdGFyZ2V0LmFuaW1hdGlvblt0eXBlXT8uKC4uLmFyZ3MpO1xuICB0YXJnZXQuZGVmYXVsdFByb3BzW3R5cGVdPy4oLi4uYXJncyk7XG59XG5cbi8vIHNyYy9Db250cm9sbGVyLnRzXG5pbXBvcnQge1xuICBpcyBhcyBpczYsXG4gIHJhZiBhcyByYWY0LFxuICBlYWNoIGFzIGVhY2gzLFxuICBub29wLFxuICBmbHVzaCBhcyBmbHVzaDIsXG4gIHRvQXJyYXkgYXMgdG9BcnJheTMsXG4gIGVhY2hQcm9wIGFzIGVhY2hQcm9wNCxcbiAgZmx1c2hDYWxscyBhcyBmbHVzaENhbGxzMixcbiAgYWRkRmx1aWRPYnNlcnZlciBhcyBhZGRGbHVpZE9ic2VydmVyMlxufSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcbnZhciBCQVRDSEVEX0VWRU5UUyA9IFtcIm9uU3RhcnRcIiwgXCJvbkNoYW5nZVwiLCBcIm9uUmVzdFwiXTtcbnZhciBuZXh0SWQyID0gMTtcbnZhciBDb250cm9sbGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihwcm9wcywgZmx1c2gzKSB7XG4gICAgdGhpcy5pZCA9IG5leHRJZDIrKztcbiAgICAvKiogVGhlIGFuaW1hdGVkIHZhbHVlcyAqL1xuICAgIHRoaXMuc3ByaW5ncyA9IHt9O1xuICAgIC8qKiBUaGUgcXVldWUgb2YgcHJvcHMgcGFzc2VkIHRvIHRoZSBgdXBkYXRlYCBtZXRob2QuICovXG4gICAgdGhpcy5xdWV1ZSA9IFtdO1xuICAgIC8qKiBUaGUgY291bnRlciBmb3IgdHJhY2tpbmcgYHNjaGVkdWxlUHJvcHNgIGNhbGxzICovXG4gICAgdGhpcy5fbGFzdEFzeW5jSWQgPSAwO1xuICAgIC8qKiBUaGUgdmFsdWVzIGN1cnJlbnRseSBiZWluZyBhbmltYXRlZCAqL1xuICAgIHRoaXMuX2FjdGl2ZSA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgLyoqIFRoZSB2YWx1ZXMgdGhhdCBjaGFuZ2VkIHJlY2VudGx5ICovXG4gICAgdGhpcy5fY2hhbmdlZCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgLyoqIEVxdWFscyBmYWxzZSB3aGVuIGBvblN0YXJ0YCBsaXN0ZW5lcnMgY2FuIGJlIGNhbGxlZCAqL1xuICAgIHRoaXMuX3N0YXJ0ZWQgPSBmYWxzZTtcbiAgICAvKiogU3RhdGUgdXNlZCBieSB0aGUgYHJ1bkFzeW5jYCBmdW5jdGlvbiAqL1xuICAgIHRoaXMuX3N0YXRlID0ge1xuICAgICAgcGF1c2VkOiBmYWxzZSxcbiAgICAgIHBhdXNlUXVldWU6IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCksXG4gICAgICByZXN1bWVRdWV1ZTogLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKSxcbiAgICAgIHRpbWVvdXRzOiAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpXG4gICAgfTtcbiAgICAvKiogVGhlIGV2ZW50IHF1ZXVlcyB0aGF0IGFyZSBmbHVzaGVkIG9uY2UgcGVyIGZyYW1lIG1heGltdW0gKi9cbiAgICB0aGlzLl9ldmVudHMgPSB7XG4gICAgICBvblN0YXJ0OiAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpLFxuICAgICAgb25DaGFuZ2U6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCksXG4gICAgICBvblJlc3Q6IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKClcbiAgICB9O1xuICAgIHRoaXMuX29uRnJhbWUgPSB0aGlzLl9vbkZyYW1lLmJpbmQodGhpcyk7XG4gICAgaWYgKGZsdXNoMykge1xuICAgICAgdGhpcy5fZmx1c2ggPSBmbHVzaDM7XG4gICAgfVxuICAgIGlmIChwcm9wcykge1xuICAgICAgdGhpcy5zdGFydCh7IGRlZmF1bHQ6IHRydWUsIC4uLnByb3BzIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogRXF1YWxzIGB0cnVlYCB3aGVuIG5vIHNwcmluZyB2YWx1ZXMgYXJlIGluIHRoZSBmcmFtZWxvb3AsIGFuZFxuICAgKiBubyBhc3luYyBhbmltYXRpb24gaXMgY3VycmVudGx5IGFjdGl2ZS5cbiAgICovXG4gIGdldCBpZGxlKCkge1xuICAgIHJldHVybiAhdGhpcy5fc3RhdGUuYXN5bmNUbyAmJiBPYmplY3QudmFsdWVzKHRoaXMuc3ByaW5ncykuZXZlcnkoKHNwcmluZykgPT4ge1xuICAgICAgcmV0dXJuIHNwcmluZy5pZGxlICYmICFzcHJpbmcuaXNEZWxheWVkICYmICFzcHJpbmcuaXNQYXVzZWQ7XG4gICAgfSk7XG4gIH1cbiAgZ2V0IGl0ZW0oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2l0ZW07XG4gIH1cbiAgc2V0IGl0ZW0oaXRlbSkge1xuICAgIHRoaXMuX2l0ZW0gPSBpdGVtO1xuICB9XG4gIC8qKiBHZXQgdGhlIGN1cnJlbnQgdmFsdWVzIG9mIG91ciBzcHJpbmdzICovXG4gIGdldCgpIHtcbiAgICBjb25zdCB2YWx1ZXMgPSB7fTtcbiAgICB0aGlzLmVhY2goKHNwcmluZywga2V5KSA9PiB2YWx1ZXNba2V5XSA9IHNwcmluZy5nZXQoKSk7XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfVxuICAvKiogU2V0IHRoZSBjdXJyZW50IHZhbHVlcyB3aXRob3V0IGFuaW1hdGluZy4gKi9cbiAgc2V0KHZhbHVlcykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlcykge1xuICAgICAgY29uc3QgdmFsdWUgPSB2YWx1ZXNba2V5XTtcbiAgICAgIGlmICghaXM2LnVuZCh2YWx1ZSkpIHtcbiAgICAgICAgdGhpcy5zcHJpbmdzW2tleV0uc2V0KHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqIFB1c2ggYW4gdXBkYXRlIG9udG8gdGhlIHF1ZXVlIG9mIGVhY2ggdmFsdWUuICovXG4gIHVwZGF0ZShwcm9wcykge1xuICAgIGlmIChwcm9wcykge1xuICAgICAgdGhpcy5xdWV1ZS5wdXNoKGNyZWF0ZVVwZGF0ZShwcm9wcykpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogU3RhcnQgdGhlIHF1ZXVlZCBhbmltYXRpb25zIGZvciBldmVyeSBzcHJpbmcsIGFuZCByZXNvbHZlIHRoZSByZXR1cm5lZFxuICAgKiBwcm9taXNlIG9uY2UgYWxsIHF1ZXVlZCBhbmltYXRpb25zIGhhdmUgZmluaXNoZWQgb3IgYmVlbiBjYW5jZWxsZWQuXG4gICAqXG4gICAqIFdoZW4geW91IHBhc3MgYSBxdWV1ZSAoaW5zdGVhZCBvZiBub3RoaW5nKSwgdGhhdCBxdWV1ZSBpcyB1c2VkIGluc3RlYWQgb2ZcbiAgICogdGhlIHF1ZXVlZCBhbmltYXRpb25zIGFkZGVkIHdpdGggdGhlIGB1cGRhdGVgIG1ldGhvZCwgd2hpY2ggYXJlIGxlZnQgYWxvbmUuXG4gICAqL1xuICBzdGFydChwcm9wcykge1xuICAgIGxldCB7IHF1ZXVlIH0gPSB0aGlzO1xuICAgIGlmIChwcm9wcykge1xuICAgICAgcXVldWUgPSB0b0FycmF5Myhwcm9wcykubWFwKGNyZWF0ZVVwZGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX2ZsdXNoKSB7XG4gICAgICByZXR1cm4gdGhpcy5fZmx1c2godGhpcywgcXVldWUpO1xuICAgIH1cbiAgICBwcmVwYXJlS2V5cyh0aGlzLCBxdWV1ZSk7XG4gICAgcmV0dXJuIGZsdXNoVXBkYXRlUXVldWUodGhpcywgcXVldWUpO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgc3RvcChhcmcsIGtleXMpIHtcbiAgICBpZiAoYXJnICE9PSAhIWFyZykge1xuICAgICAga2V5cyA9IGFyZztcbiAgICB9XG4gICAgaWYgKGtleXMpIHtcbiAgICAgIGNvbnN0IHNwcmluZ3MgPSB0aGlzLnNwcmluZ3M7XG4gICAgICBlYWNoMyh0b0FycmF5MyhrZXlzKSwgKGtleSkgPT4gc3ByaW5nc1trZXldLnN0b3AoISFhcmcpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RvcEFzeW5jKHRoaXMuX3N0YXRlLCB0aGlzLl9sYXN0QXN5bmNJZCk7XG4gICAgICB0aGlzLmVhY2goKHNwcmluZykgPT4gc3ByaW5nLnN0b3AoISFhcmcpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqIEZyZWV6ZSB0aGUgYWN0aXZlIGFuaW1hdGlvbiBpbiB0aW1lICovXG4gIHBhdXNlKGtleXMpIHtcbiAgICBpZiAoaXM2LnVuZChrZXlzKSkge1xuICAgICAgdGhpcy5zdGFydCh7IHBhdXNlOiB0cnVlIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBzcHJpbmdzID0gdGhpcy5zcHJpbmdzO1xuICAgICAgZWFjaDModG9BcnJheTMoa2V5cyksIChrZXkpID0+IHNwcmluZ3Nba2V5XS5wYXVzZSgpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqIFJlc3VtZSB0aGUgYW5pbWF0aW9uIGlmIHBhdXNlZC4gKi9cbiAgcmVzdW1lKGtleXMpIHtcbiAgICBpZiAoaXM2LnVuZChrZXlzKSkge1xuICAgICAgdGhpcy5zdGFydCh7IHBhdXNlOiBmYWxzZSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc3ByaW5ncyA9IHRoaXMuc3ByaW5ncztcbiAgICAgIGVhY2gzKHRvQXJyYXkzKGtleXMpLCAoa2V5KSA9PiBzcHJpbmdzW2tleV0ucmVzdW1lKCkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKiogQ2FsbCBhIGZ1bmN0aW9uIG9uY2UgcGVyIHNwcmluZyB2YWx1ZSAqL1xuICBlYWNoKGl0ZXJhdG9yKSB7XG4gICAgZWFjaFByb3A0KHRoaXMuc3ByaW5ncywgaXRlcmF0b3IpO1xuICB9XG4gIC8qKiBAaW50ZXJuYWwgQ2FsbGVkIGF0IHRoZSBlbmQgb2YgZXZlcnkgYW5pbWF0aW9uIGZyYW1lICovXG4gIF9vbkZyYW1lKCkge1xuICAgIGNvbnN0IHsgb25TdGFydCwgb25DaGFuZ2UsIG9uUmVzdCB9ID0gdGhpcy5fZXZlbnRzO1xuICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuX2FjdGl2ZS5zaXplID4gMDtcbiAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy5fY2hhbmdlZC5zaXplID4gMDtcbiAgICBpZiAoYWN0aXZlICYmICF0aGlzLl9zdGFydGVkIHx8IGNoYW5nZWQgJiYgIXRoaXMuX3N0YXJ0ZWQpIHtcbiAgICAgIHRoaXMuX3N0YXJ0ZWQgPSB0cnVlO1xuICAgICAgZmx1c2gyKG9uU3RhcnQsIChbb25TdGFydDIsIHJlc3VsdF0pID0+IHtcbiAgICAgICAgcmVzdWx0LnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICAgICAgb25TdGFydDIocmVzdWx0LCB0aGlzLCB0aGlzLl9pdGVtKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBpZGxlID0gIWFjdGl2ZSAmJiB0aGlzLl9zdGFydGVkO1xuICAgIGNvbnN0IHZhbHVlcyA9IGNoYW5nZWQgfHwgaWRsZSAmJiBvblJlc3Quc2l6ZSA/IHRoaXMuZ2V0KCkgOiBudWxsO1xuICAgIGlmIChjaGFuZ2VkICYmIG9uQ2hhbmdlLnNpemUpIHtcbiAgICAgIGZsdXNoMihvbkNoYW5nZSwgKFtvbkNoYW5nZTIsIHJlc3VsdF0pID0+IHtcbiAgICAgICAgcmVzdWx0LnZhbHVlID0gdmFsdWVzO1xuICAgICAgICBvbkNoYW5nZTIocmVzdWx0LCB0aGlzLCB0aGlzLl9pdGVtKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaWRsZSkge1xuICAgICAgdGhpcy5fc3RhcnRlZCA9IGZhbHNlO1xuICAgICAgZmx1c2gyKG9uUmVzdCwgKFtvblJlc3QyLCByZXN1bHRdKSA9PiB7XG4gICAgICAgIHJlc3VsdC52YWx1ZSA9IHZhbHVlcztcbiAgICAgICAgb25SZXN0MihyZXN1bHQsIHRoaXMsIHRoaXMuX2l0ZW0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgZXZlbnRPYnNlcnZlZChldmVudCkge1xuICAgIGlmIChldmVudC50eXBlID09IFwiY2hhbmdlXCIpIHtcbiAgICAgIHRoaXMuX2NoYW5nZWQuYWRkKGV2ZW50LnBhcmVudCk7XG4gICAgICBpZiAoIWV2ZW50LmlkbGUpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlLmFkZChldmVudC5wYXJlbnQpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZXZlbnQudHlwZSA9PSBcImlkbGVcIikge1xuICAgICAgdGhpcy5fYWN0aXZlLmRlbGV0ZShldmVudC5wYXJlbnQpO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuO1xuICAgIHJhZjQub25GcmFtZSh0aGlzLl9vbkZyYW1lKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGZsdXNoVXBkYXRlUXVldWUoY3RybCwgcXVldWUpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHF1ZXVlLm1hcCgocHJvcHMpID0+IGZsdXNoVXBkYXRlKGN0cmwsIHByb3BzKSkpLnRoZW4oXG4gICAgKHJlc3VsdHMpID0+IGdldENvbWJpbmVkUmVzdWx0KGN0cmwsIHJlc3VsdHMpXG4gICk7XG59XG5hc3luYyBmdW5jdGlvbiBmbHVzaFVwZGF0ZShjdHJsLCBwcm9wcywgaXNMb29wKSB7XG4gIGNvbnN0IHsga2V5cywgdG86IHRvMiwgZnJvbSwgbG9vcCwgb25SZXN0LCBvblJlc29sdmUgfSA9IHByb3BzO1xuICBjb25zdCBkZWZhdWx0czIgPSBpczYub2JqKHByb3BzLmRlZmF1bHQpICYmIHByb3BzLmRlZmF1bHQ7XG4gIGlmIChsb29wKSB7XG4gICAgcHJvcHMubG9vcCA9IGZhbHNlO1xuICB9XG4gIGlmICh0bzIgPT09IGZhbHNlKVxuICAgIHByb3BzLnRvID0gbnVsbDtcbiAgaWYgKGZyb20gPT09IGZhbHNlKVxuICAgIHByb3BzLmZyb20gPSBudWxsO1xuICBjb25zdCBhc3luY1RvID0gaXM2LmFycih0bzIpIHx8IGlzNi5mdW4odG8yKSA/IHRvMiA6IHZvaWQgMDtcbiAgaWYgKGFzeW5jVG8pIHtcbiAgICBwcm9wcy50byA9IHZvaWQgMDtcbiAgICBwcm9wcy5vblJlc3QgPSB2b2lkIDA7XG4gICAgaWYgKGRlZmF1bHRzMikge1xuICAgICAgZGVmYXVsdHMyLm9uUmVzdCA9IHZvaWQgMDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZWFjaDMoQkFUQ0hFRF9FVkVOVFMsIChrZXkpID0+IHtcbiAgICAgIGNvbnN0IGhhbmRsZXIgPSBwcm9wc1trZXldO1xuICAgICAgaWYgKGlzNi5mdW4oaGFuZGxlcikpIHtcbiAgICAgICAgY29uc3QgcXVldWUgPSBjdHJsW1wiX2V2ZW50c1wiXVtrZXldO1xuICAgICAgICBwcm9wc1trZXldID0gKHsgZmluaXNoZWQsIGNhbmNlbGxlZCB9KSA9PiB7XG4gICAgICAgICAgY29uc3QgcmVzdWx0MiA9IHF1ZXVlLmdldChoYW5kbGVyKTtcbiAgICAgICAgICBpZiAocmVzdWx0Mikge1xuICAgICAgICAgICAgaWYgKCFmaW5pc2hlZClcbiAgICAgICAgICAgICAgcmVzdWx0Mi5maW5pc2hlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGNhbmNlbGxlZClcbiAgICAgICAgICAgICAgcmVzdWx0Mi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBxdWV1ZS5zZXQoaGFuZGxlciwge1xuICAgICAgICAgICAgICB2YWx1ZTogbnVsbCxcbiAgICAgICAgICAgICAgZmluaXNoZWQ6IGZpbmlzaGVkIHx8IGZhbHNlLFxuICAgICAgICAgICAgICBjYW5jZWxsZWQ6IGNhbmNlbGxlZCB8fCBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoZGVmYXVsdHMyKSB7XG4gICAgICAgICAgZGVmYXVsdHMyW2tleV0gPSBwcm9wc1trZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgY29uc3Qgc3RhdGUgPSBjdHJsW1wiX3N0YXRlXCJdO1xuICBpZiAocHJvcHMucGF1c2UgPT09ICFzdGF0ZS5wYXVzZWQpIHtcbiAgICBzdGF0ZS5wYXVzZWQgPSBwcm9wcy5wYXVzZTtcbiAgICBmbHVzaENhbGxzMihwcm9wcy5wYXVzZSA/IHN0YXRlLnBhdXNlUXVldWUgOiBzdGF0ZS5yZXN1bWVRdWV1ZSk7XG4gIH0gZWxzZSBpZiAoc3RhdGUucGF1c2VkKSB7XG4gICAgcHJvcHMucGF1c2UgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHByb21pc2VzID0gKGtleXMgfHwgT2JqZWN0LmtleXMoY3RybC5zcHJpbmdzKSkubWFwKFxuICAgIChrZXkpID0+IGN0cmwuc3ByaW5nc1trZXldLnN0YXJ0KHByb3BzKVxuICApO1xuICBjb25zdCBjYW5jZWwgPSBwcm9wcy5jYW5jZWwgPT09IHRydWUgfHwgZ2V0RGVmYXVsdFByb3AocHJvcHMsIFwiY2FuY2VsXCIpID09PSB0cnVlO1xuICBpZiAoYXN5bmNUbyB8fCBjYW5jZWwgJiYgc3RhdGUuYXN5bmNJZCkge1xuICAgIHByb21pc2VzLnB1c2goXG4gICAgICBzY2hlZHVsZVByb3BzKCsrY3RybFtcIl9sYXN0QXN5bmNJZFwiXSwge1xuICAgICAgICBwcm9wcyxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGFjdGlvbnM6IHtcbiAgICAgICAgICBwYXVzZTogbm9vcCxcbiAgICAgICAgICByZXN1bWU6IG5vb3AsXG4gICAgICAgICAgc3RhcnQocHJvcHMyLCByZXNvbHZlKSB7XG4gICAgICAgICAgICBpZiAoY2FuY2VsKSB7XG4gICAgICAgICAgICAgIHN0b3BBc3luYyhzdGF0ZSwgY3RybFtcIl9sYXN0QXN5bmNJZFwiXSk7XG4gICAgICAgICAgICAgIHJlc29sdmUoZ2V0Q2FuY2VsbGVkUmVzdWx0KGN0cmwpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHByb3BzMi5vblJlc3QgPSBvblJlc3Q7XG4gICAgICAgICAgICAgIHJlc29sdmUoXG4gICAgICAgICAgICAgICAgcnVuQXN5bmMoXG4gICAgICAgICAgICAgICAgICBhc3luY1RvLFxuICAgICAgICAgICAgICAgICAgcHJvcHMyLFxuICAgICAgICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICAgICAgICBjdHJsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG4gIGlmIChzdGF0ZS5wYXVzZWQpIHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzdW1lKSA9PiB7XG4gICAgICBzdGF0ZS5yZXN1bWVRdWV1ZS5hZGQocmVzdW1lKTtcbiAgICB9KTtcbiAgfVxuICBjb25zdCByZXN1bHQgPSBnZXRDb21iaW5lZFJlc3VsdChjdHJsLCBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcykpO1xuICBpZiAobG9vcCAmJiByZXN1bHQuZmluaXNoZWQgJiYgIShpc0xvb3AgJiYgcmVzdWx0Lm5vb3ApKSB7XG4gICAgY29uc3QgbmV4dFByb3BzID0gY3JlYXRlTG9vcFVwZGF0ZShwcm9wcywgbG9vcCwgdG8yKTtcbiAgICBpZiAobmV4dFByb3BzKSB7XG4gICAgICBwcmVwYXJlS2V5cyhjdHJsLCBbbmV4dFByb3BzXSk7XG4gICAgICByZXR1cm4gZmx1c2hVcGRhdGUoY3RybCwgbmV4dFByb3BzLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKG9uUmVzb2x2ZSkge1xuICAgIHJhZjQuYmF0Y2hlZFVwZGF0ZXMoKCkgPT4gb25SZXNvbHZlKHJlc3VsdCwgY3RybCwgY3RybC5pdGVtKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGdldFNwcmluZ3MoY3RybCwgcHJvcHMpIHtcbiAgY29uc3Qgc3ByaW5ncyA9IHsgLi4uY3RybC5zcHJpbmdzIH07XG4gIGlmIChwcm9wcykge1xuICAgIGVhY2gzKHRvQXJyYXkzKHByb3BzKSwgKHByb3BzMikgPT4ge1xuICAgICAgaWYgKGlzNi51bmQocHJvcHMyLmtleXMpKSB7XG4gICAgICAgIHByb3BzMiA9IGNyZWF0ZVVwZGF0ZShwcm9wczIpO1xuICAgICAgfVxuICAgICAgaWYgKCFpczYub2JqKHByb3BzMi50bykpIHtcbiAgICAgICAgcHJvcHMyID0geyAuLi5wcm9wczIsIHRvOiB2b2lkIDAgfTtcbiAgICAgIH1cbiAgICAgIHByZXBhcmVTcHJpbmdzKHNwcmluZ3MsIHByb3BzMiwgKGtleSkgPT4ge1xuICAgICAgICByZXR1cm4gY3JlYXRlU3ByaW5nKGtleSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBzZXRTcHJpbmdzKGN0cmwsIHNwcmluZ3MpO1xuICByZXR1cm4gc3ByaW5ncztcbn1cbmZ1bmN0aW9uIHNldFNwcmluZ3MoY3RybCwgc3ByaW5ncykge1xuICBlYWNoUHJvcDQoc3ByaW5ncywgKHNwcmluZywga2V5KSA9PiB7XG4gICAgaWYgKCFjdHJsLnNwcmluZ3Nba2V5XSkge1xuICAgICAgY3RybC5zcHJpbmdzW2tleV0gPSBzcHJpbmc7XG4gICAgICBhZGRGbHVpZE9ic2VydmVyMihzcHJpbmcsIGN0cmwpO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBjcmVhdGVTcHJpbmcoa2V5LCBvYnNlcnZlcikge1xuICBjb25zdCBzcHJpbmcgPSBuZXcgU3ByaW5nVmFsdWUoKTtcbiAgc3ByaW5nLmtleSA9IGtleTtcbiAgaWYgKG9ic2VydmVyKSB7XG4gICAgYWRkRmx1aWRPYnNlcnZlcjIoc3ByaW5nLCBvYnNlcnZlcik7XG4gIH1cbiAgcmV0dXJuIHNwcmluZztcbn1cbmZ1bmN0aW9uIHByZXBhcmVTcHJpbmdzKHNwcmluZ3MsIHByb3BzLCBjcmVhdGUpIHtcbiAgaWYgKHByb3BzLmtleXMpIHtcbiAgICBlYWNoMyhwcm9wcy5rZXlzLCAoa2V5KSA9PiB7XG4gICAgICBjb25zdCBzcHJpbmcgPSBzcHJpbmdzW2tleV0gfHwgKHNwcmluZ3Nba2V5XSA9IGNyZWF0ZShrZXkpKTtcbiAgICAgIHNwcmluZ1tcIl9wcmVwYXJlTm9kZVwiXShwcm9wcyk7XG4gICAgfSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZXBhcmVLZXlzKGN0cmwsIHF1ZXVlKSB7XG4gIGVhY2gzKHF1ZXVlLCAocHJvcHMpID0+IHtcbiAgICBwcmVwYXJlU3ByaW5ncyhjdHJsLnNwcmluZ3MsIHByb3BzLCAoa2V5KSA9PiB7XG4gICAgICByZXR1cm4gY3JlYXRlU3ByaW5nKGtleSwgY3RybCk7XG4gICAgfSk7XG4gIH0pO1xufVxuXG4vLyBzcmMvU3ByaW5nQ29udGV4dC50c3hcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgdXNlTWVtb09uZSB9IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xudmFyIFNwcmluZ0NvbnRleHQgPSAoe1xuICBjaGlsZHJlbixcbiAgLi4ucHJvcHNcbn0pID0+IHtcbiAgY29uc3QgaW5oZXJpdGVkID0gdXNlQ29udGV4dChjdHgpO1xuICBjb25zdCBwYXVzZSA9IHByb3BzLnBhdXNlIHx8ICEhaW5oZXJpdGVkLnBhdXNlLCBpbW1lZGlhdGUgPSBwcm9wcy5pbW1lZGlhdGUgfHwgISFpbmhlcml0ZWQuaW1tZWRpYXRlO1xuICBwcm9wcyA9IHVzZU1lbW9PbmUoKCkgPT4gKHsgcGF1c2UsIGltbWVkaWF0ZSB9KSwgW3BhdXNlLCBpbW1lZGlhdGVdKTtcbiAgY29uc3QgeyBQcm92aWRlciB9ID0gY3R4O1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUHJvdmlkZXIsIHsgdmFsdWU6IHByb3BzIH0sIGNoaWxkcmVuKTtcbn07XG52YXIgY3R4ID0gbWFrZUNvbnRleHQoU3ByaW5nQ29udGV4dCwge30pO1xuU3ByaW5nQ29udGV4dC5Qcm92aWRlciA9IGN0eC5Qcm92aWRlcjtcblNwcmluZ0NvbnRleHQuQ29uc3VtZXIgPSBjdHguQ29uc3VtZXI7XG5mdW5jdGlvbiBtYWtlQ29udGV4dCh0YXJnZXQsIGluaXQpIHtcbiAgT2JqZWN0LmFzc2lnbih0YXJnZXQsIFJlYWN0LmNyZWF0ZUNvbnRleHQoaW5pdCkpO1xuICB0YXJnZXQuUHJvdmlkZXIuX2NvbnRleHQgPSB0YXJnZXQ7XG4gIHRhcmdldC5Db25zdW1lci5fY29udGV4dCA9IHRhcmdldDtcbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLy8gc3JjL1NwcmluZ1JlZi50c1xuaW1wb3J0IHsgZWFjaCBhcyBlYWNoNCwgaXMgYXMgaXM3LCBkZXByZWNhdGVEaXJlY3RDYWxsIH0gZnJvbSBcIkByZWFjdC1zcHJpbmcvc2hhcmVkXCI7XG52YXIgU3ByaW5nUmVmID0gKCkgPT4ge1xuICBjb25zdCBjdXJyZW50ID0gW107XG4gIGNvbnN0IFNwcmluZ1JlZjIgPSBmdW5jdGlvbihwcm9wcykge1xuICAgIGRlcHJlY2F0ZURpcmVjdENhbGwoKTtcbiAgICBjb25zdCByZXN1bHRzID0gW107XG4gICAgZWFjaDQoY3VycmVudCwgKGN0cmwsIGkpID0+IHtcbiAgICAgIGlmIChpczcudW5kKHByb3BzKSkge1xuICAgICAgICByZXN1bHRzLnB1c2goY3RybC5zdGFydCgpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHVwZGF0ZTIgPSBfZ2V0UHJvcHMocHJvcHMsIGN0cmwsIGkpO1xuICAgICAgICBpZiAodXBkYXRlMikge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChjdHJsLnN0YXJ0KHVwZGF0ZTIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuICBTcHJpbmdSZWYyLmN1cnJlbnQgPSBjdXJyZW50O1xuICBTcHJpbmdSZWYyLmFkZCA9IGZ1bmN0aW9uKGN0cmwpIHtcbiAgICBpZiAoIWN1cnJlbnQuaW5jbHVkZXMoY3RybCkpIHtcbiAgICAgIGN1cnJlbnQucHVzaChjdHJsKTtcbiAgICB9XG4gIH07XG4gIFNwcmluZ1JlZjIuZGVsZXRlID0gZnVuY3Rpb24oY3RybCkge1xuICAgIGNvbnN0IGkgPSBjdXJyZW50LmluZGV4T2YoY3RybCk7XG4gICAgaWYgKH5pKVxuICAgICAgY3VycmVudC5zcGxpY2UoaSwgMSk7XG4gIH07XG4gIFNwcmluZ1JlZjIucGF1c2UgPSBmdW5jdGlvbigpIHtcbiAgICBlYWNoNChjdXJyZW50LCAoY3RybCkgPT4gY3RybC5wYXVzZSguLi5hcmd1bWVudHMpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcbiAgU3ByaW5nUmVmMi5yZXN1bWUgPSBmdW5jdGlvbigpIHtcbiAgICBlYWNoNChjdXJyZW50LCAoY3RybCkgPT4gY3RybC5yZXN1bWUoLi4uYXJndW1lbnRzKSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIFNwcmluZ1JlZjIuc2V0ID0gZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgZWFjaDQoY3VycmVudCwgKGN0cmwsIGkpID0+IHtcbiAgICAgIGNvbnN0IHVwZGF0ZTIgPSBpczcuZnVuKHZhbHVlcykgPyB2YWx1ZXMoaSwgY3RybCkgOiB2YWx1ZXM7XG4gICAgICBpZiAodXBkYXRlMikge1xuICAgICAgICBjdHJsLnNldCh1cGRhdGUyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbiAgU3ByaW5nUmVmMi5zdGFydCA9IGZ1bmN0aW9uKHByb3BzKSB7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdO1xuICAgIGVhY2g0KGN1cnJlbnQsIChjdHJsLCBpKSA9PiB7XG4gICAgICBpZiAoaXM3LnVuZChwcm9wcykpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKGN0cmwuc3RhcnQoKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCB1cGRhdGUyID0gdGhpcy5fZ2V0UHJvcHMocHJvcHMsIGN0cmwsIGkpO1xuICAgICAgICBpZiAodXBkYXRlMikge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChjdHJsLnN0YXJ0KHVwZGF0ZTIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuICBTcHJpbmdSZWYyLnN0b3AgPSBmdW5jdGlvbigpIHtcbiAgICBlYWNoNChjdXJyZW50LCAoY3RybCkgPT4gY3RybC5zdG9wKC4uLmFyZ3VtZW50cykpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBTcHJpbmdSZWYyLnVwZGF0ZSA9IGZ1bmN0aW9uKHByb3BzKSB7XG4gICAgZWFjaDQoY3VycmVudCwgKGN0cmwsIGkpID0+IGN0cmwudXBkYXRlKHRoaXMuX2dldFByb3BzKHByb3BzLCBjdHJsLCBpKSkpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICBjb25zdCBfZ2V0UHJvcHMgPSBmdW5jdGlvbihhcmcsIGN0cmwsIGluZGV4KSB7XG4gICAgcmV0dXJuIGlzNy5mdW4oYXJnKSA/IGFyZyhpbmRleCwgY3RybCkgOiBhcmc7XG4gIH07XG4gIFNwcmluZ1JlZjIuX2dldFByb3BzID0gX2dldFByb3BzO1xuICByZXR1cm4gU3ByaW5nUmVmMjtcbn07XG5cbi8vIHNyYy9ob29rcy91c2VTcHJpbmdzLnRzXG5mdW5jdGlvbiB1c2VTcHJpbmdzKGxlbmd0aCwgcHJvcHMsIGRlcHMpIHtcbiAgY29uc3QgcHJvcHNGbiA9IGlzOC5mdW4ocHJvcHMpICYmIHByb3BzO1xuICBpZiAocHJvcHNGbiAmJiAhZGVwcylcbiAgICBkZXBzID0gW107XG4gIGNvbnN0IHJlZiA9IHVzZU1lbW8oXG4gICAgKCkgPT4gcHJvcHNGbiB8fCBhcmd1bWVudHMubGVuZ3RoID09IDMgPyBTcHJpbmdSZWYoKSA6IHZvaWQgMCxcbiAgICBbXVxuICApO1xuICBjb25zdCBsYXlvdXRJZCA9IHVzZVJlZigwKTtcbiAgY29uc3QgZm9yY2VVcGRhdGUgPSB1c2VGb3JjZVVwZGF0ZSgpO1xuICBjb25zdCBzdGF0ZSA9IHVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIGN0cmxzOiBbXSxcbiAgICAgIHF1ZXVlOiBbXSxcbiAgICAgIGZsdXNoKGN0cmwsIHVwZGF0ZXMyKSB7XG4gICAgICAgIGNvbnN0IHNwcmluZ3MyID0gZ2V0U3ByaW5ncyhjdHJsLCB1cGRhdGVzMik7XG4gICAgICAgIGNvbnN0IGNhbkZsdXNoU3luYyA9IGxheW91dElkLmN1cnJlbnQgPiAwICYmICFzdGF0ZS5xdWV1ZS5sZW5ndGggJiYgIU9iamVjdC5rZXlzKHNwcmluZ3MyKS5zb21lKChrZXkpID0+ICFjdHJsLnNwcmluZ3Nba2V5XSk7XG4gICAgICAgIHJldHVybiBjYW5GbHVzaFN5bmMgPyBmbHVzaFVwZGF0ZVF1ZXVlKGN0cmwsIHVwZGF0ZXMyKSA6IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgc2V0U3ByaW5ncyhjdHJsLCBzcHJpbmdzMik7XG4gICAgICAgICAgc3RhdGUucXVldWUucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKGZsdXNoVXBkYXRlUXVldWUoY3RybCwgdXBkYXRlczIpKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KSxcbiAgICBbXVxuICApO1xuICBjb25zdCBjdHJscyA9IHVzZVJlZihbLi4uc3RhdGUuY3RybHNdKTtcbiAgY29uc3QgdXBkYXRlcyA9IFtdO1xuICBjb25zdCBwcmV2TGVuZ3RoID0gdXNlUHJldihsZW5ndGgpIHx8IDA7XG4gIHVzZU1lbW8oKCkgPT4ge1xuICAgIGVhY2g1KGN0cmxzLmN1cnJlbnQuc2xpY2UobGVuZ3RoLCBwcmV2TGVuZ3RoKSwgKGN0cmwpID0+IHtcbiAgICAgIGRldGFjaFJlZnMoY3RybCwgcmVmKTtcbiAgICAgIGN0cmwuc3RvcCh0cnVlKTtcbiAgICB9KTtcbiAgICBjdHJscy5jdXJyZW50Lmxlbmd0aCA9IGxlbmd0aDtcbiAgICBkZWNsYXJlVXBkYXRlcyhwcmV2TGVuZ3RoLCBsZW5ndGgpO1xuICB9LCBbbGVuZ3RoXSk7XG4gIHVzZU1lbW8oKCkgPT4ge1xuICAgIGRlY2xhcmVVcGRhdGVzKDAsIE1hdGgubWluKHByZXZMZW5ndGgsIGxlbmd0aCkpO1xuICB9LCBkZXBzKTtcbiAgZnVuY3Rpb24gZGVjbGFyZVVwZGF0ZXMoc3RhcnRJbmRleCwgZW5kSW5kZXgpIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnRJbmRleDsgaSA8IGVuZEluZGV4OyBpKyspIHtcbiAgICAgIGNvbnN0IGN0cmwgPSBjdHJscy5jdXJyZW50W2ldIHx8IChjdHJscy5jdXJyZW50W2ldID0gbmV3IENvbnRyb2xsZXIobnVsbCwgc3RhdGUuZmx1c2gpKTtcbiAgICAgIGNvbnN0IHVwZGF0ZTIgPSBwcm9wc0ZuID8gcHJvcHNGbihpLCBjdHJsKSA6IHByb3BzW2ldO1xuICAgICAgaWYgKHVwZGF0ZTIpIHtcbiAgICAgICAgdXBkYXRlc1tpXSA9IGRlY2xhcmVVcGRhdGUodXBkYXRlMik7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbnN0IHNwcmluZ3MgPSBjdHJscy5jdXJyZW50Lm1hcCgoY3RybCwgaSkgPT4gZ2V0U3ByaW5ncyhjdHJsLCB1cGRhdGVzW2ldKSk7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0MihTcHJpbmdDb250ZXh0KTtcbiAgY29uc3QgcHJldkNvbnRleHQgPSB1c2VQcmV2KGNvbnRleHQpO1xuICBjb25zdCBoYXNDb250ZXh0ID0gY29udGV4dCAhPT0gcHJldkNvbnRleHQgJiYgaGFzUHJvcHMoY29udGV4dCk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QyKCgpID0+IHtcbiAgICBsYXlvdXRJZC5jdXJyZW50Kys7XG4gICAgc3RhdGUuY3RybHMgPSBjdHJscy5jdXJyZW50O1xuICAgIGNvbnN0IHsgcXVldWUgfSA9IHN0YXRlO1xuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLnF1ZXVlID0gW107XG4gICAgICBlYWNoNShxdWV1ZSwgKGNiKSA9PiBjYigpKTtcbiAgICB9XG4gICAgZWFjaDUoY3RybHMuY3VycmVudCwgKGN0cmwsIGkpID0+IHtcbiAgICAgIHJlZj8uYWRkKGN0cmwpO1xuICAgICAgaWYgKGhhc0NvbnRleHQpIHtcbiAgICAgICAgY3RybC5zdGFydCh7IGRlZmF1bHQ6IGNvbnRleHQgfSk7XG4gICAgICB9XG4gICAgICBjb25zdCB1cGRhdGUyID0gdXBkYXRlc1tpXTtcbiAgICAgIGlmICh1cGRhdGUyKSB7XG4gICAgICAgIHJlcGxhY2VSZWYoY3RybCwgdXBkYXRlMi5yZWYpO1xuICAgICAgICBpZiAoY3RybC5yZWYpIHtcbiAgICAgICAgICBjdHJsLnF1ZXVlLnB1c2godXBkYXRlMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3RybC5zdGFydCh1cGRhdGUyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbiAgdXNlT25jZSgoKSA9PiAoKSA9PiB7XG4gICAgZWFjaDUoc3RhdGUuY3RybHMsIChjdHJsKSA9PiBjdHJsLnN0b3AodHJ1ZSkpO1xuICB9KTtcbiAgY29uc3QgdmFsdWVzID0gc3ByaW5ncy5tYXAoKHgpID0+ICh7IC4uLnggfSkpO1xuICByZXR1cm4gcmVmID8gW3ZhbHVlcywgcmVmXSA6IHZhbHVlcztcbn1cblxuLy8gc3JjL2hvb2tzL3VzZVNwcmluZy50c1xuZnVuY3Rpb24gdXNlU3ByaW5nKHByb3BzLCBkZXBzKSB7XG4gIGNvbnN0IGlzRm4gPSBpczkuZnVuKHByb3BzKTtcbiAgY29uc3QgW1t2YWx1ZXNdLCByZWZdID0gdXNlU3ByaW5ncyhcbiAgICAxLFxuICAgIGlzRm4gPyBwcm9wcyA6IFtwcm9wc10sXG4gICAgaXNGbiA/IGRlcHMgfHwgW10gOiBkZXBzXG4gICk7XG4gIHJldHVybiBpc0ZuIHx8IGFyZ3VtZW50cy5sZW5ndGggPT0gMiA/IFt2YWx1ZXMsIHJlZl0gOiB2YWx1ZXM7XG59XG5cbi8vIHNyYy9ob29rcy91c2VTcHJpbmdSZWYudHNcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG52YXIgaW5pdFNwcmluZ1JlZiA9ICgpID0+IFNwcmluZ1JlZigpO1xudmFyIHVzZVNwcmluZ1JlZiA9ICgpID0+IHVzZVN0YXRlKGluaXRTcHJpbmdSZWYpWzBdO1xuXG4vLyBzcmMvaG9va3MvdXNlU3ByaW5nVmFsdWUudHNcbmltcG9ydCB7IHVzZUNvbnN0YW50LCB1c2VPbmNlIGFzIHVzZU9uY2UyIH0gZnJvbSBcIkByZWFjdC1zcHJpbmcvc2hhcmVkXCI7XG52YXIgdXNlU3ByaW5nVmFsdWUgPSAoaW5pdGlhbCwgcHJvcHMpID0+IHtcbiAgY29uc3Qgc3ByaW5nVmFsdWUgPSB1c2VDb25zdGFudCgoKSA9PiBuZXcgU3ByaW5nVmFsdWUoaW5pdGlhbCwgcHJvcHMpKTtcbiAgdXNlT25jZTIoKCkgPT4gKCkgPT4ge1xuICAgIHNwcmluZ1ZhbHVlLnN0b3AoKTtcbiAgfSk7XG4gIHJldHVybiBzcHJpbmdWYWx1ZTtcbn07XG5cbi8vIHNyYy9ob29rcy91c2VUcmFpbC50c1xuaW1wb3J0IHsgZWFjaCBhcyBlYWNoNiwgaXMgYXMgaXMxMCwgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCBhcyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0MyB9IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuZnVuY3Rpb24gdXNlVHJhaWwobGVuZ3RoLCBwcm9wc0FyZywgZGVwcykge1xuICBjb25zdCBwcm9wc0ZuID0gaXMxMC5mdW4ocHJvcHNBcmcpICYmIHByb3BzQXJnO1xuICBpZiAocHJvcHNGbiAmJiAhZGVwcylcbiAgICBkZXBzID0gW107XG4gIGxldCByZXZlcnNlID0gdHJ1ZTtcbiAgbGV0IHBhc3NlZFJlZiA9IHZvaWQgMDtcbiAgY29uc3QgcmVzdWx0ID0gdXNlU3ByaW5ncyhcbiAgICBsZW5ndGgsXG4gICAgKGksIGN0cmwpID0+IHtcbiAgICAgIGNvbnN0IHByb3BzID0gcHJvcHNGbiA/IHByb3BzRm4oaSwgY3RybCkgOiBwcm9wc0FyZztcbiAgICAgIHBhc3NlZFJlZiA9IHByb3BzLnJlZjtcbiAgICAgIHJldmVyc2UgPSByZXZlcnNlICYmIHByb3BzLnJldmVyc2U7XG4gICAgICByZXR1cm4gcHJvcHM7XG4gICAgfSxcbiAgICAvLyBFbnN1cmUgdGhlIHByb3BzIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aGVuIG5vIGRlcHMgZXhpc3QuXG4gICAgLy8gVGhpcyB3b3JrcyBhcm91bmQgdGhlIDMgYXJndW1lbnQgcnVsZS5cbiAgICBkZXBzIHx8IFt7fV1cbiAgKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDMoKCkgPT4ge1xuICAgIGVhY2g2KHJlc3VsdFsxXS5jdXJyZW50LCAoY3RybCwgaSkgPT4ge1xuICAgICAgY29uc3QgcGFyZW50ID0gcmVzdWx0WzFdLmN1cnJlbnRbaSArIChyZXZlcnNlID8gMSA6IC0xKV07XG4gICAgICByZXBsYWNlUmVmKGN0cmwsIHBhc3NlZFJlZik7XG4gICAgICBpZiAoY3RybC5yZWYpIHtcbiAgICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICAgIGN0cmwudXBkYXRlKHsgdG86IHBhcmVudC5zcHJpbmdzIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgY3RybC5zdGFydCh7IHRvOiBwYXJlbnQuc3ByaW5ncyB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN0cmwuc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSwgZGVwcyk7XG4gIGlmIChwcm9wc0ZuIHx8IGFyZ3VtZW50cy5sZW5ndGggPT0gMykge1xuICAgIGNvbnN0IHJlZiA9IHBhc3NlZFJlZiA/PyByZXN1bHRbMV07XG4gICAgcmVmW1wiX2dldFByb3BzXCJdID0gKHByb3BzQXJnMiwgY3RybCwgaSkgPT4ge1xuICAgICAgY29uc3QgcHJvcHMgPSBpczEwLmZ1bihwcm9wc0FyZzIpID8gcHJvcHNBcmcyKGksIGN0cmwpIDogcHJvcHNBcmcyO1xuICAgICAgaWYgKHByb3BzKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudCA9IHJlZi5jdXJyZW50W2kgKyAocHJvcHMucmV2ZXJzZSA/IDEgOiAtMSldO1xuICAgICAgICBpZiAocGFyZW50KVxuICAgICAgICAgIHByb3BzLnRvID0gcGFyZW50LnNwcmluZ3M7XG4gICAgICAgIHJldHVybiBwcm9wcztcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdFswXTtcbn1cblxuLy8gc3JjL2hvb2tzL3VzZVRyYW5zaXRpb24udHN4XG5pbXBvcnQgKiBhcyBSZWFjdDIgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VDb250ZXh0IGFzIHVzZUNvbnRleHQzLCB1c2VSZWYgYXMgdXNlUmVmMiwgdXNlTWVtbyBhcyB1c2VNZW1vMiB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHtcbiAgaXMgYXMgaXMxMSxcbiAgdG9BcnJheSBhcyB0b0FycmF5NCxcbiAgdXNlRm9yY2VVcGRhdGUgYXMgdXNlRm9yY2VVcGRhdGUyLFxuICB1c2VPbmNlIGFzIHVzZU9uY2UzLFxuICB1c2VQcmV2IGFzIHVzZVByZXYyLFxuICBlYWNoIGFzIGVhY2g3LFxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IGFzIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q0XG59IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuZnVuY3Rpb24gdXNlVHJhbnNpdGlvbihkYXRhLCBwcm9wcywgZGVwcykge1xuICBjb25zdCBwcm9wc0ZuID0gaXMxMS5mdW4ocHJvcHMpICYmIHByb3BzO1xuICBjb25zdCB7XG4gICAgcmVzZXQsXG4gICAgc29ydCxcbiAgICB0cmFpbCA9IDAsXG4gICAgZXhwaXJlcyA9IHRydWUsXG4gICAgZXhpdEJlZm9yZUVudGVyID0gZmFsc2UsXG4gICAgb25EZXN0cm95ZWQsXG4gICAgcmVmOiBwcm9wc1JlZixcbiAgICBjb25maWc6IHByb3BzQ29uZmlnXG4gIH0gPSBwcm9wc0ZuID8gcHJvcHNGbigpIDogcHJvcHM7XG4gIGNvbnN0IHJlZiA9IHVzZU1lbW8yKFxuICAgICgpID0+IHByb3BzRm4gfHwgYXJndW1lbnRzLmxlbmd0aCA9PSAzID8gU3ByaW5nUmVmKCkgOiB2b2lkIDAsXG4gICAgW11cbiAgKTtcbiAgY29uc3QgaXRlbXMgPSB0b0FycmF5NChkYXRhKTtcbiAgY29uc3QgdHJhbnNpdGlvbnMgPSBbXTtcbiAgY29uc3QgdXNlZFRyYW5zaXRpb25zID0gdXNlUmVmMihudWxsKTtcbiAgY29uc3QgcHJldlRyYW5zaXRpb25zID0gcmVzZXQgPyBudWxsIDogdXNlZFRyYW5zaXRpb25zLmN1cnJlbnQ7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q0KCgpID0+IHtcbiAgICB1c2VkVHJhbnNpdGlvbnMuY3VycmVudCA9IHRyYW5zaXRpb25zO1xuICB9KTtcbiAgdXNlT25jZTMoKCkgPT4ge1xuICAgIGVhY2g3KHRyYW5zaXRpb25zLCAodCkgPT4ge1xuICAgICAgcmVmPy5hZGQodC5jdHJsKTtcbiAgICAgIHQuY3RybC5yZWYgPSByZWY7XG4gICAgfSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGVhY2g3KHVzZWRUcmFuc2l0aW9ucy5jdXJyZW50LCAodCkgPT4ge1xuICAgICAgICBpZiAodC5leHBpcmVkKSB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHQuZXhwaXJhdGlvbklkKTtcbiAgICAgICAgfVxuICAgICAgICBkZXRhY2hSZWZzKHQuY3RybCwgcmVmKTtcbiAgICAgICAgdC5jdHJsLnN0b3AodHJ1ZSk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9KTtcbiAgY29uc3Qga2V5cyA9IGdldEtleXMoaXRlbXMsIHByb3BzRm4gPyBwcm9wc0ZuKCkgOiBwcm9wcywgcHJldlRyYW5zaXRpb25zKTtcbiAgY29uc3QgZXhwaXJlZCA9IHJlc2V0ICYmIHVzZWRUcmFuc2l0aW9ucy5jdXJyZW50IHx8IFtdO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0NChcbiAgICAoKSA9PiBlYWNoNyhleHBpcmVkLCAoeyBjdHJsLCBpdGVtLCBrZXkgfSkgPT4ge1xuICAgICAgZGV0YWNoUmVmcyhjdHJsLCByZWYpO1xuICAgICAgY2FsbFByb3Aob25EZXN0cm95ZWQsIGl0ZW0sIGtleSk7XG4gICAgfSlcbiAgKTtcbiAgY29uc3QgcmV1c2VkID0gW107XG4gIGlmIChwcmV2VHJhbnNpdGlvbnMpXG4gICAgZWFjaDcocHJldlRyYW5zaXRpb25zLCAodCwgaSkgPT4ge1xuICAgICAgaWYgKHQuZXhwaXJlZCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodC5leHBpcmF0aW9uSWQpO1xuICAgICAgICBleHBpcmVkLnB1c2godCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpID0gcmV1c2VkW2ldID0ga2V5cy5pbmRleE9mKHQua2V5KTtcbiAgICAgICAgaWYgKH5pKVxuICAgICAgICAgIHRyYW5zaXRpb25zW2ldID0gdDtcbiAgICAgIH1cbiAgICB9KTtcbiAgZWFjaDcoaXRlbXMsIChpdGVtLCBpKSA9PiB7XG4gICAgaWYgKCF0cmFuc2l0aW9uc1tpXSkge1xuICAgICAgdHJhbnNpdGlvbnNbaV0gPSB7XG4gICAgICAgIGtleToga2V5c1tpXSxcbiAgICAgICAgaXRlbSxcbiAgICAgICAgcGhhc2U6IFwibW91bnRcIiAvKiBNT1VOVCAqLyxcbiAgICAgICAgY3RybDogbmV3IENvbnRyb2xsZXIoKVxuICAgICAgfTtcbiAgICAgIHRyYW5zaXRpb25zW2ldLmN0cmwuaXRlbSA9IGl0ZW07XG4gICAgfVxuICB9KTtcbiAgaWYgKHJldXNlZC5sZW5ndGgpIHtcbiAgICBsZXQgaSA9IC0xO1xuICAgIGNvbnN0IHsgbGVhdmUgfSA9IHByb3BzRm4gPyBwcm9wc0ZuKCkgOiBwcm9wcztcbiAgICBlYWNoNyhyZXVzZWQsIChrZXlJbmRleCwgcHJldkluZGV4KSA9PiB7XG4gICAgICBjb25zdCB0ID0gcHJldlRyYW5zaXRpb25zW3ByZXZJbmRleF07XG4gICAgICBpZiAofmtleUluZGV4KSB7XG4gICAgICAgIGkgPSB0cmFuc2l0aW9ucy5pbmRleE9mKHQpO1xuICAgICAgICB0cmFuc2l0aW9uc1tpXSA9IHsgLi4udCwgaXRlbTogaXRlbXNba2V5SW5kZXhdIH07XG4gICAgICB9IGVsc2UgaWYgKGxlYXZlKSB7XG4gICAgICAgIHRyYW5zaXRpb25zLnNwbGljZSgrK2ksIDAsIHQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGlmIChpczExLmZ1bihzb3J0KSkge1xuICAgIHRyYW5zaXRpb25zLnNvcnQoKGEsIGIpID0+IHNvcnQoYS5pdGVtLCBiLml0ZW0pKTtcbiAgfVxuICBsZXQgZGVsYXkgPSAtdHJhaWw7XG4gIGNvbnN0IGZvcmNlVXBkYXRlID0gdXNlRm9yY2VVcGRhdGUyKCk7XG4gIGNvbnN0IGRlZmF1bHRQcm9wcyA9IGdldERlZmF1bHRQcm9wcyhwcm9wcyk7XG4gIGNvbnN0IGNoYW5nZXMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBjb25zdCBleGl0aW5nVHJhbnNpdGlvbnMgPSB1c2VSZWYyKC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCkpO1xuICBjb25zdCBmb3JjZUNoYW5nZSA9IHVzZVJlZjIoZmFsc2UpO1xuICBlYWNoNyh0cmFuc2l0aW9ucywgKHQsIGkpID0+IHtcbiAgICBjb25zdCBrZXkgPSB0LmtleTtcbiAgICBjb25zdCBwcmV2UGhhc2UgPSB0LnBoYXNlO1xuICAgIGNvbnN0IHAgPSBwcm9wc0ZuID8gcHJvcHNGbigpIDogcHJvcHM7XG4gICAgbGV0IHRvMjtcbiAgICBsZXQgcGhhc2U7XG4gICAgY29uc3QgcHJvcHNEZWxheSA9IGNhbGxQcm9wKHAuZGVsYXkgfHwgMCwga2V5KTtcbiAgICBpZiAocHJldlBoYXNlID09IFwibW91bnRcIiAvKiBNT1VOVCAqLykge1xuICAgICAgdG8yID0gcC5lbnRlcjtcbiAgICAgIHBoYXNlID0gXCJlbnRlclwiIC8qIEVOVEVSICovO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpc0xlYXZlID0ga2V5cy5pbmRleE9mKGtleSkgPCAwO1xuICAgICAgaWYgKHByZXZQaGFzZSAhPSBcImxlYXZlXCIgLyogTEVBVkUgKi8pIHtcbiAgICAgICAgaWYgKGlzTGVhdmUpIHtcbiAgICAgICAgICB0bzIgPSBwLmxlYXZlO1xuICAgICAgICAgIHBoYXNlID0gXCJsZWF2ZVwiIC8qIExFQVZFICovO1xuICAgICAgICB9IGVsc2UgaWYgKHRvMiA9IHAudXBkYXRlKSB7XG4gICAgICAgICAgcGhhc2UgPSBcInVwZGF0ZVwiIC8qIFVQREFURSAqLztcbiAgICAgICAgfSBlbHNlXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIGlmICghaXNMZWF2ZSkge1xuICAgICAgICB0bzIgPSBwLmVudGVyO1xuICAgICAgICBwaGFzZSA9IFwiZW50ZXJcIiAvKiBFTlRFUiAqLztcbiAgICAgIH0gZWxzZVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRvMiA9IGNhbGxQcm9wKHRvMiwgdC5pdGVtLCBpKTtcbiAgICB0bzIgPSBpczExLm9iaih0bzIpID8gaW5mZXJUbyh0bzIpIDogeyB0bzogdG8yIH07XG4gICAgaWYgKCF0bzIuY29uZmlnKSB7XG4gICAgICBjb25zdCBjb25maWcyID0gcHJvcHNDb25maWcgfHwgZGVmYXVsdFByb3BzLmNvbmZpZztcbiAgICAgIHRvMi5jb25maWcgPSBjYWxsUHJvcChjb25maWcyLCB0Lml0ZW0sIGksIHBoYXNlKTtcbiAgICB9XG4gICAgZGVsYXkgKz0gdHJhaWw7XG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIC4uLmRlZmF1bHRQcm9wcyxcbiAgICAgIC8vIHdlIG5lZWQgdG8gYWRkIG91ciBwcm9wcy5kZWxheSB2YWx1ZSB5b3UgaGVyZS5cbiAgICAgIGRlbGF5OiBwcm9wc0RlbGF5ICsgZGVsYXksXG4gICAgICByZWY6IHByb3BzUmVmLFxuICAgICAgaW1tZWRpYXRlOiBwLmltbWVkaWF0ZSxcbiAgICAgIC8vIFRoaXMgcHJldmVudHMgaW1wbGllZCByZXNldHMuXG4gICAgICByZXNldDogZmFsc2UsXG4gICAgICAvLyBNZXJnZSBhbnkgcGhhc2Utc3BlY2lmaWMgcHJvcHMuXG4gICAgICAuLi50bzJcbiAgICB9O1xuICAgIGlmIChwaGFzZSA9PSBcImVudGVyXCIgLyogRU5URVIgKi8gJiYgaXMxMS51bmQocGF5bG9hZC5mcm9tKSkge1xuICAgICAgY29uc3QgcDIgPSBwcm9wc0ZuID8gcHJvcHNGbigpIDogcHJvcHM7XG4gICAgICBjb25zdCBmcm9tID0gaXMxMS51bmQocDIuaW5pdGlhbCkgfHwgcHJldlRyYW5zaXRpb25zID8gcDIuZnJvbSA6IHAyLmluaXRpYWw7XG4gICAgICBwYXlsb2FkLmZyb20gPSBjYWxsUHJvcChmcm9tLCB0Lml0ZW0sIGkpO1xuICAgIH1cbiAgICBjb25zdCB7IG9uUmVzb2x2ZSB9ID0gcGF5bG9hZDtcbiAgICBwYXlsb2FkLm9uUmVzb2x2ZSA9IChyZXN1bHQpID0+IHtcbiAgICAgIGNhbGxQcm9wKG9uUmVzb2x2ZSwgcmVzdWx0KTtcbiAgICAgIGNvbnN0IHRyYW5zaXRpb25zMiA9IHVzZWRUcmFuc2l0aW9ucy5jdXJyZW50O1xuICAgICAgY29uc3QgdDIgPSB0cmFuc2l0aW9uczIuZmluZCgodDMpID0+IHQzLmtleSA9PT0ga2V5KTtcbiAgICAgIGlmICghdDIpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGlmIChyZXN1bHQuY2FuY2VsbGVkICYmIHQyLnBoYXNlICE9IFwidXBkYXRlXCIgLyogVVBEQVRFICovKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmICh0Mi5jdHJsLmlkbGUpIHtcbiAgICAgICAgY29uc3QgaWRsZSA9IHRyYW5zaXRpb25zMi5ldmVyeSgodDMpID0+IHQzLmN0cmwuaWRsZSk7XG4gICAgICAgIGlmICh0Mi5waGFzZSA9PSBcImxlYXZlXCIgLyogTEVBVkUgKi8pIHtcbiAgICAgICAgICBjb25zdCBleHBpcnkgPSBjYWxsUHJvcChleHBpcmVzLCB0Mi5pdGVtKTtcbiAgICAgICAgICBpZiAoZXhwaXJ5ICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgY29uc3QgZXhwaXJ5TXMgPSBleHBpcnkgPT09IHRydWUgPyAwIDogZXhwaXJ5O1xuICAgICAgICAgICAgdDIuZXhwaXJlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoIWlkbGUgJiYgZXhwaXJ5TXMgPiAwKSB7XG4gICAgICAgICAgICAgIGlmIChleHBpcnlNcyA8PSAyMTQ3NDgzNjQ3KVxuICAgICAgICAgICAgICAgIHQyLmV4cGlyYXRpb25JZCA9IHNldFRpbWVvdXQoZm9yY2VVcGRhdGUsIGV4cGlyeU1zKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaWRsZSAmJiB0cmFuc2l0aW9uczIuc29tZSgodDMpID0+IHQzLmV4cGlyZWQpKSB7XG4gICAgICAgICAgZXhpdGluZ1RyYW5zaXRpb25zLmN1cnJlbnQuZGVsZXRlKHQyKTtcbiAgICAgICAgICBpZiAoZXhpdEJlZm9yZUVudGVyKSB7XG4gICAgICAgICAgICBmb3JjZUNoYW5nZS5jdXJyZW50ID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgY29uc3Qgc3ByaW5ncyA9IGdldFNwcmluZ3ModC5jdHJsLCBwYXlsb2FkKTtcbiAgICBpZiAocGhhc2UgPT09IFwibGVhdmVcIiAvKiBMRUFWRSAqLyAmJiBleGl0QmVmb3JlRW50ZXIpIHtcbiAgICAgIGV4aXRpbmdUcmFuc2l0aW9ucy5jdXJyZW50LnNldCh0LCB7IHBoYXNlLCBzcHJpbmdzLCBwYXlsb2FkIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjaGFuZ2VzLnNldCh0LCB7IHBoYXNlLCBzcHJpbmdzLCBwYXlsb2FkIH0pO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0MyhTcHJpbmdDb250ZXh0KTtcbiAgY29uc3QgcHJldkNvbnRleHQgPSB1c2VQcmV2Mihjb250ZXh0KTtcbiAgY29uc3QgaGFzQ29udGV4dCA9IGNvbnRleHQgIT09IHByZXZDb250ZXh0ICYmIGhhc1Byb3BzKGNvbnRleHQpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0NCgoKSA9PiB7XG4gICAgaWYgKGhhc0NvbnRleHQpIHtcbiAgICAgIGVhY2g3KHRyYW5zaXRpb25zLCAodCkgPT4ge1xuICAgICAgICB0LmN0cmwuc3RhcnQoeyBkZWZhdWx0OiBjb250ZXh0IH0pO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCBbY29udGV4dF0pO1xuICBlYWNoNyhjaGFuZ2VzLCAoXywgdCkgPT4ge1xuICAgIGlmIChleGl0aW5nVHJhbnNpdGlvbnMuY3VycmVudC5zaXplKSB7XG4gICAgICBjb25zdCBpbmQgPSB0cmFuc2l0aW9ucy5maW5kSW5kZXgoKHN0YXRlKSA9PiBzdGF0ZS5rZXkgPT09IHQua2V5KTtcbiAgICAgIHRyYW5zaXRpb25zLnNwbGljZShpbmQsIDEpO1xuICAgIH1cbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q0KFxuICAgICgpID0+IHtcbiAgICAgIGVhY2g3KFxuICAgICAgICBleGl0aW5nVHJhbnNpdGlvbnMuY3VycmVudC5zaXplID8gZXhpdGluZ1RyYW5zaXRpb25zLmN1cnJlbnQgOiBjaGFuZ2VzLFxuICAgICAgICAoeyBwaGFzZSwgcGF5bG9hZCB9LCB0KSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBjdHJsIH0gPSB0O1xuICAgICAgICAgIHQucGhhc2UgPSBwaGFzZTtcbiAgICAgICAgICByZWY/LmFkZChjdHJsKTtcbiAgICAgICAgICBpZiAoaGFzQ29udGV4dCAmJiBwaGFzZSA9PSBcImVudGVyXCIgLyogRU5URVIgKi8pIHtcbiAgICAgICAgICAgIGN0cmwuc3RhcnQoeyBkZWZhdWx0OiBjb250ZXh0IH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGF5bG9hZCkge1xuICAgICAgICAgICAgcmVwbGFjZVJlZihjdHJsLCBwYXlsb2FkLnJlZik7XG4gICAgICAgICAgICBpZiAoKGN0cmwucmVmIHx8IHJlZikgJiYgIWZvcmNlQ2hhbmdlLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgY3RybC51cGRhdGUocGF5bG9hZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjdHJsLnN0YXJ0KHBheWxvYWQpO1xuICAgICAgICAgICAgICBpZiAoZm9yY2VDaGFuZ2UuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGZvcmNlQ2hhbmdlLmN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9LFxuICAgIHJlc2V0ID8gdm9pZCAwIDogZGVwc1xuICApO1xuICBjb25zdCByZW5kZXJUcmFuc2l0aW9ucyA9IChyZW5kZXIpID0+IC8qIEBfX1BVUkVfXyAqLyBSZWFjdDIuY3JlYXRlRWxlbWVudChSZWFjdDIuRnJhZ21lbnQsIG51bGwsIHRyYW5zaXRpb25zLm1hcCgodCwgaSkgPT4ge1xuICAgIGNvbnN0IHsgc3ByaW5ncyB9ID0gY2hhbmdlcy5nZXQodCkgfHwgdC5jdHJsO1xuICAgIGNvbnN0IGVsZW0gPSByZW5kZXIoeyAuLi5zcHJpbmdzIH0sIHQuaXRlbSwgdCwgaSk7XG4gICAgcmV0dXJuIGVsZW0gJiYgZWxlbS50eXBlID8gLyogQF9fUFVSRV9fICovIFJlYWN0Mi5jcmVhdGVFbGVtZW50KFxuICAgICAgZWxlbS50eXBlLFxuICAgICAge1xuICAgICAgICAuLi5lbGVtLnByb3BzLFxuICAgICAgICBrZXk6IGlzMTEuc3RyKHQua2V5KSB8fCBpczExLm51bSh0LmtleSkgPyB0LmtleSA6IHQuY3RybC5pZCxcbiAgICAgICAgcmVmOiBlbGVtLnJlZlxuICAgICAgfVxuICAgICkgOiBlbGVtO1xuICB9KSk7XG4gIHJldHVybiByZWYgPyBbcmVuZGVyVHJhbnNpdGlvbnMsIHJlZl0gOiByZW5kZXJUcmFuc2l0aW9ucztcbn1cbnZhciBuZXh0S2V5ID0gMTtcbmZ1bmN0aW9uIGdldEtleXMoaXRlbXMsIHsga2V5LCBrZXlzID0ga2V5IH0sIHByZXZUcmFuc2l0aW9ucykge1xuICBpZiAoa2V5cyA9PT0gbnVsbCkge1xuICAgIGNvbnN0IHJldXNlZCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgcmV0dXJuIGl0ZW1zLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgY29uc3QgdCA9IHByZXZUcmFuc2l0aW9ucyAmJiBwcmV2VHJhbnNpdGlvbnMuZmluZChcbiAgICAgICAgKHQyKSA9PiB0Mi5pdGVtID09PSBpdGVtICYmIHQyLnBoYXNlICE9PSBcImxlYXZlXCIgLyogTEVBVkUgKi8gJiYgIXJldXNlZC5oYXModDIpXG4gICAgICApO1xuICAgICAgaWYgKHQpIHtcbiAgICAgICAgcmV1c2VkLmFkZCh0KTtcbiAgICAgICAgcmV0dXJuIHQua2V5O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5leHRLZXkrKztcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaXMxMS51bmQoa2V5cykgPyBpdGVtcyA6IGlzMTEuZnVuKGtleXMpID8gaXRlbXMubWFwKGtleXMpIDogdG9BcnJheTQoa2V5cyk7XG59XG5cbi8vIHNyYy9ob29rcy91c2VTY3JvbGwudHNcbmltcG9ydCB7IGVhY2ggYXMgZWFjaDgsIG9uU2Nyb2xsLCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IGFzIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q1IH0gZnJvbSBcIkByZWFjdC1zcHJpbmcvc2hhcmVkXCI7XG52YXIgdXNlU2Nyb2xsID0gKHtcbiAgY29udGFpbmVyLFxuICAuLi5zcHJpbmdPcHRpb25zXG59ID0ge30pID0+IHtcbiAgY29uc3QgW3Njcm9sbFZhbHVlcywgYXBpXSA9IHVzZVNwcmluZyhcbiAgICAoKSA9PiAoe1xuICAgICAgc2Nyb2xsWDogMCxcbiAgICAgIHNjcm9sbFk6IDAsXG4gICAgICBzY3JvbGxYUHJvZ3Jlc3M6IDAsXG4gICAgICBzY3JvbGxZUHJvZ3Jlc3M6IDAsXG4gICAgICAuLi5zcHJpbmdPcHRpb25zXG4gICAgfSksXG4gICAgW11cbiAgKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDUoKCkgPT4ge1xuICAgIGNvbnN0IGNsZWFudXBTY3JvbGwgPSBvblNjcm9sbChcbiAgICAgICh7IHgsIHkgfSkgPT4ge1xuICAgICAgICBhcGkuc3RhcnQoe1xuICAgICAgICAgIHNjcm9sbFg6IHguY3VycmVudCxcbiAgICAgICAgICBzY3JvbGxYUHJvZ3Jlc3M6IHgucHJvZ3Jlc3MsXG4gICAgICAgICAgc2Nyb2xsWTogeS5jdXJyZW50LFxuICAgICAgICAgIHNjcm9sbFlQcm9ncmVzczogeS5wcm9ncmVzc1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICB7IGNvbnRhaW5lcjogY29udGFpbmVyPy5jdXJyZW50IHx8IHZvaWQgMCB9XG4gICAgKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZWFjaDgoT2JqZWN0LnZhbHVlcyhzY3JvbGxWYWx1ZXMpLCAodmFsdWUpID0+IHZhbHVlLnN0b3AoKSk7XG4gICAgICBjbGVhbnVwU2Nyb2xsKCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gc2Nyb2xsVmFsdWVzO1xufTtcblxuLy8gc3JjL2hvb2tzL3VzZVJlc2l6ZS50c1xuaW1wb3J0IHsgb25SZXNpemUsIGVhY2ggYXMgZWFjaDksIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgYXMgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDYgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcbnZhciB1c2VSZXNpemUgPSAoe1xuICBjb250YWluZXIsXG4gIC4uLnNwcmluZ09wdGlvbnNcbn0pID0+IHtcbiAgY29uc3QgW3NpemVWYWx1ZXMsIGFwaV0gPSB1c2VTcHJpbmcoXG4gICAgKCkgPT4gKHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwLFxuICAgICAgLi4uc3ByaW5nT3B0aW9uc1xuICAgIH0pLFxuICAgIFtdXG4gICk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q2KCgpID0+IHtcbiAgICBjb25zdCBjbGVhbnVwU2Nyb2xsID0gb25SZXNpemUoXG4gICAgICAoeyB3aWR0aCwgaGVpZ2h0IH0pID0+IHtcbiAgICAgICAgYXBpLnN0YXJ0KHtcbiAgICAgICAgICB3aWR0aCxcbiAgICAgICAgICBoZWlnaHQsXG4gICAgICAgICAgaW1tZWRpYXRlOiBzaXplVmFsdWVzLndpZHRoLmdldCgpID09PSAwIHx8IHNpemVWYWx1ZXMuaGVpZ2h0LmdldCgpID09PSAwXG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIHsgY29udGFpbmVyOiBjb250YWluZXI/LmN1cnJlbnQgfHwgdm9pZCAwIH1cbiAgICApO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBlYWNoOShPYmplY3QudmFsdWVzKHNpemVWYWx1ZXMpLCAodmFsdWUpID0+IHZhbHVlLnN0b3AoKSk7XG4gICAgICBjbGVhbnVwU2Nyb2xsKCk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gc2l6ZVZhbHVlcztcbn07XG5cbi8vIHNyYy9ob29rcy91c2VJblZpZXcudHNcbmltcG9ydCB7IHVzZVJlZiBhcyB1c2VSZWYzLCB1c2VTdGF0ZSBhcyB1c2VTdGF0ZTIgfSBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IGlzIGFzIGlzMTIsIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgYXMgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDcgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcbnZhciBkZWZhdWx0VGhyZXNob2xkT3B0aW9ucyA9IHtcbiAgYW55OiAwLFxuICBhbGw6IDFcbn07XG5mdW5jdGlvbiB1c2VJblZpZXcocHJvcHMsIGFyZ3MpIHtcbiAgY29uc3QgW2lzSW5WaWV3LCBzZXRJc0luVmlld10gPSB1c2VTdGF0ZTIoZmFsc2UpO1xuICBjb25zdCByZWYgPSB1c2VSZWYzKCk7XG4gIGNvbnN0IHByb3BzRm4gPSBpczEyLmZ1bihwcm9wcykgJiYgcHJvcHM7XG4gIGNvbnN0IHNwcmluZ3NQcm9wcyA9IHByb3BzRm4gPyBwcm9wc0ZuKCkgOiB7fTtcbiAgY29uc3QgeyB0bzogdG8yID0ge30sIGZyb20gPSB7fSwgLi4ucmVzdFNwcmluZ1Byb3BzIH0gPSBzcHJpbmdzUHJvcHM7XG4gIGNvbnN0IGludGVyc2VjdGlvbkFyZ3VtZW50cyA9IHByb3BzRm4gPyBhcmdzIDogcHJvcHM7XG4gIGNvbnN0IFtzcHJpbmdzLCBhcGldID0gdXNlU3ByaW5nKCgpID0+ICh7IGZyb20sIC4uLnJlc3RTcHJpbmdQcm9wcyB9KSwgW10pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0NygoKSA9PiB7XG4gICAgY29uc3QgZWxlbWVudCA9IHJlZi5jdXJyZW50O1xuICAgIGNvbnN0IHtcbiAgICAgIHJvb3QsXG4gICAgICBvbmNlLFxuICAgICAgYW1vdW50ID0gXCJhbnlcIixcbiAgICAgIC4uLnJlc3RBcmdzXG4gICAgfSA9IGludGVyc2VjdGlvbkFyZ3VtZW50cyA/PyB7fTtcbiAgICBpZiAoIWVsZW1lbnQgfHwgb25jZSAmJiBpc0luVmlldyB8fCB0eXBlb2YgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIgPT09IFwidW5kZWZpbmVkXCIpXG4gICAgICByZXR1cm47XG4gICAgY29uc3QgYWN0aXZlSW50ZXJzZWN0aW9ucyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgV2Vha01hcCgpO1xuICAgIGNvbnN0IG9uRW50ZXIgPSAoKSA9PiB7XG4gICAgICBpZiAodG8yKSB7XG4gICAgICAgIGFwaS5zdGFydCh0bzIpO1xuICAgICAgfVxuICAgICAgc2V0SXNJblZpZXcodHJ1ZSk7XG4gICAgICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xuICAgICAgICBpZiAoZnJvbSkge1xuICAgICAgICAgIGFwaS5zdGFydChmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBzZXRJc0luVmlldyhmYWxzZSk7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIG9uY2UgPyB2b2lkIDAgOiBjbGVhbnVwO1xuICAgIH07XG4gICAgY29uc3QgaGFuZGxlSW50ZXJzZWN0aW9uID0gKGVudHJpZXMpID0+IHtcbiAgICAgIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgY29uc3Qgb25MZWF2ZSA9IGFjdGl2ZUludGVyc2VjdGlvbnMuZ2V0KGVudHJ5LnRhcmdldCk7XG4gICAgICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZyA9PT0gQm9vbGVhbihvbkxlYXZlKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgICAgICBjb25zdCBuZXdPbkxlYXZlID0gb25FbnRlcigpO1xuICAgICAgICAgIGlmIChpczEyLmZ1bihuZXdPbkxlYXZlKSkge1xuICAgICAgICAgICAgYWN0aXZlSW50ZXJzZWN0aW9ucy5zZXQoZW50cnkudGFyZ2V0LCBuZXdPbkxlYXZlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKGVudHJ5LnRhcmdldCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG9uTGVhdmUpIHtcbiAgICAgICAgICBvbkxlYXZlKCk7XG4gICAgICAgICAgYWN0aXZlSW50ZXJzZWN0aW9ucy5kZWxldGUoZW50cnkudGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihoYW5kbGVJbnRlcnNlY3Rpb24sIHtcbiAgICAgIHJvb3Q6IHJvb3QgJiYgcm9vdC5jdXJyZW50IHx8IHZvaWQgMCxcbiAgICAgIHRocmVzaG9sZDogdHlwZW9mIGFtb3VudCA9PT0gXCJudW1iZXJcIiB8fCBBcnJheS5pc0FycmF5KGFtb3VudCkgPyBhbW91bnQgOiBkZWZhdWx0VGhyZXNob2xkT3B0aW9uc1thbW91bnRdLFxuICAgICAgLi4ucmVzdEFyZ3NcbiAgICB9KTtcbiAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xuICAgIHJldHVybiAoKSA9PiBvYnNlcnZlci51bm9ic2VydmUoZWxlbWVudCk7XG4gIH0sIFtpbnRlcnNlY3Rpb25Bcmd1bWVudHNdKTtcbiAgaWYgKHByb3BzRm4pIHtcbiAgICByZXR1cm4gW3JlZiwgc3ByaW5nc107XG4gIH1cbiAgcmV0dXJuIFtyZWYsIGlzSW5WaWV3XTtcbn1cblxuLy8gc3JjL2NvbXBvbmVudHMvU3ByaW5nLnRzeFxuZnVuY3Rpb24gU3ByaW5nKHsgY2hpbGRyZW4sIC4uLnByb3BzIH0pIHtcbiAgcmV0dXJuIGNoaWxkcmVuKHVzZVNwcmluZyhwcm9wcykpO1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9UcmFpbC50c3hcbmltcG9ydCB7IGlzIGFzIGlzMTMgfSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcbmZ1bmN0aW9uIFRyYWlsKHtcbiAgaXRlbXMsXG4gIGNoaWxkcmVuLFxuICAuLi5wcm9wc1xufSkge1xuICBjb25zdCB0cmFpbHMgPSB1c2VUcmFpbChpdGVtcy5sZW5ndGgsIHByb3BzKTtcbiAgcmV0dXJuIGl0ZW1zLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBjaGlsZHJlbihpdGVtLCBpbmRleCk7XG4gICAgcmV0dXJuIGlzMTMuZnVuKHJlc3VsdCkgPyByZXN1bHQodHJhaWxzW2luZGV4XSkgOiByZXN1bHQ7XG4gIH0pO1xufVxuXG4vLyBzcmMvY29tcG9uZW50cy9UcmFuc2l0aW9uLnRzeFxuZnVuY3Rpb24gVHJhbnNpdGlvbih7XG4gIGl0ZW1zLFxuICBjaGlsZHJlbixcbiAgLi4ucHJvcHNcbn0pIHtcbiAgcmV0dXJuIHVzZVRyYW5zaXRpb24oaXRlbXMsIHByb3BzKShjaGlsZHJlbik7XG59XG5cbi8vIHNyYy9pbnRlcnBvbGF0ZS50c1xuaW1wb3J0IHsgZGVwcmVjYXRlSW50ZXJwb2xhdGUgYXMgZGVwcmVjYXRlSW50ZXJwb2xhdGUyIH0gZnJvbSBcIkByZWFjdC1zcHJpbmcvc2hhcmVkXCI7XG5cbi8vIHNyYy9JbnRlcnBvbGF0aW9uLnRzXG5pbXBvcnQge1xuICBpcyBhcyBpczE0LFxuICByYWYgYXMgcmFmNSxcbiAgZWFjaCBhcyBlYWNoMTAsXG4gIGlzRXF1YWwgYXMgaXNFcXVhbDIsXG4gIHRvQXJyYXkgYXMgdG9BcnJheTUsXG4gIGZyYW1lTG9vcCBhcyBmcmFtZUxvb3AzLFxuICBnZXRGbHVpZFZhbHVlIGFzIGdldEZsdWlkVmFsdWUzLFxuICBjcmVhdGVJbnRlcnBvbGF0b3IsXG4gIEdsb2JhbHMgYXMgRzYsXG4gIGNhbGxGbHVpZE9ic2VydmVycyBhcyBjYWxsRmx1aWRPYnNlcnZlcnMzLFxuICBhZGRGbHVpZE9ic2VydmVyIGFzIGFkZEZsdWlkT2JzZXJ2ZXIzLFxuICByZW1vdmVGbHVpZE9ic2VydmVyIGFzIHJlbW92ZUZsdWlkT2JzZXJ2ZXIyLFxuICBoYXNGbHVpZFZhbHVlIGFzIGhhc0ZsdWlkVmFsdWUyXG59IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuaW1wb3J0IHtcbiAgZ2V0QW5pbWF0ZWQgYXMgZ2V0QW5pbWF0ZWQzLFxuICBzZXRBbmltYXRlZCBhcyBzZXRBbmltYXRlZDIsXG4gIGdldEFuaW1hdGVkVHlwZSBhcyBnZXRBbmltYXRlZFR5cGUyLFxuICBnZXRQYXlsb2FkIGFzIGdldFBheWxvYWQyXG59IGZyb20gXCJAcmVhY3Qtc3ByaW5nL2FuaW1hdGVkXCI7XG52YXIgSW50ZXJwb2xhdGlvbiA9IGNsYXNzIGV4dGVuZHMgRnJhbWVWYWx1ZSB7XG4gIGNvbnN0cnVjdG9yKHNvdXJjZSwgYXJncykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgLyoqIEVxdWFscyBmYWxzZSB3aGVuIGluIHRoZSBmcmFtZWxvb3AgKi9cbiAgICB0aGlzLmlkbGUgPSB0cnVlO1xuICAgIC8qKiBUaGUgaW5wdXRzIHdoaWNoIGFyZSBjdXJyZW50bHkgYW5pbWF0aW5nICovXG4gICAgdGhpcy5fYWN0aXZlID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICB0aGlzLmNhbGMgPSBjcmVhdGVJbnRlcnBvbGF0b3IoLi4uYXJncyk7XG4gICAgY29uc3QgdmFsdWUgPSB0aGlzLl9nZXQoKTtcbiAgICBjb25zdCBub2RlVHlwZSA9IGdldEFuaW1hdGVkVHlwZTIodmFsdWUpO1xuICAgIHNldEFuaW1hdGVkMih0aGlzLCBub2RlVHlwZS5jcmVhdGUodmFsdWUpKTtcbiAgfVxuICBhZHZhbmNlKF9kdCkge1xuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fZ2V0KCk7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLmdldCgpO1xuICAgIGlmICghaXNFcXVhbDIodmFsdWUsIG9sZFZhbHVlKSkge1xuICAgICAgZ2V0QW5pbWF0ZWQzKHRoaXMpLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgIHRoaXMuX29uQ2hhbmdlKHZhbHVlLCB0aGlzLmlkbGUpO1xuICAgIH1cbiAgICBpZiAoIXRoaXMuaWRsZSAmJiBjaGVja0lkbGUodGhpcy5fYWN0aXZlKSkge1xuICAgICAgYmVjb21lSWRsZSh0aGlzKTtcbiAgICB9XG4gIH1cbiAgX2dldCgpIHtcbiAgICBjb25zdCBpbnB1dHMgPSBpczE0LmFycih0aGlzLnNvdXJjZSkgPyB0aGlzLnNvdXJjZS5tYXAoZ2V0Rmx1aWRWYWx1ZTMpIDogdG9BcnJheTUoZ2V0Rmx1aWRWYWx1ZTModGhpcy5zb3VyY2UpKTtcbiAgICByZXR1cm4gdGhpcy5jYWxjKC4uLmlucHV0cyk7XG4gIH1cbiAgX3N0YXJ0KCkge1xuICAgIGlmICh0aGlzLmlkbGUgJiYgIWNoZWNrSWRsZSh0aGlzLl9hY3RpdmUpKSB7XG4gICAgICB0aGlzLmlkbGUgPSBmYWxzZTtcbiAgICAgIGVhY2gxMChnZXRQYXlsb2FkMih0aGlzKSwgKG5vZGUpID0+IHtcbiAgICAgICAgbm9kZS5kb25lID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICAgIGlmIChHNi5za2lwQW5pbWF0aW9uKSB7XG4gICAgICAgIHJhZjUuYmF0Y2hlZFVwZGF0ZXMoKCkgPT4gdGhpcy5hZHZhbmNlKCkpO1xuICAgICAgICBiZWNvbWVJZGxlKHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZnJhbWVMb29wMy5zdGFydCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gT2JzZXJ2ZSBvdXIgc291cmNlcyBvbmx5IHdoZW4gd2UncmUgb2JzZXJ2ZWQuXG4gIF9hdHRhY2goKSB7XG4gICAgbGV0IHByaW9yaXR5ID0gMTtcbiAgICBlYWNoMTAodG9BcnJheTUodGhpcy5zb3VyY2UpLCAoc291cmNlKSA9PiB7XG4gICAgICBpZiAoaGFzRmx1aWRWYWx1ZTIoc291cmNlKSkge1xuICAgICAgICBhZGRGbHVpZE9ic2VydmVyMyhzb3VyY2UsIHRoaXMpO1xuICAgICAgfVxuICAgICAgaWYgKGlzRnJhbWVWYWx1ZShzb3VyY2UpKSB7XG4gICAgICAgIGlmICghc291cmNlLmlkbGUpIHtcbiAgICAgICAgICB0aGlzLl9hY3RpdmUuYWRkKHNvdXJjZSk7XG4gICAgICAgIH1cbiAgICAgICAgcHJpb3JpdHkgPSBNYXRoLm1heChwcmlvcml0eSwgc291cmNlLnByaW9yaXR5ICsgMSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgIHRoaXMuX3N0YXJ0KCk7XG4gIH1cbiAgLy8gU3RvcCBvYnNlcnZpbmcgb3VyIHNvdXJjZXMgb25jZSB3ZSBoYXZlIG5vIG9ic2VydmVycy5cbiAgX2RldGFjaCgpIHtcbiAgICBlYWNoMTAodG9BcnJheTUodGhpcy5zb3VyY2UpLCAoc291cmNlKSA9PiB7XG4gICAgICBpZiAoaGFzRmx1aWRWYWx1ZTIoc291cmNlKSkge1xuICAgICAgICByZW1vdmVGbHVpZE9ic2VydmVyMihzb3VyY2UsIHRoaXMpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRoaXMuX2FjdGl2ZS5jbGVhcigpO1xuICAgIGJlY29tZUlkbGUodGhpcyk7XG4gIH1cbiAgLyoqIEBpbnRlcm5hbCAqL1xuICBldmVudE9ic2VydmVkKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnR5cGUgPT0gXCJjaGFuZ2VcIikge1xuICAgICAgaWYgKGV2ZW50LmlkbGUpIHtcbiAgICAgICAgdGhpcy5hZHZhbmNlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9hY3RpdmUuYWRkKGV2ZW50LnBhcmVudCk7XG4gICAgICAgIHRoaXMuX3N0YXJ0KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChldmVudC50eXBlID09IFwiaWRsZVwiKSB7XG4gICAgICB0aGlzLl9hY3RpdmUuZGVsZXRlKGV2ZW50LnBhcmVudCk7XG4gICAgfSBlbHNlIGlmIChldmVudC50eXBlID09IFwicHJpb3JpdHlcIikge1xuICAgICAgdGhpcy5wcmlvcml0eSA9IHRvQXJyYXk1KHRoaXMuc291cmNlKS5yZWR1Y2UoXG4gICAgICAgIChoaWdoZXN0LCBwYXJlbnQpID0+IE1hdGgubWF4KGhpZ2hlc3QsIChpc0ZyYW1lVmFsdWUocGFyZW50KSA/IHBhcmVudC5wcmlvcml0eSA6IDApICsgMSksXG4gICAgICAgIDBcbiAgICAgICk7XG4gICAgfVxuICB9XG59O1xuZnVuY3Rpb24gaXNJZGxlKHNvdXJjZSkge1xuICByZXR1cm4gc291cmNlLmlkbGUgIT09IGZhbHNlO1xufVxuZnVuY3Rpb24gY2hlY2tJZGxlKGFjdGl2ZSkge1xuICByZXR1cm4gIWFjdGl2ZS5zaXplIHx8IEFycmF5LmZyb20oYWN0aXZlKS5ldmVyeShpc0lkbGUpO1xufVxuZnVuY3Rpb24gYmVjb21lSWRsZShzZWxmKSB7XG4gIGlmICghc2VsZi5pZGxlKSB7XG4gICAgc2VsZi5pZGxlID0gdHJ1ZTtcbiAgICBlYWNoMTAoZ2V0UGF5bG9hZDIoc2VsZiksIChub2RlKSA9PiB7XG4gICAgICBub2RlLmRvbmUgPSB0cnVlO1xuICAgIH0pO1xuICAgIGNhbGxGbHVpZE9ic2VydmVyczMoc2VsZiwge1xuICAgICAgdHlwZTogXCJpZGxlXCIsXG4gICAgICBwYXJlbnQ6IHNlbGZcbiAgICB9KTtcbiAgfVxufVxuXG4vLyBzcmMvaW50ZXJwb2xhdGUudHNcbnZhciB0byA9IChzb3VyY2UsIC4uLmFyZ3MpID0+IG5ldyBJbnRlcnBvbGF0aW9uKHNvdXJjZSwgYXJncyk7XG52YXIgaW50ZXJwb2xhdGUgPSAoc291cmNlLCAuLi5hcmdzKSA9PiAoZGVwcmVjYXRlSW50ZXJwb2xhdGUyKCksIG5ldyBJbnRlcnBvbGF0aW9uKHNvdXJjZSwgYXJncykpO1xuXG4vLyBzcmMvZ2xvYmFscy50c1xuaW1wb3J0IHtcbiAgR2xvYmFscyxcbiAgZnJhbWVMb29wIGFzIGZyYW1lTG9vcDQsXG4gIGNyZWF0ZVN0cmluZ0ludGVycG9sYXRvclxufSBmcm9tIFwiQHJlYWN0LXNwcmluZy9zaGFyZWRcIjtcbkdsb2JhbHMuYXNzaWduKHtcbiAgY3JlYXRlU3RyaW5nSW50ZXJwb2xhdG9yLFxuICB0bzogKHNvdXJjZSwgYXJncykgPT4gbmV3IEludGVycG9sYXRpb24oc291cmNlLCBhcmdzKVxufSk7XG52YXIgdXBkYXRlID0gZnJhbWVMb29wNC5hZHZhbmNlO1xuXG4vLyBzcmMvaW5kZXgudHNcbmltcG9ydCB7XG4gIGNyZWF0ZUludGVycG9sYXRvciBhcyBjcmVhdGVJbnRlcnBvbGF0b3IyLFxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IGFzIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q4LFxuICB1c2VSZWR1Y2VkTW90aW9uLFxuICBlYXNpbmdzIGFzIGVhc2luZ3MyXG59IGZyb20gXCJAcmVhY3Qtc3ByaW5nL3NoYXJlZFwiO1xuZXhwb3J0ICogZnJvbSBcIkByZWFjdC1zcHJpbmcvdHlwZXNcIjtcbmV4cG9ydCB7XG4gIEJhaWxTaWduYWwsXG4gIENvbnRyb2xsZXIsXG4gIEZyYW1lVmFsdWUsXG4gIEdsb2JhbHMsXG4gIEludGVycG9sYXRpb24sXG4gIFNwcmluZyxcbiAgU3ByaW5nQ29udGV4dCxcbiAgU3ByaW5nUmVmLFxuICBTcHJpbmdWYWx1ZSxcbiAgVHJhaWwsXG4gIFRyYW5zaXRpb24sXG4gIGNvbmZpZyxcbiAgY3JlYXRlSW50ZXJwb2xhdG9yMiBhcyBjcmVhdGVJbnRlcnBvbGF0b3IsXG4gIGVhc2luZ3MyIGFzIGVhc2luZ3MsXG4gIGluZmVyVG8sXG4gIGludGVycG9sYXRlLFxuICB0byxcbiAgdXBkYXRlLFxuICB1c2VDaGFpbixcbiAgdXNlSW5WaWV3LFxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0OCBhcyB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LFxuICB1c2VSZWR1Y2VkTW90aW9uLFxuICB1c2VSZXNpemUsXG4gIHVzZVNjcm9sbCxcbiAgdXNlU3ByaW5nLFxuICB1c2VTcHJpbmdSZWYsXG4gIHVzZVNwcmluZ1ZhbHVlLFxuICB1c2VTcHJpbmdzLFxuICB1c2VUcmFpbCxcbiAgdXNlVHJhbnNpdGlvblxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXNwcmluZ19jb3JlLm1vZGVybi5tanMubWFwIl0sIm5hbWVzIjpbImVhY2giLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiaXMiLCJ0b0FycmF5IiwiZWFjaFByb3AiLCJnZXRGbHVpZFZhbHVlIiwiaXNBbmltYXRlZFN0cmluZyIsIkdsb2JhbHMiLCJHIiwiY2FsbFByb3AiLCJ2YWx1ZSIsImFyZ3MiLCJmdW4iLCJtYXRjaFByb3AiLCJrZXkiLCJpbmNsdWRlcyIsInJlc29sdmVQcm9wIiwicHJvcCIsIm9iaiIsImdldERlZmF1bHRQcm9wIiwicHJvcHMiLCJkZWZhdWx0Iiwibm9vcFRyYW5zZm9ybSIsImdldERlZmF1bHRQcm9wcyIsInRyYW5zZm9ybSIsImtleXMiLCJERUZBVUxUX1BST1BTIiwiT2JqZWN0IiwiZGVmYXVsdHMyIiwidW5kIiwiUkVTRVJWRURfUFJPUFMiLCJjb25maWciLCJmcm9tIiwidG8iLCJyZWYiLCJsb29wIiwicmVzZXQiLCJwYXVzZSIsImNhbmNlbCIsInJldmVyc2UiLCJpbW1lZGlhdGUiLCJkZWxheSIsIm9uUHJvcHMiLCJvblN0YXJ0Iiwib25DaGFuZ2UiLCJvblBhdXNlIiwib25SZXN1bWUiLCJvblJlc3QiLCJvblJlc29sdmUiLCJpdGVtcyIsInRyYWlsIiwic29ydCIsImV4cGlyZXMiLCJpbml0aWFsIiwiZW50ZXIiLCJ1cGRhdGUiLCJsZWF2ZSIsImNoaWxkcmVuIiwib25EZXN0cm95ZWQiLCJjYWxsSWQiLCJwYXJlbnRJZCIsImdldEZvcndhcmRQcm9wcyIsImZvcndhcmQiLCJjb3VudCIsImluZmVyVG8iLCJ0bzIiLCJvdXQiLCJ2YWwiLCJjb21wdXRlR29hbCIsImFyciIsIm1hcCIsImNyZWF0ZVN0cmluZ0ludGVycG9sYXRvciIsInJhbmdlIiwib3V0cHV0IiwiaGFzUHJvcHMiLCJfIiwiaXNBc3luY1RvIiwiZGV0YWNoUmVmcyIsImN0cmwiLCJkZWxldGUiLCJyZXBsYWNlUmVmIiwiYWRkIiwidXNlQ2hhaW4iLCJyZWZzIiwidGltZVN0ZXBzIiwidGltZUZyYW1lIiwicHJldkRlbGF5IiwiaSIsImNvbnRyb2xsZXJzIiwiY3VycmVudCIsImxlbmd0aCIsImlzTmFOIiwicXVldWUiLCJtZW1vaXplZERlbGF5UHJvcCIsInN0YXJ0IiwicCIsIlByb21pc2UiLCJyZXNvbHZlIiwicXVldWVzIiwicSIsInRoZW4iLCJ1cGRhdGUyIiwicHVzaCIsImFsbCIsImlzOSIsInVzZUNvbnRleHQiLCJ1c2VDb250ZXh0MiIsInVzZU1lbW8iLCJ1c2VSZWYiLCJpczgiLCJlYWNoNSIsInVzZVByZXYiLCJ1c2VPbmNlIiwidXNlRm9yY2VVcGRhdGUiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0MiIsImlzNSIsInJhZiIsInJhZjMiLCJlYWNoMiIsImlzRXF1YWwiLCJ0b0FycmF5MiIsImVhY2hQcm9wMyIsImZyYW1lTG9vcCIsImZyYW1lTG9vcDIiLCJmbHVzaENhbGxzIiwiZ2V0Rmx1aWRWYWx1ZTIiLCJpc0FuaW1hdGVkU3RyaW5nMiIsIkc1IiwiY2FsbEZsdWlkT2JzZXJ2ZXJzIiwiY2FsbEZsdWlkT2JzZXJ2ZXJzMiIsImhhc0ZsdWlkVmFsdWUiLCJhZGRGbHVpZE9ic2VydmVyIiwicmVtb3ZlRmx1aWRPYnNlcnZlciIsImdldEZsdWlkT2JzZXJ2ZXJzIiwiQW5pbWF0ZWRWYWx1ZSIsIkFuaW1hdGVkU3RyaW5nIiwiZ2V0UGF5bG9hZCIsImdldEFuaW1hdGVkIiwiZ2V0QW5pbWF0ZWQyIiwic2V0QW5pbWF0ZWQiLCJnZXRBbmltYXRlZFR5cGUiLCJpczIiLCJlYXNpbmdzIiwidGVuc2lvbiIsImZyaWN0aW9uIiwiZ2VudGxlIiwid29iYmx5Iiwic3RpZmYiLCJzbG93IiwibW9sYXNzZXMiLCJkZWZhdWx0cyIsIm1hc3MiLCJkYW1waW5nIiwiZWFzaW5nIiwibGluZWFyIiwiY2xhbXAiLCJBbmltYXRpb25Db25maWciLCJjb25zdHJ1Y3RvciIsInZlbG9jaXR5IiwiYXNzaWduIiwibWVyZ2VDb25maWciLCJjb25maWcyIiwibmV3Q29uZmlnIiwiZGVmYXVsdENvbmZpZyIsInNhbml0aXplQ29uZmlnIiwiZnJlcXVlbmN5IiwiTWF0aCIsInBvdyIsIlBJIiwiZGVjYXkiLCJkdXJhdGlvbiIsImlzVGVuc2lvbkNvbmZpZyIsImVtcHR5QXJyYXkiLCJBbmltYXRpb24iLCJjaGFuZ2VkIiwidmFsdWVzIiwidG9WYWx1ZXMiLCJmcm9tVmFsdWVzIiwiaXMzIiwiRzIiLCJzY2hlZHVsZVByb3BzIiwiZGVmYXVsdFByb3BzIiwic3RhdGUiLCJhY3Rpb25zIiwicmVqZWN0IiwidGltZW91dCIsInBhdXNlZCIsInJlc3VtZVF1ZXVlIiwicmVzdW1lIiwidGltZW91dHMiLCJ0aW1lIiwibm93Iiwic2tpcEFuaW1hdGlvbiIsImRlbGF5ZWQiLCJzZXRUaW1lb3V0IiwicGF1c2VRdWV1ZSIsImNhbmNlbElkIiwiZXJyIiwiaXM0IiwicmFmMiIsImZsdXNoIiwiZWFjaFByb3AyIiwiRzMiLCJnZXRDb21iaW5lZFJlc3VsdCIsInRhcmdldCIsInJlc3VsdHMiLCJzb21lIiwicmVzdWx0IiwiY2FuY2VsbGVkIiwiZ2V0Q2FuY2VsbGVkUmVzdWx0IiwiZ2V0IiwiZXZlcnkiLCJub29wIiwiZ2V0Tm9vcFJlc3VsdCIsImdldEZpbmlzaGVkUmVzdWx0IiwiZmluaXNoZWQiLCJydW5Bc3luYyIsImFzeW5jVG8iLCJwcmV2VG8iLCJwcm9taXNlIiwicHJldlByb21pc2UiLCJhc3luY0lkIiwicHJldmVudEJhaWwiLCJiYWlsIiwiYmFpbFByb21pc2UiLCJiYWlsSWZFbmRlZCIsImJhaWxTaWduYWwiLCJiYWlsUmVzdWx0IiwiYW5pbWF0ZSIsImFyZzEiLCJhcmcyIiwiQmFpbFNpZ25hbCIsInNraXBBbmltYXRpb25TaWduYWwiLCJTa2lwQW5pbWF0aW9uU2lnbmFsIiwic3RvcEFzeW5jIiwicHJvcHMyIiwicmVzdWx0MiIsImFuaW1hdGluZyIsInN0b3AiLCJiaW5kIiwiYmF0Y2hlZFVwZGF0ZXMiLCJpdGVtIiwidCIsImNsZWFyIiwiRXJyb3IiLCJkZXByZWNhdGVJbnRlcnBvbGF0ZSIsIkZsdWlkVmFsdWUiLCJGbHVpZFZhbHVlMiIsIkc0IiwiaXNGcmFtZVZhbHVlIiwiRnJhbWVWYWx1ZSIsIm5leHRJZCIsInByaW9yaXR5IiwiX3ByaW9yaXR5IiwiX29uUHJpb3JpdHlDaGFuZ2UiLCJub2RlIiwiZ2V0VmFsdWUiLCJpbnRlcnBvbGF0ZSIsInRvSlNPTiIsIm9ic2VydmVyQWRkZWQiLCJfYXR0YWNoIiwib2JzZXJ2ZXJSZW1vdmVkIiwiX2RldGFjaCIsIl9vbkNoYW5nZSIsImlkbGUiLCJ0eXBlIiwicGFyZW50IiwiYXJndW1lbnRzIiwiaWQiLCIkUCIsIlN5bWJvbCIsImZvciIsIkhBU19BTklNQVRFRCIsIklTX0FOSU1BVElORyIsIklTX1BBVVNFRCIsImhhc0FuaW1hdGVkIiwiaXNBbmltYXRpbmciLCJpc1BhdXNlZCIsInNldEFjdGl2ZUJpdCIsImFjdGl2ZSIsInNldFBhdXNlZEJpdCIsIlNwcmluZ1ZhbHVlIiwiX3N0YXRlIiwiZ29hbCIsImFuaW1hdGlvbiIsImxhc3RWZWxvY2l0eSIsIm5vZGUyIiwiaXNEZWxheWVkIiwiYWR2YW5jZSIsImR0IiwiYW5pbSIsInBheWxvYWQiLCJmb3JFYWNoIiwiZG9uZSIsImxhc3RQb3NpdGlvbiIsInBvc2l0aW9uIiwiZWxhcHNlZCIsImVsYXBzZWRUaW1lIiwidjAiLCJwcmVjaXNpb24iLCJtaW4iLCJhYnMiLCJfbWVtb2l6ZWREdXJhdGlvbiIsImR1cmF0aW9uUHJvZ3Jlc3MiLCJwcm9ncmVzcyIsImUiLCJleHAiLCJyZXN0VmVsb2NpdHkiLCJib3VuY2VGYWN0b3IiLCJib3VuY2UiLCJjYW5Cb3VuY2UiLCJpc0dyb3dpbmciLCJpc01vdmluZyIsImlzQm91bmNpbmciLCJzdGVwIiwibnVtU3RlcHMiLCJjZWlsIiwibiIsInNwcmluZ0ZvcmNlIiwiZGFtcGluZ0ZvcmNlIiwiYWNjZWxlcmF0aW9uIiwiTnVtYmVyIiwiY29uc29sZSIsIndhcm4iLCJzZXRWYWx1ZSIsInJvdW5kIiwiY3VyclZhbCIsImZpbmFsVmFsIiwiX3N0b3AiLCJzZXQiLCJfZm9jdXMiLCJfc2V0IiwiX3VwZGF0ZSIsImZpbmlzaCIsIl9vblN0YXJ0IiwidXAiLCJfbGFzdENhbGxJZCIsImV2ZW50T2JzZXJ2ZWQiLCJldmVudCIsIl9zdGFydCIsIl9wcmVwYXJlTm9kZSIsImlzTG9vcCIsInRlc3QiLCJtZXJnZUFjdGl2ZUZuIiwic2VuZEV2ZW50IiwiaXNGcm96ZW4iLCJjaGVja0ZpbmlzaGVkIiwiX3Jlc3VtZSIsIl9tZXJnZSIsIm5leHRQcm9wcyIsImNyZWF0ZUxvb3BVcGRhdGUiLCJoYXNUb1Byb3AiLCJoYXNGcm9tUHJvcCIsIl9sYXN0VG9JZCIsInByZXZGcm9tIiwiaGFzRnJvbUNoYW5nZWQiLCJoYXNUb0NoYW5nZWQiLCJoYXNBc3luY1RvIiwiaXNBbmltYXRhYmxlIiwibnVtIiwibm9kZVR5cGUiLCJuYW1lIiwiZ29hbFR5cGUiLCJzdGFydGVkIiwiaGFzVmFsdWVDaGFuZ2VkIiwiQUNUSVZFX0VWRU5UUyIsIl9wZW5kaW5nQ2FsbHMiLCJhcmciLCJvbGROb2RlIiwiY3JlYXRlIiwiU2V0IiwibG9vcFJldCIsIm92ZXJyaWRlcyIsImNyZWF0ZVVwZGF0ZSIsImZpbmREZWZpbmVkIiwic2l6ZSIsIkFycmF5IiwiZGVjbGFyZVVwZGF0ZSIsImlzNiIsInJhZjQiLCJlYWNoMyIsImZsdXNoMiIsInRvQXJyYXkzIiwiZWFjaFByb3A0IiwiZmx1c2hDYWxsczIiLCJhZGRGbHVpZE9ic2VydmVyMiIsIkJBVENIRURfRVZFTlRTIiwibmV4dElkMiIsIkNvbnRyb2xsZXIiLCJzcHJpbmdzIiwic3ByaW5nIiwiX2l0ZW0iLCJfZmx1c2giLCJwcmVwYXJlS2V5cyIsImZsdXNoVXBkYXRlUXVldWUiLCJfbGFzdEFzeW5jSWQiLCJpdGVyYXRvciIsIl9vbkZyYW1lIiwiX2V2ZW50cyIsIl9hY3RpdmUiLCJfY2hhbmdlZCIsIl9zdGFydGVkIiwib25TdGFydDIiLCJvbkNoYW5nZTIiLCJvblJlc3QyIiwib25GcmFtZSIsImZsdXNoMyIsIk1hcCIsImZsdXNoVXBkYXRlIiwiaGFuZGxlciIsInByb21pc2VzIiwiZ2V0U3ByaW5ncyIsInByZXBhcmVTcHJpbmdzIiwiY3JlYXRlU3ByaW5nIiwic2V0U3ByaW5ncyIsIm9ic2VydmVyIiwiUmVhY3QiLCJ1c2VNZW1vT25lIiwiU3ByaW5nQ29udGV4dCIsImluaGVyaXRlZCIsImN0eCIsIlByb3ZpZGVyIiwiY3JlYXRlRWxlbWVudCIsIm1ha2VDb250ZXh0IiwiQ29uc3VtZXIiLCJpbml0IiwiY3JlYXRlQ29udGV4dCIsIl9jb250ZXh0IiwiZWFjaDQiLCJpczciLCJkZXByZWNhdGVEaXJlY3RDYWxsIiwiU3ByaW5nUmVmIiwiU3ByaW5nUmVmMiIsIl9nZXRQcm9wcyIsImluZGV4T2YiLCJzcGxpY2UiLCJpbmRleCIsInVzZVNwcmluZ3MiLCJkZXBzIiwicHJvcHNGbiIsImxheW91dElkIiwiZm9yY2VVcGRhdGUiLCJjdHJscyIsInVwZGF0ZXMyIiwic3ByaW5nczIiLCJjYW5GbHVzaFN5bmMiLCJ1cGRhdGVzIiwicHJldkxlbmd0aCIsInNsaWNlIiwiZGVjbGFyZVVwZGF0ZXMiLCJzdGFydEluZGV4IiwiZW5kSW5kZXgiLCJjb250ZXh0IiwicHJldkNvbnRleHQiLCJoYXNDb250ZXh0IiwiY2IiLCJ4IiwidXNlU3ByaW5nIiwiaXNGbiIsInVzZVN0YXRlIiwiaW5pdFNwcmluZ1JlZiIsInVzZVNwcmluZ1JlZiIsInVzZUNvbnN0YW50IiwidXNlT25jZTIiLCJ1c2VTcHJpbmdWYWx1ZSIsInNwcmluZ1ZhbHVlIiwiZWFjaDYiLCJpczEwIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDMiLCJ1c2VUcmFpbCIsInByb3BzQXJnIiwicGFzc2VkUmVmIiwicHJvcHNBcmcyIiwiUmVhY3QyIiwidXNlQ29udGV4dDMiLCJ1c2VSZWYyIiwidXNlTWVtbzIiLCJpczExIiwidG9BcnJheTQiLCJ1c2VGb3JjZVVwZGF0ZTIiLCJ1c2VPbmNlMyIsInVzZVByZXYyIiwiZWFjaDciLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0NCIsInVzZVRyYW5zaXRpb24iLCJkYXRhIiwiZXhpdEJlZm9yZUVudGVyIiwicHJvcHNSZWYiLCJwcm9wc0NvbmZpZyIsInRyYW5zaXRpb25zIiwidXNlZFRyYW5zaXRpb25zIiwicHJldlRyYW5zaXRpb25zIiwiZXhwaXJlZCIsImNsZWFyVGltZW91dCIsImV4cGlyYXRpb25JZCIsImdldEtleXMiLCJyZXVzZWQiLCJwaGFzZSIsImtleUluZGV4IiwicHJldkluZGV4IiwiYSIsImIiLCJjaGFuZ2VzIiwiZXhpdGluZ1RyYW5zaXRpb25zIiwiZm9yY2VDaGFuZ2UiLCJwcmV2UGhhc2UiLCJwcm9wc0RlbGF5IiwiaXNMZWF2ZSIsInAyIiwidHJhbnNpdGlvbnMyIiwidDIiLCJmaW5kIiwidDMiLCJleHBpcnkiLCJleHBpcnlNcyIsImluZCIsImZpbmRJbmRleCIsInJlbmRlclRyYW5zaXRpb25zIiwicmVuZGVyIiwiRnJhZ21lbnQiLCJlbGVtIiwic3RyIiwibmV4dEtleSIsImhhcyIsImVhY2g4Iiwib25TY3JvbGwiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0NSIsInVzZVNjcm9sbCIsImNvbnRhaW5lciIsInNwcmluZ09wdGlvbnMiLCJzY3JvbGxWYWx1ZXMiLCJhcGkiLCJzY3JvbGxYIiwic2Nyb2xsWSIsInNjcm9sbFhQcm9ncmVzcyIsInNjcm9sbFlQcm9ncmVzcyIsImNsZWFudXBTY3JvbGwiLCJ5Iiwib25SZXNpemUiLCJlYWNoOSIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3Q2IiwidXNlUmVzaXplIiwic2l6ZVZhbHVlcyIsIndpZHRoIiwiaGVpZ2h0IiwidXNlUmVmMyIsInVzZVN0YXRlMiIsImlzMTIiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0NyIsImRlZmF1bHRUaHJlc2hvbGRPcHRpb25zIiwiYW55IiwidXNlSW5WaWV3IiwiaXNJblZpZXciLCJzZXRJc0luVmlldyIsInNwcmluZ3NQcm9wcyIsInJlc3RTcHJpbmdQcm9wcyIsImludGVyc2VjdGlvbkFyZ3VtZW50cyIsImVsZW1lbnQiLCJyb290Iiwib25jZSIsImFtb3VudCIsInJlc3RBcmdzIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJhY3RpdmVJbnRlcnNlY3Rpb25zIiwiV2Vha01hcCIsIm9uRW50ZXIiLCJjbGVhbnVwIiwiaGFuZGxlSW50ZXJzZWN0aW9uIiwiZW50cmllcyIsImVudHJ5Iiwib25MZWF2ZSIsImlzSW50ZXJzZWN0aW5nIiwiQm9vbGVhbiIsIm5ld09uTGVhdmUiLCJ1bm9ic2VydmUiLCJ0aHJlc2hvbGQiLCJpc0FycmF5Iiwib2JzZXJ2ZSIsIlNwcmluZyIsImlzMTMiLCJUcmFpbCIsInRyYWlscyIsIlRyYW5zaXRpb24iLCJkZXByZWNhdGVJbnRlcnBvbGF0ZTIiLCJpczE0IiwicmFmNSIsImVhY2gxMCIsImlzRXF1YWwyIiwidG9BcnJheTUiLCJmcmFtZUxvb3AzIiwiZ2V0Rmx1aWRWYWx1ZTMiLCJjcmVhdGVJbnRlcnBvbGF0b3IiLCJHNiIsImNhbGxGbHVpZE9ic2VydmVyczMiLCJhZGRGbHVpZE9ic2VydmVyMyIsInJlbW92ZUZsdWlkT2JzZXJ2ZXIyIiwiaGFzRmx1aWRWYWx1ZTIiLCJnZXRBbmltYXRlZDMiLCJzZXRBbmltYXRlZDIiLCJnZXRBbmltYXRlZFR5cGUyIiwiZ2V0UGF5bG9hZDIiLCJJbnRlcnBvbGF0aW9uIiwiX2R0IiwiX2dldCIsIm9sZFZhbHVlIiwiY2hlY2tJZGxlIiwiYmVjb21lSWRsZSIsImlucHV0cyIsInNvdXJjZSIsImNhbGMiLCJtYXgiLCJyZWR1Y2UiLCJoaWdoZXN0IiwiaXNJZGxlIiwic2VsZiIsImZyYW1lTG9vcDQiLCJjcmVhdGVJbnRlcnBvbGF0b3IyIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdDgiLCJ1c2VSZWR1Y2VkTW90aW9uIiwiZWFzaW5nczIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/core/dist/react-spring_core.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs":
/*!*******************************************************************************!*\
  !*** ./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FluidValue: function() { return /* binding */ FluidValue; },\n/* harmony export */   Globals: function() { return /* binding */ globals_exports; },\n/* harmony export */   addFluidObserver: function() { return /* binding */ addFluidObserver; },\n/* harmony export */   callFluidObserver: function() { return /* binding */ callFluidObserver; },\n/* harmony export */   callFluidObservers: function() { return /* binding */ callFluidObservers; },\n/* harmony export */   clamp: function() { return /* binding */ clamp; },\n/* harmony export */   colorToRgba: function() { return /* binding */ colorToRgba; },\n/* harmony export */   colors: function() { return /* binding */ colors2; },\n/* harmony export */   createInterpolator: function() { return /* binding */ createInterpolator; },\n/* harmony export */   createStringInterpolator: function() { return /* binding */ createStringInterpolator2; },\n/* harmony export */   defineHidden: function() { return /* binding */ defineHidden; },\n/* harmony export */   deprecateDirectCall: function() { return /* binding */ deprecateDirectCall; },\n/* harmony export */   deprecateInterpolate: function() { return /* binding */ deprecateInterpolate; },\n/* harmony export */   each: function() { return /* binding */ each; },\n/* harmony export */   eachProp: function() { return /* binding */ eachProp; },\n/* harmony export */   easings: function() { return /* binding */ easings; },\n/* harmony export */   flush: function() { return /* binding */ flush; },\n/* harmony export */   flushCalls: function() { return /* binding */ flushCalls; },\n/* harmony export */   frameLoop: function() { return /* binding */ frameLoop; },\n/* harmony export */   getFluidObservers: function() { return /* binding */ getFluidObservers; },\n/* harmony export */   getFluidValue: function() { return /* binding */ getFluidValue; },\n/* harmony export */   hasFluidValue: function() { return /* binding */ hasFluidValue; },\n/* harmony export */   hex3: function() { return /* binding */ hex3; },\n/* harmony export */   hex4: function() { return /* binding */ hex4; },\n/* harmony export */   hex6: function() { return /* binding */ hex6; },\n/* harmony export */   hex8: function() { return /* binding */ hex8; },\n/* harmony export */   hsl: function() { return /* binding */ hsl; },\n/* harmony export */   hsla: function() { return /* binding */ hsla; },\n/* harmony export */   is: function() { return /* binding */ is; },\n/* harmony export */   isAnimatedString: function() { return /* binding */ isAnimatedString; },\n/* harmony export */   isEqual: function() { return /* binding */ isEqual; },\n/* harmony export */   isSSR: function() { return /* binding */ isSSR; },\n/* harmony export */   noop: function() { return /* binding */ noop; },\n/* harmony export */   onResize: function() { return /* binding */ onResize; },\n/* harmony export */   onScroll: function() { return /* binding */ onScroll; },\n/* harmony export */   once: function() { return /* binding */ once; },\n/* harmony export */   prefix: function() { return /* binding */ prefix; },\n/* harmony export */   raf: function() { return /* binding */ raf; },\n/* harmony export */   removeFluidObserver: function() { return /* binding */ removeFluidObserver; },\n/* harmony export */   rgb: function() { return /* binding */ rgb; },\n/* harmony export */   rgba: function() { return /* binding */ rgba; },\n/* harmony export */   setFluidGetter: function() { return /* binding */ setFluidGetter; },\n/* harmony export */   toArray: function() { return /* binding */ toArray; },\n/* harmony export */   useConstant: function() { return /* binding */ useConstant; },\n/* harmony export */   useForceUpdate: function() { return /* binding */ useForceUpdate; },\n/* harmony export */   useIsomorphicLayoutEffect: function() { return /* binding */ useIsomorphicLayoutEffect; },\n/* harmony export */   useMemoOne: function() { return /* binding */ useMemoOne; },\n/* harmony export */   useOnce: function() { return /* binding */ useOnce; },\n/* harmony export */   usePrev: function() { return /* binding */ usePrev; },\n/* harmony export */   useReducedMotion: function() { return /* binding */ useReducedMotion; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$(), _s1 = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$();\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// src/globals.ts\nvar globals_exports = {};\n__export(globals_exports, {\n    assign: ()=>assign,\n    colors: ()=>colors,\n    createStringInterpolator: ()=>createStringInterpolator,\n    skipAnimation: ()=>skipAnimation,\n    to: ()=>to,\n    willAdvance: ()=>willAdvance\n});\n// ../rafz/dist/react-spring_rafz.modern.mjs\nvar updateQueue = makeQueue();\nvar raf = (fn)=>schedule(fn, updateQueue);\nvar writeQueue = makeQueue();\nraf.write = (fn)=>schedule(fn, writeQueue);\nvar onStartQueue = makeQueue();\nraf.onStart = (fn)=>schedule(fn, onStartQueue);\nvar onFrameQueue = makeQueue();\nraf.onFrame = (fn)=>schedule(fn, onFrameQueue);\nvar onFinishQueue = makeQueue();\nraf.onFinish = (fn)=>schedule(fn, onFinishQueue);\nvar timeouts = [];\nraf.setTimeout = (handler, ms)=>{\n    const time = raf.now() + ms;\n    const cancel = ()=>{\n        const i = timeouts.findIndex((t)=>t.cancel == cancel);\n        if (~i) timeouts.splice(i, 1);\n        pendingCount -= ~i ? 1 : 0;\n    };\n    const timeout = {\n        time,\n        handler,\n        cancel\n    };\n    timeouts.splice(findTimeout(time), 0, timeout);\n    pendingCount += 1;\n    start();\n    return timeout;\n};\nvar findTimeout = (time)=>~(~timeouts.findIndex((t)=>t.time > time) || ~timeouts.length);\nraf.cancel = (fn)=>{\n    onStartQueue.delete(fn);\n    onFrameQueue.delete(fn);\n    onFinishQueue.delete(fn);\n    updateQueue.delete(fn);\n    writeQueue.delete(fn);\n};\nraf.sync = (fn)=>{\n    sync = true;\n    raf.batchedUpdates(fn);\n    sync = false;\n};\nraf.throttle = (fn)=>{\n    let lastArgs;\n    function queuedFn() {\n        try {\n            fn(...lastArgs);\n        } finally{\n            lastArgs = null;\n        }\n    }\n    function throttled() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        lastArgs = args;\n        raf.onStart(queuedFn);\n    }\n    throttled.handler = fn;\n    throttled.cancel = ()=>{\n        onStartQueue.delete(queuedFn);\n        lastArgs = null;\n    };\n    return throttled;\n};\nvar nativeRaf =  true ? window.requestAnimationFrame : // eslint-disable-next-line @typescript-eslint/no-empty-function\n0;\nraf.use = (impl)=>nativeRaf = impl;\nraf.now = typeof performance != \"undefined\" ? ()=>performance.now() : Date.now;\nraf.batchedUpdates = (fn)=>fn();\nraf.catch = console.error;\nraf.frameLoop = \"always\";\nraf.advance = ()=>{\n    if (raf.frameLoop !== \"demand\") {\n        console.warn(\"Cannot call the manual advancement of rafz whilst frameLoop is not set as demand\");\n    } else {\n        update();\n    }\n};\nvar ts = -1;\nvar pendingCount = 0;\nvar sync = false;\nfunction schedule(fn, queue) {\n    if (sync) {\n        queue.delete(fn);\n        fn(0);\n    } else {\n        queue.add(fn);\n        start();\n    }\n}\nfunction start() {\n    if (ts < 0) {\n        ts = 0;\n        if (raf.frameLoop !== \"demand\") {\n            nativeRaf(loop);\n        }\n    }\n}\nfunction stop() {\n    ts = -1;\n}\nfunction loop() {\n    if (~ts) {\n        nativeRaf(loop);\n        raf.batchedUpdates(update);\n    }\n}\nfunction update() {\n    const prevTs = ts;\n    ts = raf.now();\n    const count = findTimeout(ts);\n    if (count) {\n        eachSafely(timeouts.splice(0, count), (t)=>t.handler());\n        pendingCount -= count;\n    }\n    if (!pendingCount) {\n        stop();\n        return;\n    }\n    onStartQueue.flush();\n    updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);\n    onFrameQueue.flush();\n    writeQueue.flush();\n    onFinishQueue.flush();\n}\nfunction makeQueue() {\n    let next = /* @__PURE__ */ new Set();\n    let current = next;\n    return {\n        add (fn) {\n            pendingCount += current == next && !next.has(fn) ? 1 : 0;\n            next.add(fn);\n        },\n        delete (fn) {\n            pendingCount -= current == next && next.has(fn) ? 1 : 0;\n            return next.delete(fn);\n        },\n        flush (arg) {\n            if (current.size) {\n                next = /* @__PURE__ */ new Set();\n                pendingCount -= current.size;\n                eachSafely(current, (fn)=>fn(arg) && next.add(fn));\n                pendingCount += next.size;\n                current = next;\n            }\n        }\n    };\n}\nfunction eachSafely(values, each2) {\n    values.forEach((value)=>{\n        try {\n            each2(value);\n        } catch (e) {\n            raf.catch(e);\n        }\n    });\n}\n// src/helpers.ts\nfunction noop() {}\nvar defineHidden = (obj, key, value)=>Object.defineProperty(obj, key, {\n        value,\n        writable: true,\n        configurable: true\n    });\nvar is = {\n    arr: Array.isArray,\n    obj: (a)=>!!a && a.constructor.name === \"Object\",\n    fun: (a)=>typeof a === \"function\",\n    str: (a)=>typeof a === \"string\",\n    num: (a)=>typeof a === \"number\",\n    und: (a)=>a === void 0\n};\nfunction isEqual(a, b) {\n    if (is.arr(a)) {\n        if (!is.arr(b) || a.length !== b.length) return false;\n        for(let i = 0; i < a.length; i++){\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n    return a === b;\n}\nvar each = (obj, fn)=>obj.forEach(fn);\nfunction eachProp(obj, fn, ctx) {\n    if (is.arr(obj)) {\n        for(let i = 0; i < obj.length; i++){\n            fn.call(ctx, obj[i], \"\".concat(i));\n        }\n        return;\n    }\n    for(const key in obj){\n        if (obj.hasOwnProperty(key)) {\n            fn.call(ctx, obj[key], key);\n        }\n    }\n}\nvar toArray = (a)=>is.und(a) ? [] : is.arr(a) ? a : [\n        a\n    ];\nfunction flush(queue, iterator) {\n    if (queue.size) {\n        const items = Array.from(queue);\n        queue.clear();\n        each(items, iterator);\n    }\n}\nvar flushCalls = function(queue) {\n    for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n        args[_key - 1] = arguments[_key];\n    }\n    return flush(queue, (fn)=>fn(...args));\n};\nvar isSSR = ()=> false || !window.navigator || /ServerSideRendering|^Deno\\//.test(window.navigator.userAgent);\n// src/globals.ts\nvar createStringInterpolator;\nvar to;\nvar colors = null;\nvar skipAnimation = false;\nvar willAdvance = noop;\nvar assign = (globals)=>{\n    if (globals.to) to = globals.to;\n    if (globals.now) raf.now = globals.now;\n    if (globals.colors !== void 0) colors = globals.colors;\n    if (globals.skipAnimation != null) skipAnimation = globals.skipAnimation;\n    if (globals.createStringInterpolator) createStringInterpolator = globals.createStringInterpolator;\n    if (globals.requestAnimationFrame) raf.use(globals.requestAnimationFrame);\n    if (globals.batchedUpdates) raf.batchedUpdates = globals.batchedUpdates;\n    if (globals.willAdvance) willAdvance = globals.willAdvance;\n    if (globals.frameLoop) raf.frameLoop = globals.frameLoop;\n};\n// src/FrameLoop.ts\nvar startQueue = /* @__PURE__ */ new Set();\nvar currentFrame = [];\nvar prevFrame = [];\nvar priority = 0;\nvar frameLoop = {\n    get idle () {\n        return !startQueue.size && !currentFrame.length;\n    },\n    /** Advance the given animation on every frame until idle. */ start (animation) {\n        if (priority > animation.priority) {\n            startQueue.add(animation);\n            raf.onStart(flushStartQueue);\n        } else {\n            startSafely(animation);\n            raf(advance);\n        }\n    },\n    /** Advance all animations by the given time. */ advance,\n    /** Call this when an animation's priority changes. */ sort (animation) {\n        if (priority) {\n            raf.onFrame(()=>frameLoop.sort(animation));\n        } else {\n            const prevIndex = currentFrame.indexOf(animation);\n            if (~prevIndex) {\n                currentFrame.splice(prevIndex, 1);\n                startUnsafely(animation);\n            }\n        }\n    },\n    /**\n   * Clear all animations. For testing purposes.\n   *\n   * ☠️ Never call this from within the frameloop.\n   */ clear () {\n        currentFrame = [];\n        startQueue.clear();\n    }\n};\nfunction flushStartQueue() {\n    startQueue.forEach(startSafely);\n    startQueue.clear();\n    raf(advance);\n}\nfunction startSafely(animation) {\n    if (!currentFrame.includes(animation)) startUnsafely(animation);\n}\nfunction startUnsafely(animation) {\n    currentFrame.splice(findIndex(currentFrame, (other)=>other.priority > animation.priority), 0, animation);\n}\nfunction advance(dt) {\n    const nextFrame = prevFrame;\n    for(let i = 0; i < currentFrame.length; i++){\n        const animation = currentFrame[i];\n        priority = animation.priority;\n        if (!animation.idle) {\n            willAdvance(animation);\n            animation.advance(dt);\n            if (!animation.idle) {\n                nextFrame.push(animation);\n            }\n        }\n    }\n    priority = 0;\n    prevFrame = currentFrame;\n    prevFrame.length = 0;\n    currentFrame = nextFrame;\n    return currentFrame.length > 0;\n}\nfunction findIndex(arr, test) {\n    const index = arr.findIndex(test);\n    return index < 0 ? arr.length : index;\n}\n// src/clamp.ts\nvar clamp = (min, max, v)=>Math.min(Math.max(v, min), max);\n// src/colors.ts\nvar colors2 = {\n    transparent: 0,\n    aliceblue: 4042850303,\n    antiquewhite: 4209760255,\n    aqua: 16777215,\n    aquamarine: 2147472639,\n    azure: 4043309055,\n    beige: 4126530815,\n    bisque: 4293182719,\n    black: 255,\n    blanchedalmond: 4293643775,\n    blue: 65535,\n    blueviolet: 2318131967,\n    brown: 2771004159,\n    burlywood: 3736635391,\n    burntsienna: 3934150143,\n    cadetblue: 1604231423,\n    chartreuse: 2147418367,\n    chocolate: 3530104575,\n    coral: 4286533887,\n    cornflowerblue: 1687547391,\n    cornsilk: 4294499583,\n    crimson: 3692313855,\n    cyan: 16777215,\n    darkblue: 35839,\n    darkcyan: 9145343,\n    darkgoldenrod: 3095792639,\n    darkgray: 2846468607,\n    darkgreen: 6553855,\n    darkgrey: 2846468607,\n    darkkhaki: 3182914559,\n    darkmagenta: 2332068863,\n    darkolivegreen: 1433087999,\n    darkorange: 4287365375,\n    darkorchid: 2570243327,\n    darkred: 2332033279,\n    darksalmon: 3918953215,\n    darkseagreen: 2411499519,\n    darkslateblue: 1211993087,\n    darkslategray: 793726975,\n    darkslategrey: 793726975,\n    darkturquoise: 13554175,\n    darkviolet: 2483082239,\n    deeppink: 4279538687,\n    deepskyblue: 12582911,\n    dimgray: 1768516095,\n    dimgrey: 1768516095,\n    dodgerblue: 512819199,\n    firebrick: 2988581631,\n    floralwhite: 4294635775,\n    forestgreen: 579543807,\n    fuchsia: 4278255615,\n    gainsboro: 3705462015,\n    ghostwhite: 4177068031,\n    gold: 4292280575,\n    goldenrod: 3668254975,\n    gray: 2155905279,\n    green: 8388863,\n    greenyellow: 2919182335,\n    grey: 2155905279,\n    honeydew: 4043305215,\n    hotpink: 4285117695,\n    indianred: 3445382399,\n    indigo: 1258324735,\n    ivory: 4294963455,\n    khaki: 4041641215,\n    lavender: 3873897215,\n    lavenderblush: 4293981695,\n    lawngreen: 2096890111,\n    lemonchiffon: 4294626815,\n    lightblue: 2916673279,\n    lightcoral: 4034953471,\n    lightcyan: 3774873599,\n    lightgoldenrodyellow: 4210742015,\n    lightgray: 3553874943,\n    lightgreen: 2431553791,\n    lightgrey: 3553874943,\n    lightpink: 4290167295,\n    lightsalmon: 4288707327,\n    lightseagreen: 548580095,\n    lightskyblue: 2278488831,\n    lightslategray: 2005441023,\n    lightslategrey: 2005441023,\n    lightsteelblue: 2965692159,\n    lightyellow: 4294959359,\n    lime: 16711935,\n    limegreen: 852308735,\n    linen: 4210091775,\n    magenta: 4278255615,\n    maroon: 2147483903,\n    mediumaquamarine: 1724754687,\n    mediumblue: 52735,\n    mediumorchid: 3126187007,\n    mediumpurple: 2473647103,\n    mediumseagreen: 1018393087,\n    mediumslateblue: 2070474495,\n    mediumspringgreen: 16423679,\n    mediumturquoise: 1221709055,\n    mediumvioletred: 3340076543,\n    midnightblue: 421097727,\n    mintcream: 4127193855,\n    mistyrose: 4293190143,\n    moccasin: 4293178879,\n    navajowhite: 4292783615,\n    navy: 33023,\n    oldlace: 4260751103,\n    olive: 2155872511,\n    olivedrab: 1804477439,\n    orange: 4289003775,\n    orangered: 4282712319,\n    orchid: 3664828159,\n    palegoldenrod: 4008225535,\n    palegreen: 2566625535,\n    paleturquoise: 2951671551,\n    palevioletred: 3681588223,\n    papayawhip: 4293907967,\n    peachpuff: 4292524543,\n    peru: 3448061951,\n    pink: 4290825215,\n    plum: 3718307327,\n    powderblue: 2967529215,\n    purple: 2147516671,\n    rebeccapurple: 1714657791,\n    red: 4278190335,\n    rosybrown: 3163525119,\n    royalblue: 1097458175,\n    saddlebrown: 2336560127,\n    salmon: 4202722047,\n    sandybrown: 4104413439,\n    seagreen: 780883967,\n    seashell: 4294307583,\n    sienna: 2689740287,\n    silver: 3233857791,\n    skyblue: 2278484991,\n    slateblue: 1784335871,\n    slategray: 1887473919,\n    slategrey: 1887473919,\n    snow: 4294638335,\n    springgreen: 16744447,\n    steelblue: 1182971135,\n    tan: 3535047935,\n    teal: 8421631,\n    thistle: 3636451583,\n    tomato: 4284696575,\n    turquoise: 1088475391,\n    violet: 4001558271,\n    wheat: 4125012991,\n    white: 4294967295,\n    whitesmoke: 4126537215,\n    yellow: 4294902015,\n    yellowgreen: 2597139199\n};\n// src/colorMatchers.ts\nvar NUMBER = \"[-+]?\\\\d*\\\\.?\\\\d+\";\nvar PERCENTAGE = NUMBER + \"%\";\nfunction call() {\n    for(var _len = arguments.length, parts = new Array(_len), _key = 0; _key < _len; _key++){\n        parts[_key] = arguments[_key];\n    }\n    return \"\\\\(\\\\s*(\" + parts.join(\")\\\\s*,\\\\s*(\") + \")\\\\s*\\\\)\";\n}\nvar rgb = new RegExp(\"rgb\" + call(NUMBER, NUMBER, NUMBER));\nvar rgba = new RegExp(\"rgba\" + call(NUMBER, NUMBER, NUMBER, NUMBER));\nvar hsl = new RegExp(\"hsl\" + call(NUMBER, PERCENTAGE, PERCENTAGE));\nvar hsla = new RegExp(\"hsla\" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\nvar hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nvar hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nvar hex6 = /^#([0-9a-fA-F]{6})$/;\nvar hex8 = /^#([0-9a-fA-F]{8})$/;\n// src/normalizeColor.ts\nfunction normalizeColor(color) {\n    let match;\n    if (typeof color === \"number\") {\n        return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;\n    }\n    if (match = hex6.exec(color)) return parseInt(match[1] + \"ff\", 16) >>> 0;\n    if (colors && colors[color] !== void 0) {\n        return colors[color];\n    }\n    if (match = rgb.exec(color)) {\n        return (parse255(match[1]) << 24 | // r\n        parse255(match[2]) << 16 | // g\n        parse255(match[3]) << 8 | // b\n        255) >>> // a\n        0;\n    }\n    if (match = rgba.exec(color)) {\n        return (parse255(match[1]) << 24 | // r\n        parse255(match[2]) << 16 | // g\n        parse255(match[3]) << 8 | // b\n        parse1(match[4])) >>> // a\n        0;\n    }\n    if (match = hex3.exec(color)) {\n        return parseInt(match[1] + match[1] + // r\n        match[2] + match[2] + // g\n        match[3] + match[3] + // b\n        \"ff\", // a\n        16) >>> 0;\n    }\n    if (match = hex8.exec(color)) return parseInt(match[1], 16) >>> 0;\n    if (match = hex4.exec(color)) {\n        return parseInt(match[1] + match[1] + // r\n        match[2] + match[2] + // g\n        match[3] + match[3] + // b\n        match[4] + match[4], // a\n        16) >>> 0;\n    }\n    if (match = hsl.exec(color)) {\n        return (hslToRgb(parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3])) | 255) >>> // a\n        0;\n    }\n    if (match = hsla.exec(color)) {\n        return (hslToRgb(parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3])) | parse1(match[4])) >>> // a\n        0;\n    }\n    return null;\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslToRgb(h, s, l) {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    const r = hue2rgb(p, q, h + 1 / 3);\n    const g = hue2rgb(p, q, h);\n    const b = hue2rgb(p, q, h - 1 / 3);\n    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\nfunction parse255(str) {\n    const int = parseInt(str, 10);\n    if (int < 0) return 0;\n    if (int > 255) return 255;\n    return int;\n}\nfunction parse360(str) {\n    const int = parseFloat(str);\n    return (int % 360 + 360) % 360 / 360;\n}\nfunction parse1(str) {\n    const num = parseFloat(str);\n    if (num < 0) return 0;\n    if (num > 1) return 255;\n    return Math.round(num * 255);\n}\nfunction parsePercentage(str) {\n    const int = parseFloat(str);\n    if (int < 0) return 0;\n    if (int > 100) return 1;\n    return int / 100;\n}\n// src/colorToRgba.ts\nfunction colorToRgba(input) {\n    let int32Color = normalizeColor(input);\n    if (int32Color === null) return input;\n    int32Color = int32Color || 0;\n    const r = (int32Color & 4278190080) >>> 24;\n    const g = (int32Color & 16711680) >>> 16;\n    const b = (int32Color & 65280) >>> 8;\n    const a = (int32Color & 255) / 255;\n    return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(a, \")\");\n}\n// src/createInterpolator.ts\nvar createInterpolator = (range, output, extrapolate)=>{\n    if (is.fun(range)) {\n        return range;\n    }\n    if (is.arr(range)) {\n        return createInterpolator({\n            range,\n            output,\n            extrapolate\n        });\n    }\n    if (is.str(range.output[0])) {\n        return createStringInterpolator(range);\n    }\n    const config = range;\n    const outputRange = config.output;\n    const inputRange = config.range || [\n        0,\n        1\n    ];\n    const extrapolateLeft = config.extrapolateLeft || config.extrapolate || \"extend\";\n    const extrapolateRight = config.extrapolateRight || config.extrapolate || \"extend\";\n    const easing = config.easing || ((t)=>t);\n    return (input)=>{\n        const range2 = findRange(input, inputRange);\n        return interpolate(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config.map);\n    };\n};\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {\n    let result = map ? map(input) : input;\n    if (result < inputMin) {\n        if (extrapolateLeft === \"identity\") return result;\n        else if (extrapolateLeft === \"clamp\") result = inputMin;\n    }\n    if (result > inputMax) {\n        if (extrapolateRight === \"identity\") return result;\n        else if (extrapolateRight === \"clamp\") result = inputMax;\n    }\n    if (outputMin === outputMax) return outputMin;\n    if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax;\n    if (inputMin === -Infinity) result = -result;\n    else if (inputMax === Infinity) result = result - inputMin;\n    else result = (result - inputMin) / (inputMax - inputMin);\n    result = easing(result);\n    if (outputMin === -Infinity) result = -result;\n    else if (outputMax === Infinity) result = result + outputMin;\n    else result = result * (outputMax - outputMin) + outputMin;\n    return result;\n}\nfunction findRange(input, inputRange) {\n    for(var i = 1; i < inputRange.length - 1; ++i)if (inputRange[i] >= input) break;\n    return i - 1;\n}\n// src/easings.ts\nvar steps = function(steps2) {\n    let direction = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : \"end\";\n    return (progress2)=>{\n        progress2 = direction === \"end\" ? Math.min(progress2, 0.999) : Math.max(progress2, 1e-3);\n        const expanded = progress2 * steps2;\n        const rounded = direction === \"end\" ? Math.floor(expanded) : Math.ceil(expanded);\n        return clamp(0, 1, rounded / steps2);\n    };\n};\nvar c1 = 1.70158;\nvar c2 = c1 * 1.525;\nvar c3 = c1 + 1;\nvar c4 = 2 * Math.PI / 3;\nvar c5 = 2 * Math.PI / 4.5;\nvar bounceOut = (x)=>{\n    const n1 = 7.5625;\n    const d1 = 2.75;\n    if (x < 1 / d1) {\n        return n1 * x * x;\n    } else if (x < 2 / d1) {\n        return n1 * (x -= 1.5 / d1) * x + 0.75;\n    } else if (x < 2.5 / d1) {\n        return n1 * (x -= 2.25 / d1) * x + 0.9375;\n    } else {\n        return n1 * (x -= 2.625 / d1) * x + 0.984375;\n    }\n};\nvar easings = {\n    linear: (x)=>x,\n    easeInQuad: (x)=>x * x,\n    easeOutQuad: (x)=>1 - (1 - x) * (1 - x),\n    easeInOutQuad: (x)=>x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2,\n    easeInCubic: (x)=>x * x * x,\n    easeOutCubic: (x)=>1 - Math.pow(1 - x, 3),\n    easeInOutCubic: (x)=>x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2,\n    easeInQuart: (x)=>x * x * x * x,\n    easeOutQuart: (x)=>1 - Math.pow(1 - x, 4),\n    easeInOutQuart: (x)=>x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2,\n    easeInQuint: (x)=>x * x * x * x * x,\n    easeOutQuint: (x)=>1 - Math.pow(1 - x, 5),\n    easeInOutQuint: (x)=>x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2,\n    easeInSine: (x)=>1 - Math.cos(x * Math.PI / 2),\n    easeOutSine: (x)=>Math.sin(x * Math.PI / 2),\n    easeInOutSine: (x)=>-(Math.cos(Math.PI * x) - 1) / 2,\n    easeInExpo: (x)=>x === 0 ? 0 : Math.pow(2, 10 * x - 10),\n    easeOutExpo: (x)=>x === 1 ? 1 : 1 - Math.pow(2, -10 * x),\n    easeInOutExpo: (x)=>x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? Math.pow(2, 20 * x - 10) / 2 : (2 - Math.pow(2, -20 * x + 10)) / 2,\n    easeInCirc: (x)=>1 - Math.sqrt(1 - Math.pow(x, 2)),\n    easeOutCirc: (x)=>Math.sqrt(1 - Math.pow(x - 1, 2)),\n    easeInOutCirc: (x)=>x < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2,\n    easeInBack: (x)=>c3 * x * x * x - c1 * x * x,\n    easeOutBack: (x)=>1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2),\n    easeInOutBack: (x)=>x < 0.5 ? Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2) / 2 : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2,\n    easeInElastic: (x)=>x === 0 ? 0 : x === 1 ? 1 : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4),\n    easeOutElastic: (x)=>x === 0 ? 0 : x === 1 ? 1 : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1,\n    easeInOutElastic: (x)=>x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c5)) / 2 : Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c5) / 2 + 1,\n    easeInBounce: (x)=>1 - bounceOut(1 - x),\n    easeOutBounce: bounceOut,\n    easeInOutBounce: (x)=>x < 0.5 ? (1 - bounceOut(1 - 2 * x)) / 2 : (1 + bounceOut(2 * x - 1)) / 2,\n    steps\n};\n// src/fluids.ts\nvar $get = Symbol.for(\"FluidValue.get\");\nvar $observers = Symbol.for(\"FluidValue.observers\");\nvar hasFluidValue = (arg)=>Boolean(arg && arg[$get]);\nvar getFluidValue = (arg)=>arg && arg[$get] ? arg[$get]() : arg;\nvar getFluidObservers = (target)=>target[$observers] || null;\nfunction callFluidObserver(observer2, event) {\n    if (observer2.eventObserved) {\n        observer2.eventObserved(event);\n    } else {\n        observer2(event);\n    }\n}\nfunction callFluidObservers(target, event) {\n    const observers = target[$observers];\n    if (observers) {\n        observers.forEach((observer2)=>{\n            callFluidObserver(observer2, event);\n        });\n    }\n}\nvar FluidValue = class {\n    constructor(get){\n        if (!get && !(get = this.get)) {\n            throw Error(\"Unknown getter\");\n        }\n        setFluidGetter(this, get);\n    }\n};\n$get, $observers;\nvar setFluidGetter = (target, get)=>setHidden(target, $get, get);\nfunction addFluidObserver(target, observer2) {\n    if (target[$get]) {\n        let observers = target[$observers];\n        if (!observers) {\n            setHidden(target, $observers, observers = /* @__PURE__ */ new Set());\n        }\n        if (!observers.has(observer2)) {\n            observers.add(observer2);\n            if (target.observerAdded) {\n                target.observerAdded(observers.size, observer2);\n            }\n        }\n    }\n    return observer2;\n}\nfunction removeFluidObserver(target, observer2) {\n    const observers = target[$observers];\n    if (observers && observers.has(observer2)) {\n        const count = observers.size - 1;\n        if (count) {\n            observers.delete(observer2);\n        } else {\n            target[$observers] = null;\n        }\n        if (target.observerRemoved) {\n            target.observerRemoved(count, observer2);\n        }\n    }\n}\nvar setHidden = (target, key, value)=>Object.defineProperty(target, key, {\n        value,\n        writable: true,\n        configurable: true\n    });\n// src/regexs.ts\nvar numberRegex = /[+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\nvar colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d\\.]+%?\\))/gi;\nvar unitRegex = new RegExp(\"(\".concat(numberRegex.source, \")(%|[a-z]+)\"), \"i\");\nvar rgbaRegex = /rgba\\(([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+)\\)/gi;\nvar cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\n// src/variableToRgba.ts\nvar variableToRgba = (input)=>{\n    const [token, fallback] = parseCSSVariable(input);\n    if (!token || isSSR()) {\n        return input;\n    }\n    const value = window.getComputedStyle(document.documentElement).getPropertyValue(token);\n    if (value) {\n        return value.trim();\n    } else if (fallback && fallback.startsWith(\"--\")) {\n        const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);\n        if (value2) {\n            return value2;\n        } else {\n            return input;\n        }\n    } else if (fallback && cssVariableRegex.test(fallback)) {\n        return variableToRgba(fallback);\n    } else if (fallback) {\n        return fallback;\n    }\n    return input;\n};\nvar parseCSSVariable = (current)=>{\n    const match = cssVariableRegex.exec(current);\n    if (!match) return [\n        , \n    ];\n    const [, token, fallback] = match;\n    return [\n        token,\n        fallback\n    ];\n};\n// src/stringInterpolation.ts\nvar namedColorRegex;\nvar rgbaRound = (_, p1, p2, p3, p4)=>\"rgba(\".concat(Math.round(p1), \", \").concat(Math.round(p2), \", \").concat(Math.round(p3), \", \").concat(p4, \")\");\nvar createStringInterpolator2 = (config)=>{\n    if (!namedColorRegex) namedColorRegex = colors ? // match color names, ignore partial matches\n    new RegExp(\"(\".concat(Object.keys(colors).join(\"|\"), \")(?!\\\\w)\"), \"g\") : // never match\n    /^\\b$/;\n    const output = config.output.map((value)=>{\n        return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);\n    });\n    const keyframes = output.map((value)=>value.match(numberRegex).map(Number));\n    const outputRanges = keyframes[0].map((_, i)=>keyframes.map((values)=>{\n            if (!(i in values)) {\n                throw Error('The arity of each \"output\" value must be equal');\n            }\n            return values[i];\n        }));\n    const interpolators = outputRanges.map((output2)=>createInterpolator({\n            ...config,\n            output: output2\n        }));\n    return (input)=>{\n        var _output_find;\n        const missingUnit = !unitRegex.test(output[0]) && ((_output_find = output.find((value)=>unitRegex.test(value))) === null || _output_find === void 0 ? void 0 : _output_find.replace(numberRegex, \"\"));\n        let i = 0;\n        return output[0].replace(numberRegex, ()=>\"\".concat(interpolators[i++](input)).concat(missingUnit || \"\")).replace(rgbaRegex, rgbaRound);\n    };\n};\n// src/deprecations.ts\nvar prefix = \"react-spring: \";\nvar once = (fn)=>{\n    const func = fn;\n    let called = false;\n    if (typeof func != \"function\") {\n        throw new TypeError(\"\".concat(prefix, \"once requires a function parameter\"));\n    }\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        if (!called) {\n            func(...args);\n            called = true;\n        }\n    };\n};\nvar warnInterpolate = once(console.warn);\nfunction deprecateInterpolate() {\n    warnInterpolate(\"\".concat(prefix, 'The \"interpolate\" function is deprecated in v9 (use \"to\" instead)'));\n}\nvar warnDirectCall = once(console.warn);\nfunction deprecateDirectCall() {\n    warnDirectCall(\"\".concat(prefix, 'Directly calling start instead of using the api object is deprecated in v9 (use \".start\" instead), this will be removed in later 0.X.0 versions'));\n}\n// src/isAnimatedString.ts\nfunction isAnimatedString(value) {\n    return is.str(value) && (value[0] == \"#\" || /\\d/.test(value) || // Do not identify a CSS variable as an AnimatedString if its SSR\n    !isSSR() && cssVariableRegex.test(value) || value in (colors || {}));\n}\n// src/dom-events/resize/resizeElement.ts\nvar observer;\nvar resizeHandlers = /* @__PURE__ */ new WeakMap();\nvar handleObservation = (entries)=>entries.forEach((param)=>{\n        let { target, contentRect } = param;\n        var _resizeHandlers_get;\n        return (_resizeHandlers_get = resizeHandlers.get(target)) === null || _resizeHandlers_get === void 0 ? void 0 : _resizeHandlers_get.forEach((handler)=>handler(contentRect));\n    });\nfunction resizeElement(handler, target) {\n    if (!observer) {\n        if (typeof ResizeObserver !== \"undefined\") {\n            observer = new ResizeObserver(handleObservation);\n        }\n    }\n    let elementHandlers = resizeHandlers.get(target);\n    if (!elementHandlers) {\n        elementHandlers = /* @__PURE__ */ new Set();\n        resizeHandlers.set(target, elementHandlers);\n    }\n    elementHandlers.add(handler);\n    if (observer) {\n        observer.observe(target);\n    }\n    return ()=>{\n        const elementHandlers2 = resizeHandlers.get(target);\n        if (!elementHandlers2) return;\n        elementHandlers2.delete(handler);\n        if (!elementHandlers2.size && observer) {\n            observer.unobserve(target);\n        }\n    };\n}\n// src/dom-events/resize/resizeWindow.ts\nvar listeners = /* @__PURE__ */ new Set();\nvar cleanupWindowResizeHandler;\nvar createResizeHandler = ()=>{\n    const handleResize = ()=>{\n        listeners.forEach((callback)=>callback({\n                width: window.innerWidth,\n                height: window.innerHeight\n            }));\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return ()=>{\n        window.removeEventListener(\"resize\", handleResize);\n    };\n};\nvar resizeWindow = (callback)=>{\n    listeners.add(callback);\n    if (!cleanupWindowResizeHandler) {\n        cleanupWindowResizeHandler = createResizeHandler();\n    }\n    return ()=>{\n        listeners.delete(callback);\n        if (!listeners.size && cleanupWindowResizeHandler) {\n            cleanupWindowResizeHandler();\n            cleanupWindowResizeHandler = void 0;\n        }\n    };\n};\n// src/dom-events/resize/index.ts\nvar onResize = function(callback) {\n    let { container = document.documentElement } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    if (container === document.documentElement) {\n        return resizeWindow(callback);\n    } else {\n        return resizeElement(callback, container);\n    }\n};\n// src/progress.ts\nvar progress = (min, max, value)=>max - min === 0 ? 1 : (value - min) / (max - min);\n// src/dom-events/scroll/ScrollHandler.ts\nvar SCROLL_KEYS = {\n    x: {\n        length: \"Width\",\n        position: \"Left\"\n    },\n    y: {\n        length: \"Height\",\n        position: \"Top\"\n    }\n};\nvar ScrollHandler = class {\n    constructor(callback, container){\n        this.createAxis = ()=>({\n                current: 0,\n                progress: 0,\n                scrollLength: 0\n            });\n        this.updateAxis = (axisName)=>{\n            const axis = this.info[axisName];\n            const { length, position } = SCROLL_KEYS[axisName];\n            axis.current = this.container[\"scroll\".concat(position)];\n            axis.scrollLength = this.container[\"scroll\" + length] - this.container[\"client\" + length];\n            axis.progress = progress(0, axis.scrollLength, axis.current);\n        };\n        this.update = ()=>{\n            this.updateAxis(\"x\");\n            this.updateAxis(\"y\");\n        };\n        this.sendEvent = ()=>{\n            this.callback(this.info);\n        };\n        this.advance = ()=>{\n            this.update();\n            this.sendEvent();\n        };\n        this.callback = callback;\n        this.container = container;\n        this.info = {\n            time: 0,\n            x: this.createAxis(),\n            y: this.createAxis()\n        };\n    }\n};\n// src/dom-events/scroll/index.ts\nvar scrollListeners = /* @__PURE__ */ new WeakMap();\nvar resizeListeners = /* @__PURE__ */ new WeakMap();\nvar onScrollHandlers = /* @__PURE__ */ new WeakMap();\nvar getTarget = (container)=>container === document.documentElement ? window : container;\nvar onScroll = function(callback) {\n    let { container = document.documentElement } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let containerHandlers = onScrollHandlers.get(container);\n    if (!containerHandlers) {\n        containerHandlers = /* @__PURE__ */ new Set();\n        onScrollHandlers.set(container, containerHandlers);\n    }\n    const containerHandler = new ScrollHandler(callback, container);\n    containerHandlers.add(containerHandler);\n    if (!scrollListeners.has(container)) {\n        const listener = ()=>{\n            containerHandlers === null || containerHandlers === void 0 ? void 0 : containerHandlers.forEach((handler)=>handler.advance());\n            return true;\n        };\n        scrollListeners.set(container, listener);\n        const target = getTarget(container);\n        window.addEventListener(\"resize\", listener, {\n            passive: true\n        });\n        if (container !== document.documentElement) {\n            resizeListeners.set(container, onResize(listener, {\n                container\n            }));\n        }\n        target.addEventListener(\"scroll\", listener, {\n            passive: true\n        });\n    }\n    const animateScroll = scrollListeners.get(container);\n    raf(animateScroll);\n    return ()=>{\n        raf.cancel(animateScroll);\n        const containerHandlers2 = onScrollHandlers.get(container);\n        if (!containerHandlers2) return;\n        containerHandlers2.delete(containerHandler);\n        if (containerHandlers2.size) return;\n        const listener = scrollListeners.get(container);\n        scrollListeners.delete(container);\n        if (listener) {\n            var _resizeListeners_get;\n            getTarget(container).removeEventListener(\"scroll\", listener);\n            window.removeEventListener(\"resize\", listener);\n            (_resizeListeners_get = resizeListeners.get(container)) === null || _resizeListeners_get === void 0 ? void 0 : _resizeListeners_get();\n        }\n    };\n};\n// src/hooks/useConstant.ts\n\nfunction useConstant(init) {\n    _s();\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n_s(useConstant, \"QMBuJFIdzLIeqBcFwhMf246mjOM=\");\n// src/hooks/useForceUpdate.ts\n\n// src/hooks/useIsMounted.ts\n\n// src/hooks/useIsomorphicLayoutEffect.ts\n\nvar useIsomorphicLayoutEffect = isSSR() ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\n// src/hooks/useIsMounted.ts\nvar useIsMounted = ()=>{\n    _s1();\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    useIsomorphicLayoutEffect(()=>{\n        isMounted.current = true;\n        return ()=>{\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n};\n_s1(useIsMounted, \"GqP4G6sWCYbmz6Eh2Z3j0cot7Cw=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_0__.useRef,\n        useIsomorphicLayoutEffect\n    ];\n});\n// src/hooks/useForceUpdate.ts\nfunction useForceUpdate() {\n    _s2();\n    const update2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)()[1];\n    const isMounted = useIsMounted();\n    return ()=>{\n        if (isMounted.current) {\n            update2(Math.random());\n        }\n    };\n}\n_s2(useForceUpdate, \"dAwzAW7N5iazLr46M/UqCRwjpnw=\", false, function() {\n    return [\n        useIsMounted\n    ];\n});\n// src/hooks/useMemoOne.ts\n\nfunction useMemoOne(getResult, inputs) {\n    _s3();\n    const [initial] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>({\n            inputs,\n            result: getResult()\n        }));\n    const committed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const prevCache = committed.current;\n    let cache = prevCache;\n    if (cache) {\n        const useCache = Boolean(inputs && cache.inputs && areInputsEqual(inputs, cache.inputs));\n        if (!useCache) {\n            cache = {\n                inputs,\n                result: getResult()\n            };\n        }\n    } else {\n        cache = initial;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        committed.current = cache;\n        if (prevCache == initial) {\n            initial.inputs = initial.result = void 0;\n        }\n    }, [\n        cache\n    ]);\n    return cache.result;\n}\n_s3(useMemoOne, \"E8Xkzq53aNWRw5eQWq1UgxrUZ2I=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_0__.useState,\n        react__WEBPACK_IMPORTED_MODULE_0__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect\n    ];\n});\nfunction areInputsEqual(next, prev) {\n    if (next.length !== prev.length) {\n        return false;\n    }\n    for(let i = 0; i < next.length; i++){\n        if (next[i] !== prev[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n// src/hooks/useOnce.ts\n\nvar useOnce = (effect)=>{\n    _s4();\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(effect, emptyDeps);\n};\n_s4(useOnce, \"OaUcBvmIE4tjZkb4wJgVrFeSKZM=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect\n    ];\n});\nvar emptyDeps = [];\n// src/hooks/usePrev.ts\n\nfunction usePrev(value) {\n    _s5();\n    const prevRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        prevRef.current = value;\n    });\n    return prevRef.current;\n}\n_s5(usePrev, \"I0hJAHPQfpBUlJyIK2lT9vxbY4Y=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_0__.useRef,\n        react__WEBPACK_IMPORTED_MODULE_0__.useEffect\n    ];\n});\n// src/hooks/useReducedMotion.ts\n\nvar useReducedMotion = ()=>{\n    _s6();\n    const [reducedMotion, setReducedMotion] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    useIsomorphicLayoutEffect(()=>{\n        const mql = window.matchMedia(\"(prefers-reduced-motion)\");\n        const handleMediaChange = (e)=>{\n            setReducedMotion(e.matches);\n            assign({\n                skipAnimation: e.matches\n            });\n        };\n        handleMediaChange(mql);\n        mql.addEventListener(\"change\", handleMediaChange);\n        return ()=>{\n            mql.removeEventListener(\"change\", handleMediaChange);\n        };\n    }, []);\n    return reducedMotion;\n};\n_s6(useReducedMotion, \"4F50ZPZIooo/aDgecWivihMvS7g=\", false, function() {\n    return [\n        react__WEBPACK_IMPORTED_MODULE_0__.useState,\n        useIsomorphicLayoutEffect\n    ];\n});\n //# sourceMappingURL=react-spring_shared.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3ByaW5nL3NoYXJlZC9kaXN0L3JlYWN0LXNwcmluZ19zaGFyZWQubW9kZXJuLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsSUFBSUEsWUFBWUMsT0FBT0MsY0FBYztBQUNyQyxJQUFJQyxXQUFXLENBQUNDLFFBQVFDO0lBQ3RCLElBQUssSUFBSUMsUUFBUUQsSUFDZkwsVUFBVUksUUFBUUUsTUFBTTtRQUFFQyxLQUFLRixHQUFHLENBQUNDLEtBQUs7UUFBRUUsWUFBWTtJQUFLO0FBQy9EO0FBRUEsaUJBQWlCO0FBQ2pCLElBQUlDLGtCQUFrQixDQUFDO0FBQ3ZCTixTQUFTTSxpQkFBaUI7SUFDeEJDLFFBQVEsSUFBTUE7SUFDZEMsUUFBUSxJQUFNQTtJQUNkQywwQkFBMEIsSUFBTUE7SUFDaENDLGVBQWUsSUFBTUE7SUFDckJDLElBQUksSUFBTUE7SUFDVkMsYUFBYSxJQUFNQTtBQUNyQjtBQUVBLDRDQUE0QztBQUM1QyxJQUFJQyxjQUFjQztBQUNsQixJQUFJQyxNQUFNLENBQUNDLEtBQU9DLFNBQVNELElBQUlIO0FBQy9CLElBQUlLLGFBQWFKO0FBQ2pCQyxJQUFJSSxLQUFLLEdBQUcsQ0FBQ0gsS0FBT0MsU0FBU0QsSUFBSUU7QUFDakMsSUFBSUUsZUFBZU47QUFDbkJDLElBQUlNLE9BQU8sR0FBRyxDQUFDTCxLQUFPQyxTQUFTRCxJQUFJSTtBQUNuQyxJQUFJRSxlQUFlUjtBQUNuQkMsSUFBSVEsT0FBTyxHQUFHLENBQUNQLEtBQU9DLFNBQVNELElBQUlNO0FBQ25DLElBQUlFLGdCQUFnQlY7QUFDcEJDLElBQUlVLFFBQVEsR0FBRyxDQUFDVCxLQUFPQyxTQUFTRCxJQUFJUTtBQUNwQyxJQUFJRSxXQUFXLEVBQUU7QUFDakJYLElBQUlZLFVBQVUsR0FBRyxDQUFDQyxTQUFTQztJQUN6QixN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LEVBQUUsRUFBRTtZQUN2QixPQUFPO1FBQ1Q7SUFDRjtJQUNBLE9BQU87QUFDVDtBQUVBLHVCQUF1QjtBQUN5QjtBQUNoRCxJQUFJa2dCLFVBQVUsQ0FBQ0M7O0lBQVdGLE9BQUFBLGdEQUFVQSxDQUFDRSxRQUFRQztBQUFTO0lBQWxERjs7UUFBc0JELDRDQUFVQTs7O0FBQ3BDLElBQUlHLFlBQVksRUFBRTtBQUVsQix1QkFBdUI7QUFDNEM7QUFDbkUsU0FBU0csUUFBUXBkLEtBQUs7O0lBQ3BCLE1BQU1xZCxVQUFVRiw2Q0FBT0E7SUFDdkJELGdEQUFVQSxDQUFDO1FBQ1RHLFFBQVE1ZCxPQUFPLEdBQUdPO0lBQ3BCO0lBQ0EsT0FBT3FkLFFBQVE1ZCxPQUFPO0FBQ3hCO0lBTlMyZDs7UUFDU0QseUNBQU9BO1FBQ3ZCRCw0Q0FBVUE7OztBQU1aLGdDQUFnQztBQUNjO0FBQzlDLElBQUlLLG1CQUFtQjs7SUFDckIsTUFBTSxDQUFDQyxlQUFlQyxpQkFBaUIsR0FBR0gsK0NBQVNBLENBQUM7SUFDcEQzQiwwQkFBMEI7UUFDeEIsTUFBTStCLE1BQU0zZixPQUFPNGYsVUFBVSxDQUFDO1FBQzlCLE1BQU1DLG9CQUFvQixDQUFDM2Q7WUFDekJ3ZCxpQkFBaUJ4ZCxFQUFFNGQsT0FBTztZQUMxQjFpQixPQUFPO2dCQUNMRyxlQUFlMkUsRUFBRTRkLE9BQU87WUFDMUI7UUFDRjtRQUNBRCxrQkFBa0JGO1FBQ2xCQSxJQUFJbkUsZ0JBQWdCLENBQUMsVUFBVXFFO1FBQy9CLE9BQU87WUFDTEYsSUFBSWxFLG1CQUFtQixDQUFDLFVBQVVvRTtRQUNwQztJQUNGLEdBQUcsRUFBRTtJQUNMLE9BQU9KO0FBQ1Q7SUFqQklEOztRQUN3Q0QsMkNBQVNBO1FBQ25EM0I7OztBQW1FQSxDQUNGLHVEQUF1RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXNwcmluZy9zaGFyZWQvZGlzdC9yZWFjdC1zcHJpbmdfc2hhcmVkLm1vZGVybi5tanM/MTliMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19kZWZQcm9wID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIF9fZXhwb3J0ID0gKHRhcmdldCwgYWxsKSA9PiB7XG4gIGZvciAodmFyIG5hbWUgaW4gYWxsKVxuICAgIF9fZGVmUHJvcCh0YXJnZXQsIG5hbWUsIHsgZ2V0OiBhbGxbbmFtZV0sIGVudW1lcmFibGU6IHRydWUgfSk7XG59O1xuXG4vLyBzcmMvZ2xvYmFscy50c1xudmFyIGdsb2JhbHNfZXhwb3J0cyA9IHt9O1xuX19leHBvcnQoZ2xvYmFsc19leHBvcnRzLCB7XG4gIGFzc2lnbjogKCkgPT4gYXNzaWduLFxuICBjb2xvcnM6ICgpID0+IGNvbG9ycyxcbiAgY3JlYXRlU3RyaW5nSW50ZXJwb2xhdG9yOiAoKSA9PiBjcmVhdGVTdHJpbmdJbnRlcnBvbGF0b3IsXG4gIHNraXBBbmltYXRpb246ICgpID0+IHNraXBBbmltYXRpb24sXG4gIHRvOiAoKSA9PiB0byxcbiAgd2lsbEFkdmFuY2U6ICgpID0+IHdpbGxBZHZhbmNlXG59KTtcblxuLy8gLi4vcmFmei9kaXN0L3JlYWN0LXNwcmluZ19yYWZ6Lm1vZGVybi5tanNcbnZhciB1cGRhdGVRdWV1ZSA9IG1ha2VRdWV1ZSgpO1xudmFyIHJhZiA9IChmbikgPT4gc2NoZWR1bGUoZm4sIHVwZGF0ZVF1ZXVlKTtcbnZhciB3cml0ZVF1ZXVlID0gbWFrZVF1ZXVlKCk7XG5yYWYud3JpdGUgPSAoZm4pID0+IHNjaGVkdWxlKGZuLCB3cml0ZVF1ZXVlKTtcbnZhciBvblN0YXJ0UXVldWUgPSBtYWtlUXVldWUoKTtcbnJhZi5vblN0YXJ0ID0gKGZuKSA9PiBzY2hlZHVsZShmbiwgb25TdGFydFF1ZXVlKTtcbnZhciBvbkZyYW1lUXVldWUgPSBtYWtlUXVldWUoKTtcbnJhZi5vbkZyYW1lID0gKGZuKSA9PiBzY2hlZHVsZShmbiwgb25GcmFtZVF1ZXVlKTtcbnZhciBvbkZpbmlzaFF1ZXVlID0gbWFrZVF1ZXVlKCk7XG5yYWYub25GaW5pc2ggPSAoZm4pID0+IHNjaGVkdWxlKGZuLCBvbkZpbmlzaFF1ZXVlKTtcbnZhciB0aW1lb3V0cyA9IFtdO1xucmFmLnNldFRpbWVvdXQgPSAoaGFuZGxlciwgbXMpID0+IHtcbiAgY29uc3QgdGltZSA9IHJhZi5ub3coKSArIG1zO1xuICBjb25zdCBjYW5jZWwgPSAoKSA9PiB7XG4gICAgY29uc3QgaSA9IHRpbWVvdXRzLmZpbmRJbmRleCgodCkgPT4gdC5jYW5jZWwgPT0gY2FuY2VsKTtcbiAgICBpZiAofmkpXG4gICAgICB0aW1lb3V0cy5zcGxpY2UoaSwgMSk7XG4gICAgcGVuZGluZ0NvdW50IC09IH5pID8gMSA6IDA7XG4gIH07XG4gIGNvbnN0IHRpbWVvdXQgPSB7IHRpbWUsIGhhbmRsZXIsIGNhbmNlbCB9O1xuICB0aW1lb3V0cy5zcGxpY2UoZmluZFRpbWVvdXQodGltZSksIDAsIHRpbWVvdXQpO1xuICBwZW5kaW5nQ291bnQgKz0gMTtcbiAgc3RhcnQoKTtcbiAgcmV0dXJuIHRpbWVvdXQ7XG59O1xudmFyIGZpbmRUaW1lb3V0ID0gKHRpbWUpID0+IH4ofnRpbWVvdXRzLmZpbmRJbmRleCgodCkgPT4gdC50aW1lID4gdGltZSkgfHwgfnRpbWVvdXRzLmxlbmd0aCk7XG5yYWYuY2FuY2VsID0gKGZuKSA9PiB7XG4gIG9uU3RhcnRRdWV1ZS5kZWxldGUoZm4pO1xuICBvbkZyYW1lUXVldWUuZGVsZXRlKGZuKTtcbiAgb25GaW5pc2hRdWV1ZS5kZWxldGUoZm4pO1xuICB1cGRhdGVRdWV1ZS5kZWxldGUoZm4pO1xuICB3cml0ZVF1ZXVlLmRlbGV0ZShmbik7XG59O1xucmFmLnN5bmMgPSAoZm4pID0+IHtcbiAgc3luYyA9IHRydWU7XG4gIHJhZi5iYXRjaGVkVXBkYXRlcyhmbik7XG4gIHN5bmMgPSBmYWxzZTtcbn07XG5yYWYudGhyb3R0bGUgPSAoZm4pID0+IHtcbiAgbGV0IGxhc3RBcmdzO1xuICBmdW5jdGlvbiBxdWV1ZWRGbigpIHtcbiAgICB0cnkge1xuICAgICAgZm4oLi4ubGFzdEFyZ3MpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBsYXN0QXJncyA9IG51bGw7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHRocm90dGxlZCguLi5hcmdzKSB7XG4gICAgbGFzdEFyZ3MgPSBhcmdzO1xuICAgIHJhZi5vblN0YXJ0KHF1ZXVlZEZuKTtcbiAgfVxuICB0aHJvdHRsZWQuaGFuZGxlciA9IGZuO1xuICB0aHJvdHRsZWQuY2FuY2VsID0gKCkgPT4ge1xuICAgIG9uU3RhcnRRdWV1ZS5kZWxldGUocXVldWVkRm4pO1xuICAgIGxhc3RBcmdzID0gbnVsbDtcbiAgfTtcbiAgcmV0dXJuIHRocm90dGxlZDtcbn07XG52YXIgbmF0aXZlUmFmID0gdHlwZW9mIHdpbmRvdyAhPSBcInVuZGVmaW5lZFwiID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA6IChcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1lbXB0eS1mdW5jdGlvblxuICAoKSA9PiB7XG4gIH1cbik7XG5yYWYudXNlID0gKGltcGwpID0+IG5hdGl2ZVJhZiA9IGltcGw7XG5yYWYubm93ID0gdHlwZW9mIHBlcmZvcm1hbmNlICE9IFwidW5kZWZpbmVkXCIgPyAoKSA9PiBwZXJmb3JtYW5jZS5ub3coKSA6IERhdGUubm93O1xucmFmLmJhdGNoZWRVcGRhdGVzID0gKGZuKSA9PiBmbigpO1xucmFmLmNhdGNoID0gY29uc29sZS5lcnJvcjtcbnJhZi5mcmFtZUxvb3AgPSBcImFsd2F5c1wiO1xucmFmLmFkdmFuY2UgPSAoKSA9PiB7XG4gIGlmIChyYWYuZnJhbWVMb29wICE9PSBcImRlbWFuZFwiKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgXCJDYW5ub3QgY2FsbCB0aGUgbWFudWFsIGFkdmFuY2VtZW50IG9mIHJhZnogd2hpbHN0IGZyYW1lTG9vcCBpcyBub3Qgc2V0IGFzIGRlbWFuZFwiXG4gICAgKTtcbiAgfSBlbHNlIHtcbiAgICB1cGRhdGUoKTtcbiAgfVxufTtcbnZhciB0cyA9IC0xO1xudmFyIHBlbmRpbmdDb3VudCA9IDA7XG52YXIgc3luYyA9IGZhbHNlO1xuZnVuY3Rpb24gc2NoZWR1bGUoZm4sIHF1ZXVlKSB7XG4gIGlmIChzeW5jKSB7XG4gICAgcXVldWUuZGVsZXRlKGZuKTtcbiAgICBmbigwKTtcbiAgfSBlbHNlIHtcbiAgICBxdWV1ZS5hZGQoZm4pO1xuICAgIHN0YXJ0KCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHN0YXJ0KCkge1xuICBpZiAodHMgPCAwKSB7XG4gICAgdHMgPSAwO1xuICAgIGlmIChyYWYuZnJhbWVMb29wICE9PSBcImRlbWFuZFwiKSB7XG4gICAgICBuYXRpdmVSYWYobG9vcCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzdG9wKCkge1xuICB0cyA9IC0xO1xufVxuZnVuY3Rpb24gbG9vcCgpIHtcbiAgaWYgKH50cykge1xuICAgIG5hdGl2ZVJhZihsb29wKTtcbiAgICByYWYuYmF0Y2hlZFVwZGF0ZXModXBkYXRlKTtcbiAgfVxufVxuZnVuY3Rpb24gdXBkYXRlKCkge1xuICBjb25zdCBwcmV2VHMgPSB0cztcbiAgdHMgPSByYWYubm93KCk7XG4gIGNvbnN0IGNvdW50ID0gZmluZFRpbWVvdXQodHMpO1xuICBpZiAoY291bnQpIHtcbiAgICBlYWNoU2FmZWx5KHRpbWVvdXRzLnNwbGljZSgwLCBjb3VudCksICh0KSA9PiB0LmhhbmRsZXIoKSk7XG4gICAgcGVuZGluZ0NvdW50IC09IGNvdW50O1xuICB9XG4gIGlmICghcGVuZGluZ0NvdW50KSB7XG4gICAgc3RvcCgpO1xuICAgIHJldHVybjtcbiAgfVxuICBvblN0YXJ0UXVldWUuZmx1c2goKTtcbiAgdXBkYXRlUXVldWUuZmx1c2gocHJldlRzID8gTWF0aC5taW4oNjQsIHRzIC0gcHJldlRzKSA6IDE2LjY2Nyk7XG4gIG9uRnJhbWVRdWV1ZS5mbHVzaCgpO1xuICB3cml0ZVF1ZXVlLmZsdXNoKCk7XG4gIG9uRmluaXNoUXVldWUuZmx1c2goKTtcbn1cbmZ1bmN0aW9uIG1ha2VRdWV1ZSgpIHtcbiAgbGV0IG5leHQgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBsZXQgY3VycmVudCA9IG5leHQ7XG4gIHJldHVybiB7XG4gICAgYWRkKGZuKSB7XG4gICAgICBwZW5kaW5nQ291bnQgKz0gY3VycmVudCA9PSBuZXh0ICYmICFuZXh0LmhhcyhmbikgPyAxIDogMDtcbiAgICAgIG5leHQuYWRkKGZuKTtcbiAgICB9LFxuICAgIGRlbGV0ZShmbikge1xuICAgICAgcGVuZGluZ0NvdW50IC09IGN1cnJlbnQgPT0gbmV4dCAmJiBuZXh0LmhhcyhmbikgPyAxIDogMDtcbiAgICAgIHJldHVybiBuZXh0LmRlbGV0ZShmbik7XG4gICAgfSxcbiAgICBmbHVzaChhcmcpIHtcbiAgICAgIGlmIChjdXJyZW50LnNpemUpIHtcbiAgICAgICAgbmV4dCA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgICAgIHBlbmRpbmdDb3VudCAtPSBjdXJyZW50LnNpemU7XG4gICAgICAgIGVhY2hTYWZlbHkoY3VycmVudCwgKGZuKSA9PiBmbihhcmcpICYmIG5leHQuYWRkKGZuKSk7XG4gICAgICAgIHBlbmRpbmdDb3VudCArPSBuZXh0LnNpemU7XG4gICAgICAgIGN1cnJlbnQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIGVhY2hTYWZlbHkodmFsdWVzLCBlYWNoMikge1xuICB2YWx1ZXMuZm9yRWFjaCgodmFsdWUpID0+IHtcbiAgICB0cnkge1xuICAgICAgZWFjaDIodmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJhZi5jYXRjaChlKTtcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBzcmMvaGVscGVycy50c1xuZnVuY3Rpb24gbm9vcCgpIHtcbn1cbnZhciBkZWZpbmVIaWRkZW4gPSAob2JqLCBrZXksIHZhbHVlKSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWUsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XG52YXIgaXMgPSB7XG4gIGFycjogQXJyYXkuaXNBcnJheSxcbiAgb2JqOiAoYSkgPT4gISFhICYmIGEuY29uc3RydWN0b3IubmFtZSA9PT0gXCJPYmplY3RcIixcbiAgZnVuOiAoYSkgPT4gdHlwZW9mIGEgPT09IFwiZnVuY3Rpb25cIixcbiAgc3RyOiAoYSkgPT4gdHlwZW9mIGEgPT09IFwic3RyaW5nXCIsXG4gIG51bTogKGEpID0+IHR5cGVvZiBhID09PSBcIm51bWJlclwiLFxuICB1bmQ6IChhKSA9PiBhID09PSB2b2lkIDBcbn07XG5mdW5jdGlvbiBpc0VxdWFsKGEsIGIpIHtcbiAgaWYgKGlzLmFycihhKSkge1xuICAgIGlmICghaXMuYXJyKGIpIHx8IGEubGVuZ3RoICE9PSBiLmxlbmd0aClcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhW2ldICE9PSBiW2ldKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiBhID09PSBiO1xufVxudmFyIGVhY2ggPSAob2JqLCBmbikgPT4gb2JqLmZvckVhY2goZm4pO1xuZnVuY3Rpb24gZWFjaFByb3Aob2JqLCBmbiwgY3R4KSB7XG4gIGlmIChpcy5hcnIob2JqKSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKGN0eCwgb2JqW2ldLCBgJHtpfWApO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICBmbi5jYWxsKGN0eCwgb2JqW2tleV0sIGtleSk7XG4gICAgfVxuICB9XG59XG52YXIgdG9BcnJheSA9IChhKSA9PiBpcy51bmQoYSkgPyBbXSA6IGlzLmFycihhKSA/IGEgOiBbYV07XG5mdW5jdGlvbiBmbHVzaChxdWV1ZSwgaXRlcmF0b3IpIHtcbiAgaWYgKHF1ZXVlLnNpemUpIHtcbiAgICBjb25zdCBpdGVtcyA9IEFycmF5LmZyb20ocXVldWUpO1xuICAgIHF1ZXVlLmNsZWFyKCk7XG4gICAgZWFjaChpdGVtcywgaXRlcmF0b3IpO1xuICB9XG59XG52YXIgZmx1c2hDYWxscyA9IChxdWV1ZSwgLi4uYXJncykgPT4gZmx1c2gocXVldWUsIChmbikgPT4gZm4oLi4uYXJncykpO1xudmFyIGlzU1NSID0gKCkgPT4gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhd2luZG93Lm5hdmlnYXRvciB8fCAvU2VydmVyU2lkZVJlbmRlcmluZ3xeRGVub1xcLy8udGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbi8vIHNyYy9nbG9iYWxzLnRzXG52YXIgY3JlYXRlU3RyaW5nSW50ZXJwb2xhdG9yO1xudmFyIHRvO1xudmFyIGNvbG9ycyA9IG51bGw7XG52YXIgc2tpcEFuaW1hdGlvbiA9IGZhbHNlO1xudmFyIHdpbGxBZHZhbmNlID0gbm9vcDtcbnZhciBhc3NpZ24gPSAoZ2xvYmFscykgPT4ge1xuICBpZiAoZ2xvYmFscy50bylcbiAgICB0byA9IGdsb2JhbHMudG87XG4gIGlmIChnbG9iYWxzLm5vdylcbiAgICByYWYubm93ID0gZ2xvYmFscy5ub3c7XG4gIGlmIChnbG9iYWxzLmNvbG9ycyAhPT0gdm9pZCAwKVxuICAgIGNvbG9ycyA9IGdsb2JhbHMuY29sb3JzO1xuICBpZiAoZ2xvYmFscy5za2lwQW5pbWF0aW9uICE9IG51bGwpXG4gICAgc2tpcEFuaW1hdGlvbiA9IGdsb2JhbHMuc2tpcEFuaW1hdGlvbjtcbiAgaWYgKGdsb2JhbHMuY3JlYXRlU3RyaW5nSW50ZXJwb2xhdG9yKVxuICAgIGNyZWF0ZVN0cmluZ0ludGVycG9sYXRvciA9IGdsb2JhbHMuY3JlYXRlU3RyaW5nSW50ZXJwb2xhdG9yO1xuICBpZiAoZ2xvYmFscy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpXG4gICAgcmFmLnVzZShnbG9iYWxzLnJlcXVlc3RBbmltYXRpb25GcmFtZSk7XG4gIGlmIChnbG9iYWxzLmJhdGNoZWRVcGRhdGVzKVxuICAgIHJhZi5iYXRjaGVkVXBkYXRlcyA9IGdsb2JhbHMuYmF0Y2hlZFVwZGF0ZXM7XG4gIGlmIChnbG9iYWxzLndpbGxBZHZhbmNlKVxuICAgIHdpbGxBZHZhbmNlID0gZ2xvYmFscy53aWxsQWR2YW5jZTtcbiAgaWYgKGdsb2JhbHMuZnJhbWVMb29wKVxuICAgIHJhZi5mcmFtZUxvb3AgPSBnbG9iYWxzLmZyYW1lTG9vcDtcbn07XG5cbi8vIHNyYy9GcmFtZUxvb3AudHNcbnZhciBzdGFydFF1ZXVlID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbnZhciBjdXJyZW50RnJhbWUgPSBbXTtcbnZhciBwcmV2RnJhbWUgPSBbXTtcbnZhciBwcmlvcml0eSA9IDA7XG52YXIgZnJhbWVMb29wID0ge1xuICBnZXQgaWRsZSgpIHtcbiAgICByZXR1cm4gIXN0YXJ0UXVldWUuc2l6ZSAmJiAhY3VycmVudEZyYW1lLmxlbmd0aDtcbiAgfSxcbiAgLyoqIEFkdmFuY2UgdGhlIGdpdmVuIGFuaW1hdGlvbiBvbiBldmVyeSBmcmFtZSB1bnRpbCBpZGxlLiAqL1xuICBzdGFydChhbmltYXRpb24pIHtcbiAgICBpZiAocHJpb3JpdHkgPiBhbmltYXRpb24ucHJpb3JpdHkpIHtcbiAgICAgIHN0YXJ0UXVldWUuYWRkKGFuaW1hdGlvbik7XG4gICAgICByYWYub25TdGFydChmbHVzaFN0YXJ0UXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGFydFNhZmVseShhbmltYXRpb24pO1xuICAgICAgcmFmKGFkdmFuY2UpO1xuICAgIH1cbiAgfSxcbiAgLyoqIEFkdmFuY2UgYWxsIGFuaW1hdGlvbnMgYnkgdGhlIGdpdmVuIHRpbWUuICovXG4gIGFkdmFuY2UsXG4gIC8qKiBDYWxsIHRoaXMgd2hlbiBhbiBhbmltYXRpb24ncyBwcmlvcml0eSBjaGFuZ2VzLiAqL1xuICBzb3J0KGFuaW1hdGlvbikge1xuICAgIGlmIChwcmlvcml0eSkge1xuICAgICAgcmFmLm9uRnJhbWUoKCkgPT4gZnJhbWVMb29wLnNvcnQoYW5pbWF0aW9uKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHByZXZJbmRleCA9IGN1cnJlbnRGcmFtZS5pbmRleE9mKGFuaW1hdGlvbik7XG4gICAgICBpZiAofnByZXZJbmRleCkge1xuICAgICAgICBjdXJyZW50RnJhbWUuc3BsaWNlKHByZXZJbmRleCwgMSk7XG4gICAgICAgIHN0YXJ0VW5zYWZlbHkoYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgYW5pbWF0aW9ucy4gRm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gICAqXG4gICAqIOKYoO+4jyBOZXZlciBjYWxsIHRoaXMgZnJvbSB3aXRoaW4gdGhlIGZyYW1lbG9vcC5cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIGN1cnJlbnRGcmFtZSA9IFtdO1xuICAgIHN0YXJ0UXVldWUuY2xlYXIoKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGZsdXNoU3RhcnRRdWV1ZSgpIHtcbiAgc3RhcnRRdWV1ZS5mb3JFYWNoKHN0YXJ0U2FmZWx5KTtcbiAgc3RhcnRRdWV1ZS5jbGVhcigpO1xuICByYWYoYWR2YW5jZSk7XG59XG5mdW5jdGlvbiBzdGFydFNhZmVseShhbmltYXRpb24pIHtcbiAgaWYgKCFjdXJyZW50RnJhbWUuaW5jbHVkZXMoYW5pbWF0aW9uKSlcbiAgICBzdGFydFVuc2FmZWx5KGFuaW1hdGlvbik7XG59XG5mdW5jdGlvbiBzdGFydFVuc2FmZWx5KGFuaW1hdGlvbikge1xuICBjdXJyZW50RnJhbWUuc3BsaWNlKFxuICAgIGZpbmRJbmRleChjdXJyZW50RnJhbWUsIChvdGhlcikgPT4gb3RoZXIucHJpb3JpdHkgPiBhbmltYXRpb24ucHJpb3JpdHkpLFxuICAgIDAsXG4gICAgYW5pbWF0aW9uXG4gICk7XG59XG5mdW5jdGlvbiBhZHZhbmNlKGR0KSB7XG4gIGNvbnN0IG5leHRGcmFtZSA9IHByZXZGcmFtZTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50RnJhbWUubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhbmltYXRpb24gPSBjdXJyZW50RnJhbWVbaV07XG4gICAgcHJpb3JpdHkgPSBhbmltYXRpb24ucHJpb3JpdHk7XG4gICAgaWYgKCFhbmltYXRpb24uaWRsZSkge1xuICAgICAgd2lsbEFkdmFuY2UoYW5pbWF0aW9uKTtcbiAgICAgIGFuaW1hdGlvbi5hZHZhbmNlKGR0KTtcbiAgICAgIGlmICghYW5pbWF0aW9uLmlkbGUpIHtcbiAgICAgICAgbmV4dEZyYW1lLnB1c2goYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcHJpb3JpdHkgPSAwO1xuICBwcmV2RnJhbWUgPSBjdXJyZW50RnJhbWU7XG4gIHByZXZGcmFtZS5sZW5ndGggPSAwO1xuICBjdXJyZW50RnJhbWUgPSBuZXh0RnJhbWU7XG4gIHJldHVybiBjdXJyZW50RnJhbWUubGVuZ3RoID4gMDtcbn1cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIHRlc3QpIHtcbiAgY29uc3QgaW5kZXggPSBhcnIuZmluZEluZGV4KHRlc3QpO1xuICByZXR1cm4gaW5kZXggPCAwID8gYXJyLmxlbmd0aCA6IGluZGV4O1xufVxuXG4vLyBzcmMvY2xhbXAudHNcbnZhciBjbGFtcCA9IChtaW4sIG1heCwgdikgPT4gTWF0aC5taW4oTWF0aC5tYXgodiwgbWluKSwgbWF4KTtcblxuLy8gc3JjL2NvbG9ycy50c1xudmFyIGNvbG9yczIgPSB7XG4gIHRyYW5zcGFyZW50OiAwLFxuICBhbGljZWJsdWU6IDQwNDI4NTAzMDMsXG4gIGFudGlxdWV3aGl0ZTogNDIwOTc2MDI1NSxcbiAgYXF1YTogMTY3NzcyMTUsXG4gIGFxdWFtYXJpbmU6IDIxNDc0NzI2MzksXG4gIGF6dXJlOiA0MDQzMzA5MDU1LFxuICBiZWlnZTogNDEyNjUzMDgxNSxcbiAgYmlzcXVlOiA0MjkzMTgyNzE5LFxuICBibGFjazogMjU1LFxuICBibGFuY2hlZGFsbW9uZDogNDI5MzY0Mzc3NSxcbiAgYmx1ZTogNjU1MzUsXG4gIGJsdWV2aW9sZXQ6IDIzMTgxMzE5NjcsXG4gIGJyb3duOiAyNzcxMDA0MTU5LFxuICBidXJseXdvb2Q6IDM3MzY2MzUzOTEsXG4gIGJ1cm50c2llbm5hOiAzOTM0MTUwMTQzLFxuICBjYWRldGJsdWU6IDE2MDQyMzE0MjMsXG4gIGNoYXJ0cmV1c2U6IDIxNDc0MTgzNjcsXG4gIGNob2NvbGF0ZTogMzUzMDEwNDU3NSxcbiAgY29yYWw6IDQyODY1MzM4ODcsXG4gIGNvcm5mbG93ZXJibHVlOiAxNjg3NTQ3MzkxLFxuICBjb3Juc2lsazogNDI5NDQ5OTU4MyxcbiAgY3JpbXNvbjogMzY5MjMxMzg1NSxcbiAgY3lhbjogMTY3NzcyMTUsXG4gIGRhcmtibHVlOiAzNTgzOSxcbiAgZGFya2N5YW46IDkxNDUzNDMsXG4gIGRhcmtnb2xkZW5yb2Q6IDMwOTU3OTI2MzksXG4gIGRhcmtncmF5OiAyODQ2NDY4NjA3LFxuICBkYXJrZ3JlZW46IDY1NTM4NTUsXG4gIGRhcmtncmV5OiAyODQ2NDY4NjA3LFxuICBkYXJra2hha2k6IDMxODI5MTQ1NTksXG4gIGRhcmttYWdlbnRhOiAyMzMyMDY4ODYzLFxuICBkYXJrb2xpdmVncmVlbjogMTQzMzA4Nzk5OSxcbiAgZGFya29yYW5nZTogNDI4NzM2NTM3NSxcbiAgZGFya29yY2hpZDogMjU3MDI0MzMyNyxcbiAgZGFya3JlZDogMjMzMjAzMzI3OSxcbiAgZGFya3NhbG1vbjogMzkxODk1MzIxNSxcbiAgZGFya3NlYWdyZWVuOiAyNDExNDk5NTE5LFxuICBkYXJrc2xhdGVibHVlOiAxMjExOTkzMDg3LFxuICBkYXJrc2xhdGVncmF5OiA3OTM3MjY5NzUsXG4gIGRhcmtzbGF0ZWdyZXk6IDc5MzcyNjk3NSxcbiAgZGFya3R1cnF1b2lzZTogMTM1NTQxNzUsXG4gIGRhcmt2aW9sZXQ6IDI0ODMwODIyMzksXG4gIGRlZXBwaW5rOiA0Mjc5NTM4Njg3LFxuICBkZWVwc2t5Ymx1ZTogMTI1ODI5MTEsXG4gIGRpbWdyYXk6IDE3Njg1MTYwOTUsXG4gIGRpbWdyZXk6IDE3Njg1MTYwOTUsXG4gIGRvZGdlcmJsdWU6IDUxMjgxOTE5OSxcbiAgZmlyZWJyaWNrOiAyOTg4NTgxNjMxLFxuICBmbG9yYWx3aGl0ZTogNDI5NDYzNTc3NSxcbiAgZm9yZXN0Z3JlZW46IDU3OTU0MzgwNyxcbiAgZnVjaHNpYTogNDI3ODI1NTYxNSxcbiAgZ2FpbnNib3JvOiAzNzA1NDYyMDE1LFxuICBnaG9zdHdoaXRlOiA0MTc3MDY4MDMxLFxuICBnb2xkOiA0MjkyMjgwNTc1LFxuICBnb2xkZW5yb2Q6IDM2NjgyNTQ5NzUsXG4gIGdyYXk6IDIxNTU5MDUyNzksXG4gIGdyZWVuOiA4Mzg4ODYzLFxuICBncmVlbnllbGxvdzogMjkxOTE4MjMzNSxcbiAgZ3JleTogMjE1NTkwNTI3OSxcbiAgaG9uZXlkZXc6IDQwNDMzMDUyMTUsXG4gIGhvdHBpbms6IDQyODUxMTc2OTUsXG4gIGluZGlhbnJlZDogMzQ0NTM4MjM5OSxcbiAgaW5kaWdvOiAxMjU4MzI0NzM1LFxuICBpdm9yeTogNDI5NDk2MzQ1NSxcbiAga2hha2k6IDQwNDE2NDEyMTUsXG4gIGxhdmVuZGVyOiAzODczODk3MjE1LFxuICBsYXZlbmRlcmJsdXNoOiA0MjkzOTgxNjk1LFxuICBsYXduZ3JlZW46IDIwOTY4OTAxMTEsXG4gIGxlbW9uY2hpZmZvbjogNDI5NDYyNjgxNSxcbiAgbGlnaHRibHVlOiAyOTE2NjczMjc5LFxuICBsaWdodGNvcmFsOiA0MDM0OTUzNDcxLFxuICBsaWdodGN5YW46IDM3NzQ4NzM1OTksXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiA0MjEwNzQyMDE1LFxuICBsaWdodGdyYXk6IDM1NTM4NzQ5NDMsXG4gIGxpZ2h0Z3JlZW46IDI0MzE1NTM3OTEsXG4gIGxpZ2h0Z3JleTogMzU1Mzg3NDk0MyxcbiAgbGlnaHRwaW5rOiA0MjkwMTY3Mjk1LFxuICBsaWdodHNhbG1vbjogNDI4ODcwNzMyNyxcbiAgbGlnaHRzZWFncmVlbjogNTQ4NTgwMDk1LFxuICBsaWdodHNreWJsdWU6IDIyNzg0ODg4MzEsXG4gIGxpZ2h0c2xhdGVncmF5OiAyMDA1NDQxMDIzLFxuICBsaWdodHNsYXRlZ3JleTogMjAwNTQ0MTAyMyxcbiAgbGlnaHRzdGVlbGJsdWU6IDI5NjU2OTIxNTksXG4gIGxpZ2h0eWVsbG93OiA0Mjk0OTU5MzU5LFxuICBsaW1lOiAxNjcxMTkzNSxcbiAgbGltZWdyZWVuOiA4NTIzMDg3MzUsXG4gIGxpbmVuOiA0MjEwMDkxNzc1LFxuICBtYWdlbnRhOiA0Mjc4MjU1NjE1LFxuICBtYXJvb246IDIxNDc0ODM5MDMsXG4gIG1lZGl1bWFxdWFtYXJpbmU6IDE3MjQ3NTQ2ODcsXG4gIG1lZGl1bWJsdWU6IDUyNzM1LFxuICBtZWRpdW1vcmNoaWQ6IDMxMjYxODcwMDcsXG4gIG1lZGl1bXB1cnBsZTogMjQ3MzY0NzEwMyxcbiAgbWVkaXVtc2VhZ3JlZW46IDEwMTgzOTMwODcsXG4gIG1lZGl1bXNsYXRlYmx1ZTogMjA3MDQ3NDQ5NSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IDE2NDIzNjc5LFxuICBtZWRpdW10dXJxdW9pc2U6IDEyMjE3MDkwNTUsXG4gIG1lZGl1bXZpb2xldHJlZDogMzM0MDA3NjU0MyxcbiAgbWlkbmlnaHRibHVlOiA0MjEwOTc3MjcsXG4gIG1pbnRjcmVhbTogNDEyNzE5Mzg1NSxcbiAgbWlzdHlyb3NlOiA0MjkzMTkwMTQzLFxuICBtb2NjYXNpbjogNDI5MzE3ODg3OSxcbiAgbmF2YWpvd2hpdGU6IDQyOTI3ODM2MTUsXG4gIG5hdnk6IDMzMDIzLFxuICBvbGRsYWNlOiA0MjYwNzUxMTAzLFxuICBvbGl2ZTogMjE1NTg3MjUxMSxcbiAgb2xpdmVkcmFiOiAxODA0NDc3NDM5LFxuICBvcmFuZ2U6IDQyODkwMDM3NzUsXG4gIG9yYW5nZXJlZDogNDI4MjcxMjMxOSxcbiAgb3JjaGlkOiAzNjY0ODI4MTU5LFxuICBwYWxlZ29sZGVucm9kOiA0MDA4MjI1NTM1LFxuICBwYWxlZ3JlZW46IDI1NjY2MjU1MzUsXG4gIHBhbGV0dXJxdW9pc2U6IDI5NTE2NzE1NTEsXG4gIHBhbGV2aW9sZXRyZWQ6IDM2ODE1ODgyMjMsXG4gIHBhcGF5YXdoaXA6IDQyOTM5MDc5NjcsXG4gIHBlYWNocHVmZjogNDI5MjUyNDU0MyxcbiAgcGVydTogMzQ0ODA2MTk1MSxcbiAgcGluazogNDI5MDgyNTIxNSxcbiAgcGx1bTogMzcxODMwNzMyNyxcbiAgcG93ZGVyYmx1ZTogMjk2NzUyOTIxNSxcbiAgcHVycGxlOiAyMTQ3NTE2NjcxLFxuICByZWJlY2NhcHVycGxlOiAxNzE0NjU3NzkxLFxuICByZWQ6IDQyNzgxOTAzMzUsXG4gIHJvc3licm93bjogMzE2MzUyNTExOSxcbiAgcm95YWxibHVlOiAxMDk3NDU4MTc1LFxuICBzYWRkbGVicm93bjogMjMzNjU2MDEyNyxcbiAgc2FsbW9uOiA0MjAyNzIyMDQ3LFxuICBzYW5keWJyb3duOiA0MTA0NDEzNDM5LFxuICBzZWFncmVlbjogNzgwODgzOTY3LFxuICBzZWFzaGVsbDogNDI5NDMwNzU4MyxcbiAgc2llbm5hOiAyNjg5NzQwMjg3LFxuICBzaWx2ZXI6IDMyMzM4NTc3OTEsXG4gIHNreWJsdWU6IDIyNzg0ODQ5OTEsXG4gIHNsYXRlYmx1ZTogMTc4NDMzNTg3MSxcbiAgc2xhdGVncmF5OiAxODg3NDczOTE5LFxuICBzbGF0ZWdyZXk6IDE4ODc0NzM5MTksXG4gIHNub3c6IDQyOTQ2MzgzMzUsXG4gIHNwcmluZ2dyZWVuOiAxNjc0NDQ0NyxcbiAgc3RlZWxibHVlOiAxMTgyOTcxMTM1LFxuICB0YW46IDM1MzUwNDc5MzUsXG4gIHRlYWw6IDg0MjE2MzEsXG4gIHRoaXN0bGU6IDM2MzY0NTE1ODMsXG4gIHRvbWF0bzogNDI4NDY5NjU3NSxcbiAgdHVycXVvaXNlOiAxMDg4NDc1MzkxLFxuICB2aW9sZXQ6IDQwMDE1NTgyNzEsXG4gIHdoZWF0OiA0MTI1MDEyOTkxLFxuICB3aGl0ZTogNDI5NDk2NzI5NSxcbiAgd2hpdGVzbW9rZTogNDEyNjUzNzIxNSxcbiAgeWVsbG93OiA0Mjk0OTAyMDE1LFxuICB5ZWxsb3dncmVlbjogMjU5NzEzOTE5OVxufTtcblxuLy8gc3JjL2NvbG9yTWF0Y2hlcnMudHNcbnZhciBOVU1CRVIgPSBcIlstK10/XFxcXGQqXFxcXC4/XFxcXGQrXCI7XG52YXIgUEVSQ0VOVEFHRSA9IE5VTUJFUiArIFwiJVwiO1xuZnVuY3Rpb24gY2FsbCguLi5wYXJ0cykge1xuICByZXR1cm4gXCJcXFxcKFxcXFxzKihcIiArIHBhcnRzLmpvaW4oXCIpXFxcXHMqLFxcXFxzKihcIikgKyBcIilcXFxccypcXFxcKVwiO1xufVxudmFyIHJnYiA9IG5ldyBSZWdFeHAoXCJyZ2JcIiArIGNhbGwoTlVNQkVSLCBOVU1CRVIsIE5VTUJFUikpO1xudmFyIHJnYmEgPSBuZXcgUmVnRXhwKFwicmdiYVwiICsgY2FsbChOVU1CRVIsIE5VTUJFUiwgTlVNQkVSLCBOVU1CRVIpKTtcbnZhciBoc2wgPSBuZXcgUmVnRXhwKFwiaHNsXCIgKyBjYWxsKE5VTUJFUiwgUEVSQ0VOVEFHRSwgUEVSQ0VOVEFHRSkpO1xudmFyIGhzbGEgPSBuZXcgUmVnRXhwKFxuICBcImhzbGFcIiArIGNhbGwoTlVNQkVSLCBQRVJDRU5UQUdFLCBQRVJDRU5UQUdFLCBOVU1CRVIpXG4pO1xudmFyIGhleDMgPSAvXiMoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkkLztcbnZhciBoZXg0ID0gL14jKFswLTlhLWZBLUZdezF9KShbMC05YS1mQS1GXXsxfSkoWzAtOWEtZkEtRl17MX0pKFswLTlhLWZBLUZdezF9KSQvO1xudmFyIGhleDYgPSAvXiMoWzAtOWEtZkEtRl17Nn0pJC87XG52YXIgaGV4OCA9IC9eIyhbMC05YS1mQS1GXXs4fSkkLztcblxuLy8gc3JjL25vcm1hbGl6ZUNvbG9yLnRzXG5mdW5jdGlvbiBub3JtYWxpemVDb2xvcihjb2xvcikge1xuICBsZXQgbWF0Y2g7XG4gIGlmICh0eXBlb2YgY29sb3IgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXR1cm4gY29sb3IgPj4+IDAgPT09IGNvbG9yICYmIGNvbG9yID49IDAgJiYgY29sb3IgPD0gNDI5NDk2NzI5NSA/IGNvbG9yIDogbnVsbDtcbiAgfVxuICBpZiAobWF0Y2ggPSBoZXg2LmV4ZWMoY29sb3IpKVxuICAgIHJldHVybiBwYXJzZUludChtYXRjaFsxXSArIFwiZmZcIiwgMTYpID4+PiAwO1xuICBpZiAoY29sb3JzICYmIGNvbG9yc1tjb2xvcl0gIT09IHZvaWQgMCkge1xuICAgIHJldHVybiBjb2xvcnNbY29sb3JdO1xuICB9XG4gIGlmIChtYXRjaCA9IHJnYi5leGVjKGNvbG9yKSkge1xuICAgIHJldHVybiAocGFyc2UyNTUobWF0Y2hbMV0pIDw8IDI0IHwgLy8gclxuICAgIHBhcnNlMjU1KG1hdGNoWzJdKSA8PCAxNiB8IC8vIGdcbiAgICBwYXJzZTI1NShtYXRjaFszXSkgPDwgOCB8IC8vIGJcbiAgICAyNTUpID4+PiAvLyBhXG4gICAgMDtcbiAgfVxuICBpZiAobWF0Y2ggPSByZ2JhLmV4ZWMoY29sb3IpKSB7XG4gICAgcmV0dXJuIChwYXJzZTI1NShtYXRjaFsxXSkgPDwgMjQgfCAvLyByXG4gICAgcGFyc2UyNTUobWF0Y2hbMl0pIDw8IDE2IHwgLy8gZ1xuICAgIHBhcnNlMjU1KG1hdGNoWzNdKSA8PCA4IHwgLy8gYlxuICAgIHBhcnNlMShtYXRjaFs0XSkpID4+PiAvLyBhXG4gICAgMDtcbiAgfVxuICBpZiAobWF0Y2ggPSBoZXgzLmV4ZWMoY29sb3IpKSB7XG4gICAgcmV0dXJuIHBhcnNlSW50KFxuICAgICAgbWF0Y2hbMV0gKyBtYXRjaFsxXSArIC8vIHJcbiAgICAgIG1hdGNoWzJdICsgbWF0Y2hbMl0gKyAvLyBnXG4gICAgICBtYXRjaFszXSArIG1hdGNoWzNdICsgLy8gYlxuICAgICAgXCJmZlwiLFxuICAgICAgLy8gYVxuICAgICAgMTZcbiAgICApID4+PiAwO1xuICB9XG4gIGlmIChtYXRjaCA9IGhleDguZXhlYyhjb2xvcikpXG4gICAgcmV0dXJuIHBhcnNlSW50KG1hdGNoWzFdLCAxNikgPj4+IDA7XG4gIGlmIChtYXRjaCA9IGhleDQuZXhlYyhjb2xvcikpIHtcbiAgICByZXR1cm4gcGFyc2VJbnQoXG4gICAgICBtYXRjaFsxXSArIG1hdGNoWzFdICsgLy8gclxuICAgICAgbWF0Y2hbMl0gKyBtYXRjaFsyXSArIC8vIGdcbiAgICAgIG1hdGNoWzNdICsgbWF0Y2hbM10gKyAvLyBiXG4gICAgICBtYXRjaFs0XSArIG1hdGNoWzRdLFxuICAgICAgLy8gYVxuICAgICAgMTZcbiAgICApID4+PiAwO1xuICB9XG4gIGlmIChtYXRjaCA9IGhzbC5leGVjKGNvbG9yKSkge1xuICAgIHJldHVybiAoaHNsVG9SZ2IoXG4gICAgICBwYXJzZTM2MChtYXRjaFsxXSksXG4gICAgICAvLyBoXG4gICAgICBwYXJzZVBlcmNlbnRhZ2UobWF0Y2hbMl0pLFxuICAgICAgLy8gc1xuICAgICAgcGFyc2VQZXJjZW50YWdlKG1hdGNoWzNdKVxuICAgICAgLy8gbFxuICAgICkgfCAyNTUpID4+PiAvLyBhXG4gICAgMDtcbiAgfVxuICBpZiAobWF0Y2ggPSBoc2xhLmV4ZWMoY29sb3IpKSB7XG4gICAgcmV0dXJuIChoc2xUb1JnYihcbiAgICAgIHBhcnNlMzYwKG1hdGNoWzFdKSxcbiAgICAgIC8vIGhcbiAgICAgIHBhcnNlUGVyY2VudGFnZShtYXRjaFsyXSksXG4gICAgICAvLyBzXG4gICAgICBwYXJzZVBlcmNlbnRhZ2UobWF0Y2hbM10pXG4gICAgICAvLyBsXG4gICAgKSB8IHBhcnNlMShtYXRjaFs0XSkpID4+PiAvLyBhXG4gICAgMDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGh1ZTJyZ2IocCwgcSwgdCkge1xuICBpZiAodCA8IDApXG4gICAgdCArPSAxO1xuICBpZiAodCA+IDEpXG4gICAgdCAtPSAxO1xuICBpZiAodCA8IDEgLyA2KVxuICAgIHJldHVybiBwICsgKHEgLSBwKSAqIDYgKiB0O1xuICBpZiAodCA8IDEgLyAyKVxuICAgIHJldHVybiBxO1xuICBpZiAodCA8IDIgLyAzKVxuICAgIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcbiAgcmV0dXJuIHA7XG59XG5mdW5jdGlvbiBoc2xUb1JnYihoLCBzLCBsKSB7XG4gIGNvbnN0IHEgPSBsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICBjb25zdCBwID0gMiAqIGwgLSBxO1xuICBjb25zdCByID0gaHVlMnJnYihwLCBxLCBoICsgMSAvIDMpO1xuICBjb25zdCBnID0gaHVlMnJnYihwLCBxLCBoKTtcbiAgY29uc3QgYiA9IGh1ZTJyZ2IocCwgcSwgaCAtIDEgLyAzKTtcbiAgcmV0dXJuIE1hdGgucm91bmQociAqIDI1NSkgPDwgMjQgfCBNYXRoLnJvdW5kKGcgKiAyNTUpIDw8IDE2IHwgTWF0aC5yb3VuZChiICogMjU1KSA8PCA4O1xufVxuZnVuY3Rpb24gcGFyc2UyNTUoc3RyKSB7XG4gIGNvbnN0IGludCA9IHBhcnNlSW50KHN0ciwgMTApO1xuICBpZiAoaW50IDwgMClcbiAgICByZXR1cm4gMDtcbiAgaWYgKGludCA+IDI1NSlcbiAgICByZXR1cm4gMjU1O1xuICByZXR1cm4gaW50O1xufVxuZnVuY3Rpb24gcGFyc2UzNjAoc3RyKSB7XG4gIGNvbnN0IGludCA9IHBhcnNlRmxvYXQoc3RyKTtcbiAgcmV0dXJuIChpbnQgJSAzNjAgKyAzNjApICUgMzYwIC8gMzYwO1xufVxuZnVuY3Rpb24gcGFyc2UxKHN0cikge1xuICBjb25zdCBudW0gPSBwYXJzZUZsb2F0KHN0cik7XG4gIGlmIChudW0gPCAwKVxuICAgIHJldHVybiAwO1xuICBpZiAobnVtID4gMSlcbiAgICByZXR1cm4gMjU1O1xuICByZXR1cm4gTWF0aC5yb3VuZChudW0gKiAyNTUpO1xufVxuZnVuY3Rpb24gcGFyc2VQZXJjZW50YWdlKHN0cikge1xuICBjb25zdCBpbnQgPSBwYXJzZUZsb2F0KHN0cik7XG4gIGlmIChpbnQgPCAwKVxuICAgIHJldHVybiAwO1xuICBpZiAoaW50ID4gMTAwKVxuICAgIHJldHVybiAxO1xuICByZXR1cm4gaW50IC8gMTAwO1xufVxuXG4vLyBzcmMvY29sb3JUb1JnYmEudHNcbmZ1bmN0aW9uIGNvbG9yVG9SZ2JhKGlucHV0KSB7XG4gIGxldCBpbnQzMkNvbG9yID0gbm9ybWFsaXplQ29sb3IoaW5wdXQpO1xuICBpZiAoaW50MzJDb2xvciA9PT0gbnVsbClcbiAgICByZXR1cm4gaW5wdXQ7XG4gIGludDMyQ29sb3IgPSBpbnQzMkNvbG9yIHx8IDA7XG4gIGNvbnN0IHIgPSAoaW50MzJDb2xvciAmIDQyNzgxOTAwODApID4+PiAyNDtcbiAgY29uc3QgZyA9IChpbnQzMkNvbG9yICYgMTY3MTE2ODApID4+PiAxNjtcbiAgY29uc3QgYiA9IChpbnQzMkNvbG9yICYgNjUyODApID4+PiA4O1xuICBjb25zdCBhID0gKGludDMyQ29sb3IgJiAyNTUpIC8gMjU1O1xuICByZXR1cm4gYHJnYmEoJHtyfSwgJHtnfSwgJHtifSwgJHthfSlgO1xufVxuXG4vLyBzcmMvY3JlYXRlSW50ZXJwb2xhdG9yLnRzXG52YXIgY3JlYXRlSW50ZXJwb2xhdG9yID0gKHJhbmdlLCBvdXRwdXQsIGV4dHJhcG9sYXRlKSA9PiB7XG4gIGlmIChpcy5mdW4ocmFuZ2UpKSB7XG4gICAgcmV0dXJuIHJhbmdlO1xuICB9XG4gIGlmIChpcy5hcnIocmFuZ2UpKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUludGVycG9sYXRvcih7XG4gICAgICByYW5nZSxcbiAgICAgIG91dHB1dCxcbiAgICAgIGV4dHJhcG9sYXRlXG4gICAgfSk7XG4gIH1cbiAgaWYgKGlzLnN0cihyYW5nZS5vdXRwdXRbMF0pKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVN0cmluZ0ludGVycG9sYXRvcihyYW5nZSk7XG4gIH1cbiAgY29uc3QgY29uZmlnID0gcmFuZ2U7XG4gIGNvbnN0IG91dHB1dFJhbmdlID0gY29uZmlnLm91dHB1dDtcbiAgY29uc3QgaW5wdXRSYW5nZSA9IGNvbmZpZy5yYW5nZSB8fCBbMCwgMV07XG4gIGNvbnN0IGV4dHJhcG9sYXRlTGVmdCA9IGNvbmZpZy5leHRyYXBvbGF0ZUxlZnQgfHwgY29uZmlnLmV4dHJhcG9sYXRlIHx8IFwiZXh0ZW5kXCI7XG4gIGNvbnN0IGV4dHJhcG9sYXRlUmlnaHQgPSBjb25maWcuZXh0cmFwb2xhdGVSaWdodCB8fCBjb25maWcuZXh0cmFwb2xhdGUgfHwgXCJleHRlbmRcIjtcbiAgY29uc3QgZWFzaW5nID0gY29uZmlnLmVhc2luZyB8fCAoKHQpID0+IHQpO1xuICByZXR1cm4gKGlucHV0KSA9PiB7XG4gICAgY29uc3QgcmFuZ2UyID0gZmluZFJhbmdlKGlucHV0LCBpbnB1dFJhbmdlKTtcbiAgICByZXR1cm4gaW50ZXJwb2xhdGUoXG4gICAgICBpbnB1dCxcbiAgICAgIGlucHV0UmFuZ2VbcmFuZ2UyXSxcbiAgICAgIGlucHV0UmFuZ2VbcmFuZ2UyICsgMV0sXG4gICAgICBvdXRwdXRSYW5nZVtyYW5nZTJdLFxuICAgICAgb3V0cHV0UmFuZ2VbcmFuZ2UyICsgMV0sXG4gICAgICBlYXNpbmcsXG4gICAgICBleHRyYXBvbGF0ZUxlZnQsXG4gICAgICBleHRyYXBvbGF0ZVJpZ2h0LFxuICAgICAgY29uZmlnLm1hcFxuICAgICk7XG4gIH07XG59O1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUoaW5wdXQsIGlucHV0TWluLCBpbnB1dE1heCwgb3V0cHV0TWluLCBvdXRwdXRNYXgsIGVhc2luZywgZXh0cmFwb2xhdGVMZWZ0LCBleHRyYXBvbGF0ZVJpZ2h0LCBtYXApIHtcbiAgbGV0IHJlc3VsdCA9IG1hcCA/IG1hcChpbnB1dCkgOiBpbnB1dDtcbiAgaWYgKHJlc3VsdCA8IGlucHV0TWluKSB7XG4gICAgaWYgKGV4dHJhcG9sYXRlTGVmdCA9PT0gXCJpZGVudGl0eVwiKVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICBlbHNlIGlmIChleHRyYXBvbGF0ZUxlZnQgPT09IFwiY2xhbXBcIilcbiAgICAgIHJlc3VsdCA9IGlucHV0TWluO1xuICB9XG4gIGlmIChyZXN1bHQgPiBpbnB1dE1heCkge1xuICAgIGlmIChleHRyYXBvbGF0ZVJpZ2h0ID09PSBcImlkZW50aXR5XCIpXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIGVsc2UgaWYgKGV4dHJhcG9sYXRlUmlnaHQgPT09IFwiY2xhbXBcIilcbiAgICAgIHJlc3VsdCA9IGlucHV0TWF4O1xuICB9XG4gIGlmIChvdXRwdXRNaW4gPT09IG91dHB1dE1heClcbiAgICByZXR1cm4gb3V0cHV0TWluO1xuICBpZiAoaW5wdXRNaW4gPT09IGlucHV0TWF4KVxuICAgIHJldHVybiBpbnB1dCA8PSBpbnB1dE1pbiA/IG91dHB1dE1pbiA6IG91dHB1dE1heDtcbiAgaWYgKGlucHV0TWluID09PSAtSW5maW5pdHkpXG4gICAgcmVzdWx0ID0gLXJlc3VsdDtcbiAgZWxzZSBpZiAoaW5wdXRNYXggPT09IEluZmluaXR5KVxuICAgIHJlc3VsdCA9IHJlc3VsdCAtIGlucHV0TWluO1xuICBlbHNlXG4gICAgcmVzdWx0ID0gKHJlc3VsdCAtIGlucHV0TWluKSAvIChpbnB1dE1heCAtIGlucHV0TWluKTtcbiAgcmVzdWx0ID0gZWFzaW5nKHJlc3VsdCk7XG4gIGlmIChvdXRwdXRNaW4gPT09IC1JbmZpbml0eSlcbiAgICByZXN1bHQgPSAtcmVzdWx0O1xuICBlbHNlIGlmIChvdXRwdXRNYXggPT09IEluZmluaXR5KVxuICAgIHJlc3VsdCA9IHJlc3VsdCArIG91dHB1dE1pbjtcbiAgZWxzZVxuICAgIHJlc3VsdCA9IHJlc3VsdCAqIChvdXRwdXRNYXggLSBvdXRwdXRNaW4pICsgb3V0cHV0TWluO1xuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZmluZFJhbmdlKGlucHV0LCBpbnB1dFJhbmdlKSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgaW5wdXRSYW5nZS5sZW5ndGggLSAxOyArK2kpXG4gICAgaWYgKGlucHV0UmFuZ2VbaV0gPj0gaW5wdXQpXG4gICAgICBicmVhaztcbiAgcmV0dXJuIGkgLSAxO1xufVxuXG4vLyBzcmMvZWFzaW5ncy50c1xudmFyIHN0ZXBzID0gKHN0ZXBzMiwgZGlyZWN0aW9uID0gXCJlbmRcIikgPT4gKHByb2dyZXNzMikgPT4ge1xuICBwcm9ncmVzczIgPSBkaXJlY3Rpb24gPT09IFwiZW5kXCIgPyBNYXRoLm1pbihwcm9ncmVzczIsIDAuOTk5KSA6IE1hdGgubWF4KHByb2dyZXNzMiwgMWUtMyk7XG4gIGNvbnN0IGV4cGFuZGVkID0gcHJvZ3Jlc3MyICogc3RlcHMyO1xuICBjb25zdCByb3VuZGVkID0gZGlyZWN0aW9uID09PSBcImVuZFwiID8gTWF0aC5mbG9vcihleHBhbmRlZCkgOiBNYXRoLmNlaWwoZXhwYW5kZWQpO1xuICByZXR1cm4gY2xhbXAoMCwgMSwgcm91bmRlZCAvIHN0ZXBzMik7XG59O1xudmFyIGMxID0gMS43MDE1ODtcbnZhciBjMiA9IGMxICogMS41MjU7XG52YXIgYzMgPSBjMSArIDE7XG52YXIgYzQgPSAyICogTWF0aC5QSSAvIDM7XG52YXIgYzUgPSAyICogTWF0aC5QSSAvIDQuNTtcbnZhciBib3VuY2VPdXQgPSAoeCkgPT4ge1xuICBjb25zdCBuMSA9IDcuNTYyNTtcbiAgY29uc3QgZDEgPSAyLjc1O1xuICBpZiAoeCA8IDEgLyBkMSkge1xuICAgIHJldHVybiBuMSAqIHggKiB4O1xuICB9IGVsc2UgaWYgKHggPCAyIC8gZDEpIHtcbiAgICByZXR1cm4gbjEgKiAoeCAtPSAxLjUgLyBkMSkgKiB4ICsgMC43NTtcbiAgfSBlbHNlIGlmICh4IDwgMi41IC8gZDEpIHtcbiAgICByZXR1cm4gbjEgKiAoeCAtPSAyLjI1IC8gZDEpICogeCArIDAuOTM3NTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbjEgKiAoeCAtPSAyLjYyNSAvIGQxKSAqIHggKyAwLjk4NDM3NTtcbiAgfVxufTtcbnZhciBlYXNpbmdzID0ge1xuICBsaW5lYXI6ICh4KSA9PiB4LFxuICBlYXNlSW5RdWFkOiAoeCkgPT4geCAqIHgsXG4gIGVhc2VPdXRRdWFkOiAoeCkgPT4gMSAtICgxIC0geCkgKiAoMSAtIHgpLFxuICBlYXNlSW5PdXRRdWFkOiAoeCkgPT4geCA8IDAuNSA/IDIgKiB4ICogeCA6IDEgLSBNYXRoLnBvdygtMiAqIHggKyAyLCAyKSAvIDIsXG4gIGVhc2VJbkN1YmljOiAoeCkgPT4geCAqIHggKiB4LFxuICBlYXNlT3V0Q3ViaWM6ICh4KSA9PiAxIC0gTWF0aC5wb3coMSAtIHgsIDMpLFxuICBlYXNlSW5PdXRDdWJpYzogKHgpID0+IHggPCAwLjUgPyA0ICogeCAqIHggKiB4IDogMSAtIE1hdGgucG93KC0yICogeCArIDIsIDMpIC8gMixcbiAgZWFzZUluUXVhcnQ6ICh4KSA9PiB4ICogeCAqIHggKiB4LFxuICBlYXNlT3V0UXVhcnQ6ICh4KSA9PiAxIC0gTWF0aC5wb3coMSAtIHgsIDQpLFxuICBlYXNlSW5PdXRRdWFydDogKHgpID0+IHggPCAwLjUgPyA4ICogeCAqIHggKiB4ICogeCA6IDEgLSBNYXRoLnBvdygtMiAqIHggKyAyLCA0KSAvIDIsXG4gIGVhc2VJblF1aW50OiAoeCkgPT4geCAqIHggKiB4ICogeCAqIHgsXG4gIGVhc2VPdXRRdWludDogKHgpID0+IDEgLSBNYXRoLnBvdygxIC0geCwgNSksXG4gIGVhc2VJbk91dFF1aW50OiAoeCkgPT4geCA8IDAuNSA/IDE2ICogeCAqIHggKiB4ICogeCAqIHggOiAxIC0gTWF0aC5wb3coLTIgKiB4ICsgMiwgNSkgLyAyLFxuICBlYXNlSW5TaW5lOiAoeCkgPT4gMSAtIE1hdGguY29zKHggKiBNYXRoLlBJIC8gMiksXG4gIGVhc2VPdXRTaW5lOiAoeCkgPT4gTWF0aC5zaW4oeCAqIE1hdGguUEkgLyAyKSxcbiAgZWFzZUluT3V0U2luZTogKHgpID0+IC0oTWF0aC5jb3MoTWF0aC5QSSAqIHgpIC0gMSkgLyAyLFxuICBlYXNlSW5FeHBvOiAoeCkgPT4geCA9PT0gMCA/IDAgOiBNYXRoLnBvdygyLCAxMCAqIHggLSAxMCksXG4gIGVhc2VPdXRFeHBvOiAoeCkgPT4geCA9PT0gMSA/IDEgOiAxIC0gTWF0aC5wb3coMiwgLTEwICogeCksXG4gIGVhc2VJbk91dEV4cG86ICh4KSA9PiB4ID09PSAwID8gMCA6IHggPT09IDEgPyAxIDogeCA8IDAuNSA/IE1hdGgucG93KDIsIDIwICogeCAtIDEwKSAvIDIgOiAoMiAtIE1hdGgucG93KDIsIC0yMCAqIHggKyAxMCkpIC8gMixcbiAgZWFzZUluQ2lyYzogKHgpID0+IDEgLSBNYXRoLnNxcnQoMSAtIE1hdGgucG93KHgsIDIpKSxcbiAgZWFzZU91dENpcmM6ICh4KSA9PiBNYXRoLnNxcnQoMSAtIE1hdGgucG93KHggLSAxLCAyKSksXG4gIGVhc2VJbk91dENpcmM6ICh4KSA9PiB4IDwgMC41ID8gKDEgLSBNYXRoLnNxcnQoMSAtIE1hdGgucG93KDIgKiB4LCAyKSkpIC8gMiA6IChNYXRoLnNxcnQoMSAtIE1hdGgucG93KC0yICogeCArIDIsIDIpKSArIDEpIC8gMixcbiAgZWFzZUluQmFjazogKHgpID0+IGMzICogeCAqIHggKiB4IC0gYzEgKiB4ICogeCxcbiAgZWFzZU91dEJhY2s6ICh4KSA9PiAxICsgYzMgKiBNYXRoLnBvdyh4IC0gMSwgMykgKyBjMSAqIE1hdGgucG93KHggLSAxLCAyKSxcbiAgZWFzZUluT3V0QmFjazogKHgpID0+IHggPCAwLjUgPyBNYXRoLnBvdygyICogeCwgMikgKiAoKGMyICsgMSkgKiAyICogeCAtIGMyKSAvIDIgOiAoTWF0aC5wb3coMiAqIHggLSAyLCAyKSAqICgoYzIgKyAxKSAqICh4ICogMiAtIDIpICsgYzIpICsgMikgLyAyLFxuICBlYXNlSW5FbGFzdGljOiAoeCkgPT4geCA9PT0gMCA/IDAgOiB4ID09PSAxID8gMSA6IC1NYXRoLnBvdygyLCAxMCAqIHggLSAxMCkgKiBNYXRoLnNpbigoeCAqIDEwIC0gMTAuNzUpICogYzQpLFxuICBlYXNlT3V0RWxhc3RpYzogKHgpID0+IHggPT09IDAgPyAwIDogeCA9PT0gMSA/IDEgOiBNYXRoLnBvdygyLCAtMTAgKiB4KSAqIE1hdGguc2luKCh4ICogMTAgLSAwLjc1KSAqIGM0KSArIDEsXG4gIGVhc2VJbk91dEVsYXN0aWM6ICh4KSA9PiB4ID09PSAwID8gMCA6IHggPT09IDEgPyAxIDogeCA8IDAuNSA/IC0oTWF0aC5wb3coMiwgMjAgKiB4IC0gMTApICogTWF0aC5zaW4oKDIwICogeCAtIDExLjEyNSkgKiBjNSkpIC8gMiA6IE1hdGgucG93KDIsIC0yMCAqIHggKyAxMCkgKiBNYXRoLnNpbigoMjAgKiB4IC0gMTEuMTI1KSAqIGM1KSAvIDIgKyAxLFxuICBlYXNlSW5Cb3VuY2U6ICh4KSA9PiAxIC0gYm91bmNlT3V0KDEgLSB4KSxcbiAgZWFzZU91dEJvdW5jZTogYm91bmNlT3V0LFxuICBlYXNlSW5PdXRCb3VuY2U6ICh4KSA9PiB4IDwgMC41ID8gKDEgLSBib3VuY2VPdXQoMSAtIDIgKiB4KSkgLyAyIDogKDEgKyBib3VuY2VPdXQoMiAqIHggLSAxKSkgLyAyLFxuICBzdGVwc1xufTtcblxuLy8gc3JjL2ZsdWlkcy50c1xudmFyICRnZXQgPSBTeW1ib2wuZm9yKFwiRmx1aWRWYWx1ZS5nZXRcIik7XG52YXIgJG9ic2VydmVycyA9IFN5bWJvbC5mb3IoXCJGbHVpZFZhbHVlLm9ic2VydmVyc1wiKTtcbnZhciBoYXNGbHVpZFZhbHVlID0gKGFyZykgPT4gQm9vbGVhbihhcmcgJiYgYXJnWyRnZXRdKTtcbnZhciBnZXRGbHVpZFZhbHVlID0gKGFyZykgPT4gYXJnICYmIGFyZ1skZ2V0XSA/IGFyZ1skZ2V0XSgpIDogYXJnO1xudmFyIGdldEZsdWlkT2JzZXJ2ZXJzID0gKHRhcmdldCkgPT4gdGFyZ2V0WyRvYnNlcnZlcnNdIHx8IG51bGw7XG5mdW5jdGlvbiBjYWxsRmx1aWRPYnNlcnZlcihvYnNlcnZlcjIsIGV2ZW50KSB7XG4gIGlmIChvYnNlcnZlcjIuZXZlbnRPYnNlcnZlZCkge1xuICAgIG9ic2VydmVyMi5ldmVudE9ic2VydmVkKGV2ZW50KTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlcjIoZXZlbnQpO1xuICB9XG59XG5mdW5jdGlvbiBjYWxsRmx1aWRPYnNlcnZlcnModGFyZ2V0LCBldmVudCkge1xuICBjb25zdCBvYnNlcnZlcnMgPSB0YXJnZXRbJG9ic2VydmVyc107XG4gIGlmIChvYnNlcnZlcnMpIHtcbiAgICBvYnNlcnZlcnMuZm9yRWFjaCgob2JzZXJ2ZXIyKSA9PiB7XG4gICAgICBjYWxsRmx1aWRPYnNlcnZlcihvYnNlcnZlcjIsIGV2ZW50KTtcbiAgICB9KTtcbiAgfVxufVxudmFyIEZsdWlkVmFsdWUgPSBjbGFzcyB7XG4gIGNvbnN0cnVjdG9yKGdldCkge1xuICAgIGlmICghZ2V0ICYmICEoZ2V0ID0gdGhpcy5nZXQpKSB7XG4gICAgICB0aHJvdyBFcnJvcihcIlVua25vd24gZ2V0dGVyXCIpO1xuICAgIH1cbiAgICBzZXRGbHVpZEdldHRlcih0aGlzLCBnZXQpO1xuICB9XG59O1xuJGdldCwgJG9ic2VydmVycztcbnZhciBzZXRGbHVpZEdldHRlciA9ICh0YXJnZXQsIGdldCkgPT4gc2V0SGlkZGVuKHRhcmdldCwgJGdldCwgZ2V0KTtcbmZ1bmN0aW9uIGFkZEZsdWlkT2JzZXJ2ZXIodGFyZ2V0LCBvYnNlcnZlcjIpIHtcbiAgaWYgKHRhcmdldFskZ2V0XSkge1xuICAgIGxldCBvYnNlcnZlcnMgPSB0YXJnZXRbJG9ic2VydmVyc107XG4gICAgaWYgKCFvYnNlcnZlcnMpIHtcbiAgICAgIHNldEhpZGRlbih0YXJnZXQsICRvYnNlcnZlcnMsIG9ic2VydmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCkpO1xuICAgIH1cbiAgICBpZiAoIW9ic2VydmVycy5oYXMob2JzZXJ2ZXIyKSkge1xuICAgICAgb2JzZXJ2ZXJzLmFkZChvYnNlcnZlcjIpO1xuICAgICAgaWYgKHRhcmdldC5vYnNlcnZlckFkZGVkKSB7XG4gICAgICAgIHRhcmdldC5vYnNlcnZlckFkZGVkKG9ic2VydmVycy5zaXplLCBvYnNlcnZlcjIpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb2JzZXJ2ZXIyO1xufVxuZnVuY3Rpb24gcmVtb3ZlRmx1aWRPYnNlcnZlcih0YXJnZXQsIG9ic2VydmVyMikge1xuICBjb25zdCBvYnNlcnZlcnMgPSB0YXJnZXRbJG9ic2VydmVyc107XG4gIGlmIChvYnNlcnZlcnMgJiYgb2JzZXJ2ZXJzLmhhcyhvYnNlcnZlcjIpKSB7XG4gICAgY29uc3QgY291bnQgPSBvYnNlcnZlcnMuc2l6ZSAtIDE7XG4gICAgaWYgKGNvdW50KSB7XG4gICAgICBvYnNlcnZlcnMuZGVsZXRlKG9ic2VydmVyMik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRhcmdldFskb2JzZXJ2ZXJzXSA9IG51bGw7XG4gICAgfVxuICAgIGlmICh0YXJnZXQub2JzZXJ2ZXJSZW1vdmVkKSB7XG4gICAgICB0YXJnZXQub2JzZXJ2ZXJSZW1vdmVkKGNvdW50LCBvYnNlcnZlcjIpO1xuICAgIH1cbiAgfVxufVxudmFyIHNldEhpZGRlbiA9ICh0YXJnZXQsIGtleSwgdmFsdWUpID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xuICB2YWx1ZSxcbiAgd3JpdGFibGU6IHRydWUsXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZVxufSk7XG5cbi8vIHNyYy9yZWdleHMudHNcbnZhciBudW1iZXJSZWdleCA9IC9bK1xcLV0/KD86MHxbMS05XVxcZCopKD86XFwuXFxkKik/KD86W2VFXVsrXFwtXT9cXGQrKT8vZztcbnZhciBjb2xvclJlZ2V4ID0gLygjKD86WzAtOWEtZl17Mn0pezIsNH18KCNbMC05YS1mXXszfSl8KHJnYnxoc2wpYT9cXCgoLT9cXGQrJT9bLFxcc10rKXsyLDN9XFxzKltcXGRcXC5dKyU/XFwpKS9naTtcbnZhciB1bml0UmVnZXggPSBuZXcgUmVnRXhwKGAoJHtudW1iZXJSZWdleC5zb3VyY2V9KSglfFthLXpdKylgLCBcImlcIik7XG52YXIgcmdiYVJlZ2V4ID0gL3JnYmFcXCgoWzAtOVxcLi1dKyksIChbMC05XFwuLV0rKSwgKFswLTlcXC4tXSspLCAoWzAtOVxcLi1dKylcXCkvZ2k7XG52YXIgY3NzVmFyaWFibGVSZWdleCA9IC92YXJcXCgoLS1bYS16QS1aMC05LV9dKyksPyA/KFthLXpBLVowLTkgKCklIy4sLV0rKT9cXCkvO1xuXG4vLyBzcmMvdmFyaWFibGVUb1JnYmEudHNcbnZhciB2YXJpYWJsZVRvUmdiYSA9IChpbnB1dCkgPT4ge1xuICBjb25zdCBbdG9rZW4sIGZhbGxiYWNrXSA9IHBhcnNlQ1NTVmFyaWFibGUoaW5wdXQpO1xuICBpZiAoIXRva2VuIHx8IGlzU1NSKCkpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgY29uc3QgdmFsdWUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpLmdldFByb3BlcnR5VmFsdWUodG9rZW4pO1xuICBpZiAodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUudHJpbSgpO1xuICB9IGVsc2UgaWYgKGZhbGxiYWNrICYmIGZhbGxiYWNrLnN0YXJ0c1dpdGgoXCItLVwiKSkge1xuICAgIGNvbnN0IHZhbHVlMiA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuZ2V0UHJvcGVydHlWYWx1ZShmYWxsYmFjayk7XG4gICAgaWYgKHZhbHVlMikge1xuICAgICAgcmV0dXJuIHZhbHVlMjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgfSBlbHNlIGlmIChmYWxsYmFjayAmJiBjc3NWYXJpYWJsZVJlZ2V4LnRlc3QoZmFsbGJhY2spKSB7XG4gICAgcmV0dXJuIHZhcmlhYmxlVG9SZ2JhKGZhbGxiYWNrKTtcbiAgfSBlbHNlIGlmIChmYWxsYmFjaykge1xuICAgIHJldHVybiBmYWxsYmFjaztcbiAgfVxuICByZXR1cm4gaW5wdXQ7XG59O1xudmFyIHBhcnNlQ1NTVmFyaWFibGUgPSAoY3VycmVudCkgPT4ge1xuICBjb25zdCBtYXRjaCA9IGNzc1ZhcmlhYmxlUmVnZXguZXhlYyhjdXJyZW50KTtcbiAgaWYgKCFtYXRjaClcbiAgICByZXR1cm4gWyxdO1xuICBjb25zdCBbLCB0b2tlbiwgZmFsbGJhY2tdID0gbWF0Y2g7XG4gIHJldHVybiBbdG9rZW4sIGZhbGxiYWNrXTtcbn07XG5cbi8vIHNyYy9zdHJpbmdJbnRlcnBvbGF0aW9uLnRzXG52YXIgbmFtZWRDb2xvclJlZ2V4O1xudmFyIHJnYmFSb3VuZCA9IChfLCBwMSwgcDIsIHAzLCBwNCkgPT4gYHJnYmEoJHtNYXRoLnJvdW5kKHAxKX0sICR7TWF0aC5yb3VuZChwMil9LCAke01hdGgucm91bmQocDMpfSwgJHtwNH0pYDtcbnZhciBjcmVhdGVTdHJpbmdJbnRlcnBvbGF0b3IyID0gKGNvbmZpZykgPT4ge1xuICBpZiAoIW5hbWVkQ29sb3JSZWdleClcbiAgICBuYW1lZENvbG9yUmVnZXggPSBjb2xvcnMgPyAoXG4gICAgICAvLyBtYXRjaCBjb2xvciBuYW1lcywgaWdub3JlIHBhcnRpYWwgbWF0Y2hlc1xuICAgICAgbmV3IFJlZ0V4cChgKCR7T2JqZWN0LmtleXMoY29sb3JzKS5qb2luKFwifFwiKX0pKD8hXFxcXHcpYCwgXCJnXCIpXG4gICAgKSA6IChcbiAgICAgIC8vIG5ldmVyIG1hdGNoXG4gICAgICAvXlxcYiQvXG4gICAgKTtcbiAgY29uc3Qgb3V0cHV0ID0gY29uZmlnLm91dHB1dC5tYXAoKHZhbHVlKSA9PiB7XG4gICAgcmV0dXJuIGdldEZsdWlkVmFsdWUodmFsdWUpLnJlcGxhY2UoY3NzVmFyaWFibGVSZWdleCwgdmFyaWFibGVUb1JnYmEpLnJlcGxhY2UoY29sb3JSZWdleCwgY29sb3JUb1JnYmEpLnJlcGxhY2UobmFtZWRDb2xvclJlZ2V4LCBjb2xvclRvUmdiYSk7XG4gIH0pO1xuICBjb25zdCBrZXlmcmFtZXMgPSBvdXRwdXQubWFwKCh2YWx1ZSkgPT4gdmFsdWUubWF0Y2gobnVtYmVyUmVnZXgpLm1hcChOdW1iZXIpKTtcbiAgY29uc3Qgb3V0cHV0UmFuZ2VzID0ga2V5ZnJhbWVzWzBdLm1hcChcbiAgICAoXywgaSkgPT4ga2V5ZnJhbWVzLm1hcCgodmFsdWVzKSA9PiB7XG4gICAgICBpZiAoIShpIGluIHZhbHVlcykpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ1RoZSBhcml0eSBvZiBlYWNoIFwib3V0cHV0XCIgdmFsdWUgbXVzdCBiZSBlcXVhbCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlc1tpXTtcbiAgICB9KVxuICApO1xuICBjb25zdCBpbnRlcnBvbGF0b3JzID0gb3V0cHV0UmFuZ2VzLm1hcChcbiAgICAob3V0cHV0MikgPT4gY3JlYXRlSW50ZXJwb2xhdG9yKHsgLi4uY29uZmlnLCBvdXRwdXQ6IG91dHB1dDIgfSlcbiAgKTtcbiAgcmV0dXJuIChpbnB1dCkgPT4ge1xuICAgIGNvbnN0IG1pc3NpbmdVbml0ID0gIXVuaXRSZWdleC50ZXN0KG91dHB1dFswXSkgJiYgb3V0cHV0LmZpbmQoKHZhbHVlKSA9PiB1bml0UmVnZXgudGVzdCh2YWx1ZSkpPy5yZXBsYWNlKG51bWJlclJlZ2V4LCBcIlwiKTtcbiAgICBsZXQgaSA9IDA7XG4gICAgcmV0dXJuIG91dHB1dFswXS5yZXBsYWNlKFxuICAgICAgbnVtYmVyUmVnZXgsXG4gICAgICAoKSA9PiBgJHtpbnRlcnBvbGF0b3JzW2krK10oaW5wdXQpfSR7bWlzc2luZ1VuaXQgfHwgXCJcIn1gXG4gICAgKS5yZXBsYWNlKHJnYmFSZWdleCwgcmdiYVJvdW5kKTtcbiAgfTtcbn07XG5cbi8vIHNyYy9kZXByZWNhdGlvbnMudHNcbnZhciBwcmVmaXggPSBcInJlYWN0LXNwcmluZzogXCI7XG52YXIgb25jZSA9IChmbikgPT4ge1xuICBjb25zdCBmdW5jID0gZm47XG4gIGxldCBjYWxsZWQgPSBmYWxzZTtcbiAgaWYgKHR5cGVvZiBmdW5jICE9IFwiZnVuY3Rpb25cIikge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7cHJlZml4fW9uY2UgcmVxdWlyZXMgYSBmdW5jdGlvbiBwYXJhbWV0ZXJgKTtcbiAgfVxuICByZXR1cm4gKC4uLmFyZ3MpID0+IHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgZnVuYyguLi5hcmdzKTtcbiAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgfVxuICB9O1xufTtcbnZhciB3YXJuSW50ZXJwb2xhdGUgPSBvbmNlKGNvbnNvbGUud2Fybik7XG5mdW5jdGlvbiBkZXByZWNhdGVJbnRlcnBvbGF0ZSgpIHtcbiAgd2FybkludGVycG9sYXRlKFxuICAgIGAke3ByZWZpeH1UaGUgXCJpbnRlcnBvbGF0ZVwiIGZ1bmN0aW9uIGlzIGRlcHJlY2F0ZWQgaW4gdjkgKHVzZSBcInRvXCIgaW5zdGVhZClgXG4gICk7XG59XG52YXIgd2FybkRpcmVjdENhbGwgPSBvbmNlKGNvbnNvbGUud2Fybik7XG5mdW5jdGlvbiBkZXByZWNhdGVEaXJlY3RDYWxsKCkge1xuICB3YXJuRGlyZWN0Q2FsbChcbiAgICBgJHtwcmVmaXh9RGlyZWN0bHkgY2FsbGluZyBzdGFydCBpbnN0ZWFkIG9mIHVzaW5nIHRoZSBhcGkgb2JqZWN0IGlzIGRlcHJlY2F0ZWQgaW4gdjkgKHVzZSBcIi5zdGFydFwiIGluc3RlYWQpLCB0aGlzIHdpbGwgYmUgcmVtb3ZlZCBpbiBsYXRlciAwLlguMCB2ZXJzaW9uc2BcbiAgKTtcbn1cblxuLy8gc3JjL2lzQW5pbWF0ZWRTdHJpbmcudHNcbmZ1bmN0aW9uIGlzQW5pbWF0ZWRTdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIGlzLnN0cih2YWx1ZSkgJiYgKHZhbHVlWzBdID09IFwiI1wiIHx8IC9cXGQvLnRlc3QodmFsdWUpIHx8IC8vIERvIG5vdCBpZGVudGlmeSBhIENTUyB2YXJpYWJsZSBhcyBhbiBBbmltYXRlZFN0cmluZyBpZiBpdHMgU1NSXG4gICFpc1NTUigpICYmIGNzc1ZhcmlhYmxlUmVnZXgudGVzdCh2YWx1ZSkgfHwgdmFsdWUgaW4gKGNvbG9ycyB8fCB7fSkpO1xufVxuXG4vLyBzcmMvZG9tLWV2ZW50cy9yZXNpemUvcmVzaXplRWxlbWVudC50c1xudmFyIG9ic2VydmVyO1xudmFyIHJlc2l6ZUhhbmRsZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG52YXIgaGFuZGxlT2JzZXJ2YXRpb24gPSAoZW50cmllcykgPT4gZW50cmllcy5mb3JFYWNoKCh7IHRhcmdldCwgY29udGVudFJlY3QgfSkgPT4ge1xuICByZXR1cm4gcmVzaXplSGFuZGxlcnMuZ2V0KHRhcmdldCk/LmZvckVhY2goKGhhbmRsZXIpID0+IGhhbmRsZXIoY29udGVudFJlY3QpKTtcbn0pO1xuZnVuY3Rpb24gcmVzaXplRWxlbWVudChoYW5kbGVyLCB0YXJnZXQpIHtcbiAgaWYgKCFvYnNlcnZlcikge1xuICAgIGlmICh0eXBlb2YgUmVzaXplT2JzZXJ2ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIG9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKGhhbmRsZU9ic2VydmF0aW9uKTtcbiAgICB9XG4gIH1cbiAgbGV0IGVsZW1lbnRIYW5kbGVycyA9IHJlc2l6ZUhhbmRsZXJzLmdldCh0YXJnZXQpO1xuICBpZiAoIWVsZW1lbnRIYW5kbGVycykge1xuICAgIGVsZW1lbnRIYW5kbGVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgcmVzaXplSGFuZGxlcnMuc2V0KHRhcmdldCwgZWxlbWVudEhhbmRsZXJzKTtcbiAgfVxuICBlbGVtZW50SGFuZGxlcnMuYWRkKGhhbmRsZXIpO1xuICBpZiAob2JzZXJ2ZXIpIHtcbiAgICBvYnNlcnZlci5vYnNlcnZlKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuICgpID0+IHtcbiAgICBjb25zdCBlbGVtZW50SGFuZGxlcnMyID0gcmVzaXplSGFuZGxlcnMuZ2V0KHRhcmdldCk7XG4gICAgaWYgKCFlbGVtZW50SGFuZGxlcnMyKVxuICAgICAgcmV0dXJuO1xuICAgIGVsZW1lbnRIYW5kbGVyczIuZGVsZXRlKGhhbmRsZXIpO1xuICAgIGlmICghZWxlbWVudEhhbmRsZXJzMi5zaXplICYmIG9ic2VydmVyKSB7XG4gICAgICBvYnNlcnZlci51bm9ic2VydmUodGFyZ2V0KTtcbiAgICB9XG4gIH07XG59XG5cbi8vIHNyYy9kb20tZXZlbnRzL3Jlc2l6ZS9yZXNpemVXaW5kb3cudHNcbnZhciBsaXN0ZW5lcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xudmFyIGNsZWFudXBXaW5kb3dSZXNpemVIYW5kbGVyO1xudmFyIGNyZWF0ZVJlc2l6ZUhhbmRsZXIgPSAoKSA9PiB7XG4gIGNvbnN0IGhhbmRsZVJlc2l6ZSA9ICgpID0+IHtcbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChcbiAgICAgIChjYWxsYmFjaykgPT4gY2FsbGJhY2soe1xuICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXG4gICAgICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0XG4gICAgICB9KVxuICAgICk7XG4gIH07XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGhhbmRsZVJlc2l6ZSk7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIiwgaGFuZGxlUmVzaXplKTtcbiAgfTtcbn07XG52YXIgcmVzaXplV2luZG93ID0gKGNhbGxiYWNrKSA9PiB7XG4gIGxpc3RlbmVycy5hZGQoY2FsbGJhY2spO1xuICBpZiAoIWNsZWFudXBXaW5kb3dSZXNpemVIYW5kbGVyKSB7XG4gICAgY2xlYW51cFdpbmRvd1Jlc2l6ZUhhbmRsZXIgPSBjcmVhdGVSZXNpemVIYW5kbGVyKCk7XG4gIH1cbiAgcmV0dXJuICgpID0+IHtcbiAgICBsaXN0ZW5lcnMuZGVsZXRlKGNhbGxiYWNrKTtcbiAgICBpZiAoIWxpc3RlbmVycy5zaXplICYmIGNsZWFudXBXaW5kb3dSZXNpemVIYW5kbGVyKSB7XG4gICAgICBjbGVhbnVwV2luZG93UmVzaXplSGFuZGxlcigpO1xuICAgICAgY2xlYW51cFdpbmRvd1Jlc2l6ZUhhbmRsZXIgPSB2b2lkIDA7XG4gICAgfVxuICB9O1xufTtcblxuLy8gc3JjL2RvbS1ldmVudHMvcmVzaXplL2luZGV4LnRzXG52YXIgb25SZXNpemUgPSAoY2FsbGJhY2ssIHsgY29udGFpbmVyID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IH0gPSB7fSkgPT4ge1xuICBpZiAoY29udGFpbmVyID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICByZXR1cm4gcmVzaXplV2luZG93KGNhbGxiYWNrKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcmVzaXplRWxlbWVudChjYWxsYmFjaywgY29udGFpbmVyKTtcbiAgfVxufTtcblxuLy8gc3JjL3Byb2dyZXNzLnRzXG52YXIgcHJvZ3Jlc3MgPSAobWluLCBtYXgsIHZhbHVlKSA9PiBtYXggLSBtaW4gPT09IDAgPyAxIDogKHZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pO1xuXG4vLyBzcmMvZG9tLWV2ZW50cy9zY3JvbGwvU2Nyb2xsSGFuZGxlci50c1xudmFyIFNDUk9MTF9LRVlTID0ge1xuICB4OiB7XG4gICAgbGVuZ3RoOiBcIldpZHRoXCIsXG4gICAgcG9zaXRpb246IFwiTGVmdFwiXG4gIH0sXG4gIHk6IHtcbiAgICBsZW5ndGg6IFwiSGVpZ2h0XCIsXG4gICAgcG9zaXRpb246IFwiVG9wXCJcbiAgfVxufTtcbnZhciBTY3JvbGxIYW5kbGVyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihjYWxsYmFjaywgY29udGFpbmVyKSB7XG4gICAgdGhpcy5jcmVhdGVBeGlzID0gKCkgPT4gKHtcbiAgICAgIGN1cnJlbnQ6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHNjcm9sbExlbmd0aDogMFxuICAgIH0pO1xuICAgIHRoaXMudXBkYXRlQXhpcyA9IChheGlzTmFtZSkgPT4ge1xuICAgICAgY29uc3QgYXhpcyA9IHRoaXMuaW5mb1theGlzTmFtZV07XG4gICAgICBjb25zdCB7IGxlbmd0aCwgcG9zaXRpb24gfSA9IFNDUk9MTF9LRVlTW2F4aXNOYW1lXTtcbiAgICAgIGF4aXMuY3VycmVudCA9IHRoaXMuY29udGFpbmVyW2BzY3JvbGwke3Bvc2l0aW9ufWBdO1xuICAgICAgYXhpcy5zY3JvbGxMZW5ndGggPSB0aGlzLmNvbnRhaW5lcltcInNjcm9sbFwiICsgbGVuZ3RoXSAtIHRoaXMuY29udGFpbmVyW1wiY2xpZW50XCIgKyBsZW5ndGhdO1xuICAgICAgYXhpcy5wcm9ncmVzcyA9IHByb2dyZXNzKDAsIGF4aXMuc2Nyb2xsTGVuZ3RoLCBheGlzLmN1cnJlbnQpO1xuICAgIH07XG4gICAgdGhpcy51cGRhdGUgPSAoKSA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZUF4aXMoXCJ4XCIpO1xuICAgICAgdGhpcy51cGRhdGVBeGlzKFwieVwiKTtcbiAgICB9O1xuICAgIHRoaXMuc2VuZEV2ZW50ID0gKCkgPT4ge1xuICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLmluZm8pO1xuICAgIH07XG4gICAgdGhpcy5hZHZhbmNlID0gKCkgPT4ge1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgIHRoaXMuc2VuZEV2ZW50KCk7XG4gICAgfTtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5pbmZvID0ge1xuICAgICAgdGltZTogMCxcbiAgICAgIHg6IHRoaXMuY3JlYXRlQXhpcygpLFxuICAgICAgeTogdGhpcy5jcmVhdGVBeGlzKClcbiAgICB9O1xuICB9XG59O1xuXG4vLyBzcmMvZG9tLWV2ZW50cy9zY3JvbGwvaW5kZXgudHNcbnZhciBzY3JvbGxMaXN0ZW5lcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbnZhciByZXNpemVMaXN0ZW5lcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFdlYWtNYXAoKTtcbnZhciBvblNjcm9sbEhhbmRsZXJzID0gLyogQF9fUFVSRV9fICovIG5ldyBXZWFrTWFwKCk7XG52YXIgZ2V0VGFyZ2V0ID0gKGNvbnRhaW5lcikgPT4gY29udGFpbmVyID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgPyB3aW5kb3cgOiBjb250YWluZXI7XG52YXIgb25TY3JvbGwgPSAoY2FsbGJhY2ssIHsgY29udGFpbmVyID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IH0gPSB7fSkgPT4ge1xuICBsZXQgY29udGFpbmVySGFuZGxlcnMgPSBvblNjcm9sbEhhbmRsZXJzLmdldChjb250YWluZXIpO1xuICBpZiAoIWNvbnRhaW5lckhhbmRsZXJzKSB7XG4gICAgY29udGFpbmVySGFuZGxlcnMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgIG9uU2Nyb2xsSGFuZGxlcnMuc2V0KGNvbnRhaW5lciwgY29udGFpbmVySGFuZGxlcnMpO1xuICB9XG4gIGNvbnN0IGNvbnRhaW5lckhhbmRsZXIgPSBuZXcgU2Nyb2xsSGFuZGxlcihjYWxsYmFjaywgY29udGFpbmVyKTtcbiAgY29udGFpbmVySGFuZGxlcnMuYWRkKGNvbnRhaW5lckhhbmRsZXIpO1xuICBpZiAoIXNjcm9sbExpc3RlbmVycy5oYXMoY29udGFpbmVyKSkge1xuICAgIGNvbnN0IGxpc3RlbmVyID0gKCkgPT4ge1xuICAgICAgY29udGFpbmVySGFuZGxlcnM/LmZvckVhY2goKGhhbmRsZXIpID0+IGhhbmRsZXIuYWR2YW5jZSgpKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgc2Nyb2xsTGlzdGVuZXJzLnNldChjb250YWluZXIsIGxpc3RlbmVyKTtcbiAgICBjb25zdCB0YXJnZXQgPSBnZXRUYXJnZXQoY29udGFpbmVyKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBsaXN0ZW5lciwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgIGlmIChjb250YWluZXIgIT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgICAgcmVzaXplTGlzdGVuZXJzLnNldChjb250YWluZXIsIG9uUmVzaXplKGxpc3RlbmVyLCB7IGNvbnRhaW5lciB9KSk7XG4gICAgfVxuICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGxpc3RlbmVyLCB7IHBhc3NpdmU6IHRydWUgfSk7XG4gIH1cbiAgY29uc3QgYW5pbWF0ZVNjcm9sbCA9IHNjcm9sbExpc3RlbmVycy5nZXQoY29udGFpbmVyKTtcbiAgcmFmKGFuaW1hdGVTY3JvbGwpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHJhZi5jYW5jZWwoYW5pbWF0ZVNjcm9sbCk7XG4gICAgY29uc3QgY29udGFpbmVySGFuZGxlcnMyID0gb25TY3JvbGxIYW5kbGVycy5nZXQoY29udGFpbmVyKTtcbiAgICBpZiAoIWNvbnRhaW5lckhhbmRsZXJzMilcbiAgICAgIHJldHVybjtcbiAgICBjb250YWluZXJIYW5kbGVyczIuZGVsZXRlKGNvbnRhaW5lckhhbmRsZXIpO1xuICAgIGlmIChjb250YWluZXJIYW5kbGVyczIuc2l6ZSlcbiAgICAgIHJldHVybjtcbiAgICBjb25zdCBsaXN0ZW5lciA9IHNjcm9sbExpc3RlbmVycy5nZXQoY29udGFpbmVyKTtcbiAgICBzY3JvbGxMaXN0ZW5lcnMuZGVsZXRlKGNvbnRhaW5lcik7XG4gICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICBnZXRUYXJnZXQoY29udGFpbmVyKS5yZW1vdmVFdmVudExpc3RlbmVyKFwic2Nyb2xsXCIsIGxpc3RlbmVyKTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGxpc3RlbmVyKTtcbiAgICAgIHJlc2l6ZUxpc3RlbmVycy5nZXQoY29udGFpbmVyKT8uKCk7XG4gICAgfVxuICB9O1xufTtcblxuLy8gc3JjL2hvb2tzL3VzZUNvbnN0YW50LnRzXG5pbXBvcnQgeyB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIHVzZUNvbnN0YW50KGluaXQpIHtcbiAgY29uc3QgcmVmID0gdXNlUmVmKG51bGwpO1xuICBpZiAocmVmLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICByZWYuY3VycmVudCA9IGluaXQoKTtcbiAgfVxuICByZXR1cm4gcmVmLmN1cnJlbnQ7XG59XG5cbi8vIHNyYy9ob29rcy91c2VGb3JjZVVwZGF0ZS50c1xuaW1wb3J0IHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL2hvb2tzL3VzZUlzTW91bnRlZC50c1xuaW1wb3J0IHsgdXNlUmVmIGFzIHVzZVJlZjIgfSBmcm9tIFwicmVhY3RcIjtcblxuLy8gc3JjL2hvb2tzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QudHNcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0IH0gZnJvbSBcInJlYWN0XCI7XG52YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IGlzU1NSKCkgPyB1c2VFZmZlY3QgOiB1c2VMYXlvdXRFZmZlY3Q7XG5cbi8vIHNyYy9ob29rcy91c2VJc01vdW50ZWQudHNcbnZhciB1c2VJc01vdW50ZWQgPSAoKSA9PiB7XG4gIGNvbnN0IGlzTW91bnRlZCA9IHVzZVJlZjIoZmFsc2UpO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpc01vdW50ZWQuY3VycmVudCA9IHRydWU7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlzTW91bnRlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gaXNNb3VudGVkO1xufTtcblxuLy8gc3JjL2hvb2tzL3VzZUZvcmNlVXBkYXRlLnRzXG5mdW5jdGlvbiB1c2VGb3JjZVVwZGF0ZSgpIHtcbiAgY29uc3QgdXBkYXRlMiA9IHVzZVN0YXRlKClbMV07XG4gIGNvbnN0IGlzTW91bnRlZCA9IHVzZUlzTW91bnRlZCgpO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmIChpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgdXBkYXRlMihNYXRoLnJhbmRvbSgpKTtcbiAgICB9XG4gIH07XG59XG5cbi8vIHNyYy9ob29rcy91c2VNZW1vT25lLnRzXG5pbXBvcnQgeyB1c2VFZmZlY3QgYXMgdXNlRWZmZWN0MiwgdXNlUmVmIGFzIHVzZVJlZjMsIHVzZVN0YXRlIGFzIHVzZVN0YXRlMiB9IGZyb20gXCJyZWFjdFwiO1xuZnVuY3Rpb24gdXNlTWVtb09uZShnZXRSZXN1bHQsIGlucHV0cykge1xuICBjb25zdCBbaW5pdGlhbF0gPSB1c2VTdGF0ZTIoXG4gICAgKCkgPT4gKHtcbiAgICAgIGlucHV0cyxcbiAgICAgIHJlc3VsdDogZ2V0UmVzdWx0KClcbiAgICB9KVxuICApO1xuICBjb25zdCBjb21taXR0ZWQgPSB1c2VSZWYzKCk7XG4gIGNvbnN0IHByZXZDYWNoZSA9IGNvbW1pdHRlZC5jdXJyZW50O1xuICBsZXQgY2FjaGUgPSBwcmV2Q2FjaGU7XG4gIGlmIChjYWNoZSkge1xuICAgIGNvbnN0IHVzZUNhY2hlID0gQm9vbGVhbihcbiAgICAgIGlucHV0cyAmJiBjYWNoZS5pbnB1dHMgJiYgYXJlSW5wdXRzRXF1YWwoaW5wdXRzLCBjYWNoZS5pbnB1dHMpXG4gICAgKTtcbiAgICBpZiAoIXVzZUNhY2hlKSB7XG4gICAgICBjYWNoZSA9IHtcbiAgICAgICAgaW5wdXRzLFxuICAgICAgICByZXN1bHQ6IGdldFJlc3VsdCgpXG4gICAgICB9O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjYWNoZSA9IGluaXRpYWw7XG4gIH1cbiAgdXNlRWZmZWN0MigoKSA9PiB7XG4gICAgY29tbWl0dGVkLmN1cnJlbnQgPSBjYWNoZTtcbiAgICBpZiAocHJldkNhY2hlID09IGluaXRpYWwpIHtcbiAgICAgIGluaXRpYWwuaW5wdXRzID0gaW5pdGlhbC5yZXN1bHQgPSB2b2lkIDA7XG4gICAgfVxuICB9LCBbY2FjaGVdKTtcbiAgcmV0dXJuIGNhY2hlLnJlc3VsdDtcbn1cbmZ1bmN0aW9uIGFyZUlucHV0c0VxdWFsKG5leHQsIHByZXYpIHtcbiAgaWYgKG5leHQubGVuZ3RoICE9PSBwcmV2Lmxlbmd0aCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBmb3IgKGxldCBpID0gMDsgaSA8IG5leHQubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAobmV4dFtpXSAhPT0gcHJldltpXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLy8gc3JjL2hvb2tzL3VzZU9uY2UudHNcbmltcG9ydCB7IHVzZUVmZmVjdCBhcyB1c2VFZmZlY3QzIH0gZnJvbSBcInJlYWN0XCI7XG52YXIgdXNlT25jZSA9IChlZmZlY3QpID0+IHVzZUVmZmVjdDMoZWZmZWN0LCBlbXB0eURlcHMpO1xudmFyIGVtcHR5RGVwcyA9IFtdO1xuXG4vLyBzcmMvaG9va3MvdXNlUHJldi50c1xuaW1wb3J0IHsgdXNlRWZmZWN0IGFzIHVzZUVmZmVjdDQsIHVzZVJlZiBhcyB1c2VSZWY0IH0gZnJvbSBcInJlYWN0XCI7XG5mdW5jdGlvbiB1c2VQcmV2KHZhbHVlKSB7XG4gIGNvbnN0IHByZXZSZWYgPSB1c2VSZWY0KCk7XG4gIHVzZUVmZmVjdDQoKCkgPT4ge1xuICAgIHByZXZSZWYuY3VycmVudCA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHByZXZSZWYuY3VycmVudDtcbn1cblxuLy8gc3JjL2hvb2tzL3VzZVJlZHVjZWRNb3Rpb24udHNcbmltcG9ydCB7IHVzZVN0YXRlIGFzIHVzZVN0YXRlMyB9IGZyb20gXCJyZWFjdFwiO1xudmFyIHVzZVJlZHVjZWRNb3Rpb24gPSAoKSA9PiB7XG4gIGNvbnN0IFtyZWR1Y2VkTW90aW9uLCBzZXRSZWR1Y2VkTW90aW9uXSA9IHVzZVN0YXRlMyhudWxsKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgY29uc3QgbXFsID0gd2luZG93Lm1hdGNoTWVkaWEoXCIocHJlZmVycy1yZWR1Y2VkLW1vdGlvbilcIik7XG4gICAgY29uc3QgaGFuZGxlTWVkaWFDaGFuZ2UgPSAoZSkgPT4ge1xuICAgICAgc2V0UmVkdWNlZE1vdGlvbihlLm1hdGNoZXMpO1xuICAgICAgYXNzaWduKHtcbiAgICAgICAgc2tpcEFuaW1hdGlvbjogZS5tYXRjaGVzXG4gICAgICB9KTtcbiAgICB9O1xuICAgIGhhbmRsZU1lZGlhQ2hhbmdlKG1xbCk7XG4gICAgbXFsLmFkZEV2ZW50TGlzdGVuZXIoXCJjaGFuZ2VcIiwgaGFuZGxlTWVkaWFDaGFuZ2UpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBtcWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNoYW5nZVwiLCBoYW5kbGVNZWRpYUNoYW5nZSk7XG4gICAgfTtcbiAgfSwgW10pO1xuICByZXR1cm4gcmVkdWNlZE1vdGlvbjtcbn07XG5leHBvcnQge1xuICBGbHVpZFZhbHVlLFxuICBnbG9iYWxzX2V4cG9ydHMgYXMgR2xvYmFscyxcbiAgYWRkRmx1aWRPYnNlcnZlcixcbiAgY2FsbEZsdWlkT2JzZXJ2ZXIsXG4gIGNhbGxGbHVpZE9ic2VydmVycyxcbiAgY2xhbXAsXG4gIGNvbG9yVG9SZ2JhLFxuICBjb2xvcnMyIGFzIGNvbG9ycyxcbiAgY3JlYXRlSW50ZXJwb2xhdG9yLFxuICBjcmVhdGVTdHJpbmdJbnRlcnBvbGF0b3IyIGFzIGNyZWF0ZVN0cmluZ0ludGVycG9sYXRvcixcbiAgZGVmaW5lSGlkZGVuLFxuICBkZXByZWNhdGVEaXJlY3RDYWxsLFxuICBkZXByZWNhdGVJbnRlcnBvbGF0ZSxcbiAgZWFjaCxcbiAgZWFjaFByb3AsXG4gIGVhc2luZ3MsXG4gIGZsdXNoLFxuICBmbHVzaENhbGxzLFxuICBmcmFtZUxvb3AsXG4gIGdldEZsdWlkT2JzZXJ2ZXJzLFxuICBnZXRGbHVpZFZhbHVlLFxuICBoYXNGbHVpZFZhbHVlLFxuICBoZXgzLFxuICBoZXg0LFxuICBoZXg2LFxuICBoZXg4LFxuICBoc2wsXG4gIGhzbGEsXG4gIGlzLFxuICBpc0FuaW1hdGVkU3RyaW5nLFxuICBpc0VxdWFsLFxuICBpc1NTUixcbiAgbm9vcCxcbiAgb25SZXNpemUsXG4gIG9uU2Nyb2xsLFxuICBvbmNlLFxuICBwcmVmaXgsXG4gIHJhZixcbiAgcmVtb3ZlRmx1aWRPYnNlcnZlcixcbiAgcmdiLFxuICByZ2JhLFxuICBzZXRGbHVpZEdldHRlcixcbiAgdG9BcnJheSxcbiAgdXNlQ29uc3RhbnQsXG4gIHVzZUZvcmNlVXBkYXRlLFxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0LFxuICB1c2VNZW1vT25lLFxuICB1c2VPbmNlLFxuICB1c2VQcmV2LFxuICB1c2VSZWR1Y2VkTW90aW9uXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3Qtc3ByaW5nX3NoYXJlZC5tb2Rlcm4ubWpzLm1hcCJdLCJuYW1lcyI6WyJfX2RlZlByb3AiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fZXhwb3J0IiwidGFyZ2V0IiwiYWxsIiwibmFtZSIsImdldCIsImVudW1lcmFibGUiLCJnbG9iYWxzX2V4cG9ydHMiLCJhc3NpZ24iLCJjb2xvcnMiLCJjcmVhdGVTdHJpbmdJbnRlcnBvbGF0b3IiLCJza2lwQW5pbWF0aW9uIiwidG8iLCJ3aWxsQWR2YW5jZSIsInVwZGF0ZVF1ZXVlIiwibWFrZVF1ZXVlIiwicmFmIiwiZm4iLCJzY2hlZHVsZSIsIndyaXRlUXVldWUiLCJ3cml0ZSIsIm9uU3RhcnRRdWV1ZSIsIm9uU3RhcnQiLCJvbkZyYW1lUXVldWUiLCJvbkZyYW1lIiwib25GaW5pc2hRdWV1ZSIsIm9uRmluaXNoIiwidGltZW91dHMiLCJzZXRUaW1lb3V0IiwiaGFuZGxlciIsIm1zIiwidGltZSIsIm5vdyIsImNhbmNlbCIsImkiLCJmaW5kSW5kZXgiLCJ0Iiwic3BsaWNlIiwicGVuZGluZ0NvdW50IiwidGltZW91dCIsImZpbmRUaW1lb3V0Iiwic3RhcnQiLCJsZW5ndGgiLCJkZWxldGUiLCJzeW5jIiwiYmF0Y2hlZFVwZGF0ZXMiLCJ0aHJvdHRsZSIsImxhc3RBcmdzIiwicXVldWVkRm4iLCJ0aHJvdHRsZWQiLCJhcmdzIiwibmF0aXZlUmFmIiwid2luZG93IiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidXNlIiwiaW1wbCIsInBlcmZvcm1hbmNlIiwiRGF0ZSIsImNhdGNoIiwiY29uc29sZSIsImVycm9yIiwiZnJhbWVMb29wIiwiYWR2YW5jZSIsIndhcm4iLCJ1cGRhdGUiLCJ0cyIsInF1ZXVlIiwiYWRkIiwibG9vcCIsInN0b3AiLCJwcmV2VHMiLCJjb3VudCIsImVhY2hTYWZlbHkiLCJmbHVzaCIsIk1hdGgiLCJtaW4iLCJuZXh0IiwiU2V0IiwiY3VycmVudCIsImhhcyIsImFyZyIsInNpemUiLCJ2YWx1ZXMiLCJlYWNoMiIsImZvckVhY2giLCJ2YWx1ZSIsImUiLCJub29wIiwiZGVmaW5lSGlkZGVuIiwib2JqIiwia2V5Iiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJpcyIsImFyciIsIkFycmF5IiwiaXNBcnJheSIsImEiLCJjb25zdHJ1Y3RvciIsImZ1biIsInN0ciIsIm51bSIsInVuZCIsImlzRXF1YWwiLCJiIiwiZWFjaCIsImVhY2hQcm9wIiwiY3R4IiwiY2FsbCIsImhhc093blByb3BlcnR5IiwidG9BcnJheSIsIml0ZXJhdG9yIiwiaXRlbXMiLCJmcm9tIiwiY2xlYXIiLCJmbHVzaENhbGxzIiwiaXNTU1IiLCJuYXZpZ2F0b3IiLCJ0ZXN0IiwidXNlckFnZW50IiwiZ2xvYmFscyIsInN0YXJ0UXVldWUiLCJjdXJyZW50RnJhbWUiLCJwcmV2RnJhbWUiLCJwcmlvcml0eSIsImlkbGUiLCJhbmltYXRpb24iLCJmbHVzaFN0YXJ0UXVldWUiLCJzdGFydFNhZmVseSIsInNvcnQiLCJwcmV2SW5kZXgiLCJpbmRleE9mIiwic3RhcnRVbnNhZmVseSIsImluY2x1ZGVzIiwib3RoZXIiLCJkdCIsIm5leHRGcmFtZSIsInB1c2giLCJpbmRleCIsImNsYW1wIiwibWF4IiwidiIsImNvbG9yczIiLCJ0cmFuc3BhcmVudCIsImFsaWNlYmx1ZSIsImFudGlxdWV3aGl0ZSIsImFxdWEiLCJhcXVhbWFyaW5lIiwiYXp1cmUiLCJiZWlnZSIsImJpc3F1ZSIsImJsYWNrIiwiYmxhbmNoZWRhbG1vbmQiLCJibHVlIiwiYmx1ZXZpb2xldCIsImJyb3duIiwiYnVybHl3b29kIiwiYnVybnRzaWVubmEiLCJjYWRldGJsdWUiLCJjaGFydHJldXNlIiwiY2hvY29sYXRlIiwiY29yYWwiLCJjb3JuZmxvd2VyYmx1ZSIsImNvcm5zaWxrIiwiY3JpbXNvbiIsImN5YW4iLCJkYXJrYmx1ZSIsImRhcmtjeWFuIiwiZGFya2dvbGRlbnJvZCIsImRhcmtncmF5IiwiZGFya2dyZWVuIiwiZGFya2dyZXkiLCJkYXJra2hha2kiLCJkYXJrbWFnZW50YSIsImRhcmtvbGl2ZWdyZWVuIiwiZGFya29yYW5nZSIsImRhcmtvcmNoaWQiLCJkYXJrcmVkIiwiZGFya3NhbG1vbiIsImRhcmtzZWFncmVlbiIsImRhcmtzbGF0ZWJsdWUiLCJkYXJrc2xhdGVncmF5IiwiZGFya3NsYXRlZ3JleSIsImRhcmt0dXJxdW9pc2UiLCJkYXJrdmlvbGV0IiwiZGVlcHBpbmsiLCJkZWVwc2t5Ymx1ZSIsImRpbWdyYXkiLCJkaW1ncmV5IiwiZG9kZ2VyYmx1ZSIsImZpcmVicmljayIsImZsb3JhbHdoaXRlIiwiZm9yZXN0Z3JlZW4iLCJmdWNoc2lhIiwiZ2FpbnNib3JvIiwiZ2hvc3R3aGl0ZSIsImdvbGQiLCJnb2xkZW5yb2QiLCJncmF5IiwiZ3JlZW4iLCJncmVlbnllbGxvdyIsImdyZXkiLCJob25leWRldyIsImhvdHBpbmsiLCJpbmRpYW5yZWQiLCJpbmRpZ28iLCJpdm9yeSIsImtoYWtpIiwibGF2ZW5kZXIiLCJsYXZlbmRlcmJsdXNoIiwibGF3bmdyZWVuIiwibGVtb25jaGlmZm9uIiwibGlnaHRibHVlIiwibGlnaHRjb3JhbCIsImxpZ2h0Y3lhbiIsImxpZ2h0Z29sZGVucm9keWVsbG93IiwibGlnaHRncmF5IiwibGlnaHRncmVlbiIsImxpZ2h0Z3JleSIsImxpZ2h0cGluayIsImxpZ2h0c2FsbW9uIiwibGlnaHRzZWFncmVlbiIsImxpZ2h0c2t5Ymx1ZSIsImxpZ2h0c2xhdGVncmF5IiwibGlnaHRzbGF0ZWdyZXkiLCJsaWdodHN0ZWVsYmx1ZSIsImxpZ2h0eWVsbG93IiwibGltZSIsImxpbWVncmVlbiIsImxpbmVuIiwibWFnZW50YSIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicmVkIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0YW4iLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93IiwieWVsbG93Z3JlZW4iLCJOVU1CRVIiLCJQRVJDRU5UQUdFIiwicGFydHMiLCJqb2luIiwicmdiIiwiUmVnRXhwIiwicmdiYSIsImhzbCIsImhzbGEiLCJoZXgzIiwiaGV4NCIsImhleDYiLCJoZXg4Iiwibm9ybWFsaXplQ29sb3IiLCJjb2xvciIsIm1hdGNoIiwiZXhlYyIsInBhcnNlSW50IiwicGFyc2UyNTUiLCJwYXJzZTEiLCJoc2xUb1JnYiIsInBhcnNlMzYwIiwicGFyc2VQZXJjZW50YWdlIiwiaHVlMnJnYiIsInAiLCJxIiwiaCIsInMiLCJsIiwiciIsImciLCJyb3VuZCIsImludCIsInBhcnNlRmxvYXQiLCJjb2xvclRvUmdiYSIsImlucHV0IiwiaW50MzJDb2xvciIsImNyZWF0ZUludGVycG9sYXRvciIsInJhbmdlIiwib3V0cHV0IiwiZXh0cmFwb2xhdGUiLCJjb25maWciLCJvdXRwdXRSYW5nZSIsImlucHV0UmFuZ2UiLCJleHRyYXBvbGF0ZUxlZnQiLCJleHRyYXBvbGF0ZVJpZ2h0IiwiZWFzaW5nIiwicmFuZ2UyIiwiZmluZFJhbmdlIiwiaW50ZXJwb2xhdGUiLCJtYXAiLCJpbnB1dE1pbiIsImlucHV0TWF4Iiwib3V0cHV0TWluIiwib3V0cHV0TWF4IiwicmVzdWx0IiwiSW5maW5pdHkiLCJzdGVwcyIsInN0ZXBzMiIsImRpcmVjdGlvbiIsInByb2dyZXNzMiIsImV4cGFuZGVkIiwicm91bmRlZCIsImZsb29yIiwiY2VpbCIsImMxIiwiYzIiLCJjMyIsImM0IiwiUEkiLCJjNSIsImJvdW5jZU91dCIsIngiLCJuMSIsImQxIiwiZWFzaW5ncyIsImxpbmVhciIsImVhc2VJblF1YWQiLCJlYXNlT3V0UXVhZCIsImVhc2VJbk91dFF1YWQiLCJwb3ciLCJlYXNlSW5DdWJpYyIsImVhc2VPdXRDdWJpYyIsImVhc2VJbk91dEN1YmljIiwiZWFzZUluUXVhcnQiLCJlYXNlT3V0UXVhcnQiLCJlYXNlSW5PdXRRdWFydCIsImVhc2VJblF1aW50IiwiZWFzZU91dFF1aW50IiwiZWFzZUluT3V0UXVpbnQiLCJlYXNlSW5TaW5lIiwiY29zIiwiZWFzZU91dFNpbmUiLCJzaW4iLCJlYXNlSW5PdXRTaW5lIiwiZWFzZUluRXhwbyIsImVhc2VPdXRFeHBvIiwiZWFzZUluT3V0RXhwbyIsImVhc2VJbkNpcmMiLCJzcXJ0IiwiZWFzZU91dENpcmMiLCJlYXNlSW5PdXRDaXJjIiwiZWFzZUluQmFjayIsImVhc2VPdXRCYWNrIiwiZWFzZUluT3V0QmFjayIsImVhc2VJbkVsYXN0aWMiLCJlYXNlT3V0RWxhc3RpYyIsImVhc2VJbk91dEVsYXN0aWMiLCJlYXNlSW5Cb3VuY2UiLCJlYXNlT3V0Qm91bmNlIiwiZWFzZUluT3V0Qm91bmNlIiwiJGdldCIsIlN5bWJvbCIsImZvciIsIiRvYnNlcnZlcnMiLCJoYXNGbHVpZFZhbHVlIiwiQm9vbGVhbiIsImdldEZsdWlkVmFsdWUiLCJnZXRGbHVpZE9ic2VydmVycyIsImNhbGxGbHVpZE9ic2VydmVyIiwib2JzZXJ2ZXIyIiwiZXZlbnQiLCJldmVudE9ic2VydmVkIiwiY2FsbEZsdWlkT2JzZXJ2ZXJzIiwib2JzZXJ2ZXJzIiwiRmx1aWRWYWx1ZSIsIkVycm9yIiwic2V0Rmx1aWRHZXR0ZXIiLCJzZXRIaWRkZW4iLCJhZGRGbHVpZE9ic2VydmVyIiwib2JzZXJ2ZXJBZGRlZCIsInJlbW92ZUZsdWlkT2JzZXJ2ZXIiLCJvYnNlcnZlclJlbW92ZWQiLCJudW1iZXJSZWdleCIsImNvbG9yUmVnZXgiLCJ1bml0UmVnZXgiLCJzb3VyY2UiLCJyZ2JhUmVnZXgiLCJjc3NWYXJpYWJsZVJlZ2V4IiwidmFyaWFibGVUb1JnYmEiLCJ0b2tlbiIsImZhbGxiYWNrIiwicGFyc2VDU1NWYXJpYWJsZSIsImdldENvbXB1dGVkU3R5bGUiLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCIsImdldFByb3BlcnR5VmFsdWUiLCJ0cmltIiwic3RhcnRzV2l0aCIsInZhbHVlMiIsIm5hbWVkQ29sb3JSZWdleCIsInJnYmFSb3VuZCIsIl8iLCJwMSIsInAyIiwicDMiLCJwNCIsImNyZWF0ZVN0cmluZ0ludGVycG9sYXRvcjIiLCJrZXlzIiwicmVwbGFjZSIsImtleWZyYW1lcyIsIk51bWJlciIsIm91dHB1dFJhbmdlcyIsImludGVycG9sYXRvcnMiLCJvdXRwdXQyIiwibWlzc2luZ1VuaXQiLCJmaW5kIiwicHJlZml4Iiwib25jZSIsImZ1bmMiLCJjYWxsZWQiLCJUeXBlRXJyb3IiLCJ3YXJuSW50ZXJwb2xhdGUiLCJkZXByZWNhdGVJbnRlcnBvbGF0ZSIsIndhcm5EaXJlY3RDYWxsIiwiZGVwcmVjYXRlRGlyZWN0Q2FsbCIsImlzQW5pbWF0ZWRTdHJpbmciLCJvYnNlcnZlciIsInJlc2l6ZUhhbmRsZXJzIiwiV2Vha01hcCIsImhhbmRsZU9ic2VydmF0aW9uIiwiZW50cmllcyIsImNvbnRlbnRSZWN0IiwicmVzaXplRWxlbWVudCIsIlJlc2l6ZU9ic2VydmVyIiwiZWxlbWVudEhhbmRsZXJzIiwic2V0Iiwib2JzZXJ2ZSIsImVsZW1lbnRIYW5kbGVyczIiLCJ1bm9ic2VydmUiLCJsaXN0ZW5lcnMiLCJjbGVhbnVwV2luZG93UmVzaXplSGFuZGxlciIsImNyZWF0ZVJlc2l6ZUhhbmRsZXIiLCJoYW5kbGVSZXNpemUiLCJjYWxsYmFjayIsIndpZHRoIiwiaW5uZXJXaWR0aCIsImhlaWdodCIsImlubmVySGVpZ2h0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZXNpemVXaW5kb3ciLCJvblJlc2l6ZSIsImNvbnRhaW5lciIsInByb2dyZXNzIiwiU0NST0xMX0tFWVMiLCJwb3NpdGlvbiIsInkiLCJTY3JvbGxIYW5kbGVyIiwiY3JlYXRlQXhpcyIsInNjcm9sbExlbmd0aCIsInVwZGF0ZUF4aXMiLCJheGlzTmFtZSIsImF4aXMiLCJpbmZvIiwic2VuZEV2ZW50Iiwic2Nyb2xsTGlzdGVuZXJzIiwicmVzaXplTGlzdGVuZXJzIiwib25TY3JvbGxIYW5kbGVycyIsImdldFRhcmdldCIsIm9uU2Nyb2xsIiwiY29udGFpbmVySGFuZGxlcnMiLCJjb250YWluZXJIYW5kbGVyIiwibGlzdGVuZXIiLCJwYXNzaXZlIiwiYW5pbWF0ZVNjcm9sbCIsImNvbnRhaW5lckhhbmRsZXJzMiIsInVzZVJlZiIsInVzZUNvbnN0YW50IiwiaW5pdCIsInJlZiIsInVzZVN0YXRlIiwidXNlUmVmMiIsInVzZUVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJ1c2VJc01vdW50ZWQiLCJpc01vdW50ZWQiLCJ1c2VGb3JjZVVwZGF0ZSIsInVwZGF0ZTIiLCJyYW5kb20iLCJ1c2VFZmZlY3QyIiwidXNlUmVmMyIsInVzZVN0YXRlMiIsInVzZU1lbW9PbmUiLCJnZXRSZXN1bHQiLCJpbnB1dHMiLCJpbml0aWFsIiwiY29tbWl0dGVkIiwicHJldkNhY2hlIiwiY2FjaGUiLCJ1c2VDYWNoZSIsImFyZUlucHV0c0VxdWFsIiwicHJldiIsInVzZUVmZmVjdDMiLCJ1c2VPbmNlIiwiZWZmZWN0IiwiZW1wdHlEZXBzIiwidXNlRWZmZWN0NCIsInVzZVJlZjQiLCJ1c2VQcmV2IiwicHJldlJlZiIsInVzZVN0YXRlMyIsInVzZVJlZHVjZWRNb3Rpb24iLCJyZWR1Y2VkTW90aW9uIiwic2V0UmVkdWNlZE1vdGlvbiIsIm1xbCIsIm1hdGNoTWVkaWEiLCJoYW5kbGVNZWRpYUNoYW5nZSIsIm1hdGNoZXMiLCJHbG9iYWxzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/types/dist/react-spring_types.modern.mjs":
/*!*****************************************************************************!*\
  !*** ./node_modules/@react-spring/types/dist/react-spring_types.modern.mjs ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: function() { return /* binding */ Any; }\n/* harmony export */ });\n// src/utils.ts\nvar Any = class {\n};\n //# sourceMappingURL=react-spring_types.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9AcmVhY3Qtc3ByaW5nL3R5cGVzL2Rpc3QvcmVhY3Qtc3ByaW5nX3R5cGVzLm1vZGVybi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGVBQWU7QUFDZixJQUFJQSxNQUFNO0FBQ1Y7QUFHRSxDQUNGLHNEQUFzRCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXNwcmluZy90eXBlcy9kaXN0L3JlYWN0LXNwcmluZ190eXBlcy5tb2Rlcm4ubWpzP2FiYjYiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3V0aWxzLnRzXG52YXIgQW55ID0gY2xhc3Mge1xufTtcbmV4cG9ydCB7XG4gIEFueVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXNwcmluZ190eXBlcy5tb2Rlcm4ubWpzLm1hcCJdLCJuYW1lcyI6WyJBbnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/types/dist/react-spring_types.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs ***!
  \*************************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Any; },\n/* harmony export */   BailSignal: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.BailSignal; },\n/* harmony export */   Controller: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Controller; },\n/* harmony export */   FrameValue: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.FrameValue; },\n/* harmony export */   Globals: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Globals; },\n/* harmony export */   Interpolation: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Interpolation; },\n/* harmony export */   Spring: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Spring; },\n/* harmony export */   SpringContext: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.SpringContext; },\n/* harmony export */   SpringRef: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.SpringRef; },\n/* harmony export */   SpringValue: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.SpringValue; },\n/* harmony export */   Trail: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Trail; },\n/* harmony export */   Transition: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Transition; },\n/* harmony export */   a: function() { return /* binding */ animated; },\n/* harmony export */   animated: function() { return /* binding */ animated; },\n/* harmony export */   config: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.config; },\n/* harmony export */   createInterpolator: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.createInterpolator; },\n/* harmony export */   easings: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.easings; },\n/* harmony export */   inferTo: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.inferTo; },\n/* harmony export */   interpolate: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.interpolate; },\n/* harmony export */   to: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.to; },\n/* harmony export */   update: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.update; },\n/* harmony export */   useChain: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useChain; },\n/* harmony export */   useInView: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useInView; },\n/* harmony export */   useIsomorphicLayoutEffect: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect; },\n/* harmony export */   useReducedMotion: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useReducedMotion; },\n/* harmony export */   useResize: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useResize; },\n/* harmony export */   useScroll: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useScroll; },\n/* harmony export */   useSpring: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSpring; },\n/* harmony export */   useSpringRef: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSpringRef; },\n/* harmony export */   useSpringValue: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSpringValue; },\n/* harmony export */   useSprings: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSprings; },\n/* harmony export */   useTrail: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useTrail; },\n/* harmony export */   useTransition: function() { return /* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useTransition; }\n/* harmony export */ });\n/* harmony import */ var _react_spring_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/core */ \"(app-pages-browser)/./node_modules/@react-spring/core/dist/react-spring_core.modern.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react-dom/index.js\");\n/* harmony import */ var _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-spring/shared */ \"(app-pages-browser)/./node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\");\n/* harmony import */ var _react_spring_animated__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-spring/animated */ \"(app-pages-browser)/./node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs\");\n// src/index.ts\n\n\n\n\n// src/applyAnimatedValues.ts\nvar isCustomPropRE = /^--/;\nfunction dangerousStyleValue(name, value) {\n    if (value == null || typeof value === \"boolean\" || value === \"\") return \"\";\n    if (typeof value === \"number\" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + \"px\";\n    return (\"\" + value).trim();\n}\nvar attributeCache = {};\nfunction applyAnimatedValues(instance, props) {\n    if (!instance.nodeType || !instance.setAttribute) {\n        return false;\n    }\n    const isFilterElement = instance.nodeName === \"filter\" || instance.parentNode && instance.parentNode.nodeName === \"filter\";\n    const { style, children, scrollTop, scrollLeft, viewBox, ...attributes } = props;\n    const values = Object.values(attributes);\n    const names = Object.keys(attributes).map((name)=>isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, // Attributes are written in dash case\n        (n)=>\"-\" + n.toLowerCase())));\n    if (children !== void 0) {\n        instance.textContent = children;\n    }\n    for(const name in style){\n        if (style.hasOwnProperty(name)) {\n            const value = dangerousStyleValue(name, style[name]);\n            if (isCustomPropRE.test(name)) {\n                instance.style.setProperty(name, value);\n            } else {\n                instance.style[name] = value;\n            }\n        }\n    }\n    names.forEach((name, i)=>{\n        instance.setAttribute(name, values[i]);\n    });\n    if (scrollTop !== void 0) {\n        instance.scrollTop = scrollTop;\n    }\n    if (scrollLeft !== void 0) {\n        instance.scrollLeft = scrollLeft;\n    }\n    if (viewBox !== void 0) {\n        instance.setAttribute(\"viewBox\", viewBox);\n    }\n}\nvar isUnitlessNumber = {\n    animationIterationCount: true,\n    borderImageOutset: true,\n    borderImageSlice: true,\n    borderImageWidth: true,\n    boxFlex: true,\n    boxFlexGroup: true,\n    boxOrdinalGroup: true,\n    columnCount: true,\n    columns: true,\n    flex: true,\n    flexGrow: true,\n    flexPositive: true,\n    flexShrink: true,\n    flexNegative: true,\n    flexOrder: true,\n    gridRow: true,\n    gridRowEnd: true,\n    gridRowSpan: true,\n    gridRowStart: true,\n    gridColumn: true,\n    gridColumnEnd: true,\n    gridColumnSpan: true,\n    gridColumnStart: true,\n    fontWeight: true,\n    lineClamp: true,\n    lineHeight: true,\n    opacity: true,\n    order: true,\n    orphans: true,\n    tabSize: true,\n    widows: true,\n    zIndex: true,\n    zoom: true,\n    // SVG-related properties\n    fillOpacity: true,\n    floodOpacity: true,\n    stopOpacity: true,\n    strokeDasharray: true,\n    strokeDashoffset: true,\n    strokeMiterlimit: true,\n    strokeOpacity: true,\n    strokeWidth: true\n};\nvar prefixKey = (prefix, key)=>prefix + key.charAt(0).toUpperCase() + key.substring(1);\nvar prefixes = [\n    \"Webkit\",\n    \"Ms\",\n    \"Moz\",\n    \"O\"\n];\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop)=>{\n    prefixes.forEach((prefix)=>acc[prefixKey(prefix, prop)] = acc[prop]);\n    return acc;\n}, isUnitlessNumber);\n// src/AnimatedStyle.ts\n\n\nvar domTransforms = /^(matrix|translate|scale|rotate|skew)/;\nvar pxTransforms = /^(translate)/;\nvar degTransforms = /^(rotate|skew)/;\nvar addUnit = (value, unit)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.num(value) && value !== 0 ? value + unit : value;\nvar isValueIdentity = (value, id)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.arr(value) ? value.every((v)=>isValueIdentity(v, id)) : _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.num(value) ? value === id : parseFloat(value) === id;\nvar AnimatedStyle = class extends _react_spring_animated__WEBPACK_IMPORTED_MODULE_3__.AnimatedObject {\n    constructor({ x, y, z, ...style }){\n        const inputs = [];\n        const transforms = [];\n        if (x || y || z) {\n            inputs.push([\n                x || 0,\n                y || 0,\n                z || 0\n            ]);\n            transforms.push((xyz)=>[\n                    \"translate3d(\".concat(xyz.map((v)=>addUnit(v, \"px\")).join(\",\"), \")\"),\n                    // prettier-ignore\n                    isValueIdentity(xyz, 0)\n                ]);\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.eachProp)(style, (value, key)=>{\n            if (key === \"transform\") {\n                inputs.push([\n                    value || \"\"\n                ]);\n                transforms.push((transform)=>[\n                        transform,\n                        transform === \"\"\n                    ]);\n            } else if (domTransforms.test(key)) {\n                delete style[key];\n                if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.und(value)) return;\n                const unit = pxTransforms.test(key) ? \"px\" : degTransforms.test(key) ? \"deg\" : \"\";\n                inputs.push((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.toArray)(value));\n                transforms.push(key === \"rotate3d\" ? (param)=>{\n                    let [x2, y2, z2, deg] = param;\n                    return [\n                        \"rotate3d(\".concat(x2, \",\").concat(y2, \",\").concat(z2, \",\").concat(addUnit(deg, unit), \")\"),\n                        isValueIdentity(deg, 0)\n                    ];\n                } : (input)=>[\n                        \"\".concat(key, \"(\").concat(input.map((v)=>addUnit(v, unit)).join(\",\"), \")\"),\n                        isValueIdentity(input, key.startsWith(\"scale\") ? 1 : 0)\n                    ]);\n            }\n        });\n        if (inputs.length) {\n            style.transform = new FluidTransform(inputs, transforms);\n        }\n        super(style);\n    }\n};\nvar FluidTransform = class extends _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.FluidValue {\n    get() {\n        return this._value || (this._value = this._get());\n    }\n    _get() {\n        let transform = \"\";\n        let identity = true;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(this.inputs, (input, i)=>{\n            const arg1 = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.getFluidValue)(input[0]);\n            const [t, id] = this.transforms[i](_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.arr(arg1) ? arg1 : input.map(_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.getFluidValue));\n            transform += \" \" + t;\n            identity = identity && id;\n        });\n        return identity ? \"none\" : transform;\n    }\n    // Start observing our inputs once we have an observer.\n    observerAdded(count) {\n        if (count == 1) (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(this.inputs, (input)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(input, (value)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.hasFluidValue)(value) && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.addFluidObserver)(value, this)));\n    }\n    // Stop observing our inputs once we have no observers.\n    observerRemoved(count) {\n        if (count == 0) (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(this.inputs, (input)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(input, (value)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.hasFluidValue)(value) && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.removeFluidObserver)(value, this)));\n    }\n    eventObserved(event) {\n        if (event.type == \"change\") {\n            this._value = null;\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.callFluidObservers)(this, event);\n    }\n    constructor(inputs, transforms){\n        super();\n        this.inputs = inputs;\n        this.transforms = transforms;\n        this._value = null;\n    }\n};\n// src/primitives.ts\nvar primitives = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"area\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"base\",\n    \"bdi\",\n    \"bdo\",\n    \"big\",\n    \"blockquote\",\n    \"body\",\n    \"br\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"col\",\n    \"colgroup\",\n    \"data\",\n    \"datalist\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"dialog\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"embed\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"keygen\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"map\",\n    \"mark\",\n    \"menu\",\n    \"menuitem\",\n    \"meta\",\n    \"meter\",\n    \"nav\",\n    \"noscript\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"output\",\n    \"p\",\n    \"param\",\n    \"picture\",\n    \"pre\",\n    \"progress\",\n    \"q\",\n    \"rp\",\n    \"rt\",\n    \"ruby\",\n    \"s\",\n    \"samp\",\n    \"script\",\n    \"section\",\n    \"select\",\n    \"small\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"style\",\n    \"sub\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"u\",\n    \"ul\",\n    \"var\",\n    \"video\",\n    \"wbr\",\n    // SVG\n    \"circle\",\n    \"clipPath\",\n    \"defs\",\n    \"ellipse\",\n    \"foreignObject\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"linearGradient\",\n    \"mask\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"radialGradient\",\n    \"rect\",\n    \"stop\",\n    \"svg\",\n    \"text\",\n    \"tspan\"\n];\n// src/index.ts\n\n_react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Globals.assign({\n    batchedUpdates: react_dom__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates,\n    createStringInterpolator: _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.createStringInterpolator,\n    colors: _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.colors\n});\nvar host = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_3__.createHost)(primitives, {\n    applyAnimatedValues,\n    createAnimatedStyle: (style)=>new AnimatedStyle(style),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getComponentProps: (param)=>{\n        let { scrollTop, scrollLeft, ...props } = param;\n        return props;\n    }\n});\nvar animated = host.animated;\n //# sourceMappingURL=react-spring_web.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/react-spring/dist/react-spring.modern.mjs":
/*!****************************************************************!*\
  !*** ./node_modules/react-spring/dist/react-spring.modern.mjs ***!
  \****************************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.Any; },\n/* harmony export */   BailSignal: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.BailSignal; },\n/* harmony export */   Controller: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.Controller; },\n/* harmony export */   FrameValue: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.FrameValue; },\n/* harmony export */   Globals: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.Globals; },\n/* harmony export */   Interpolation: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.Interpolation; },\n/* harmony export */   Spring: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.Spring; },\n/* harmony export */   SpringContext: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.SpringContext; },\n/* harmony export */   SpringRef: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.SpringRef; },\n/* harmony export */   SpringValue: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.SpringValue; },\n/* harmony export */   Trail: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.Trail; },\n/* harmony export */   Transition: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.Transition; },\n/* harmony export */   a: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.a; },\n/* harmony export */   animated: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.animated; },\n/* harmony export */   config: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.config; },\n/* harmony export */   createInterpolator: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.createInterpolator; },\n/* harmony export */   easings: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.easings; },\n/* harmony export */   inferTo: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.inferTo; },\n/* harmony export */   interpolate: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.interpolate; },\n/* harmony export */   to: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.to; },\n/* harmony export */   update: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.update; },\n/* harmony export */   useChain: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.useChain; },\n/* harmony export */   useInView: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.useInView; },\n/* harmony export */   useIsomorphicLayoutEffect: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect; },\n/* harmony export */   useReducedMotion: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.useReducedMotion; },\n/* harmony export */   useResize: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.useResize; },\n/* harmony export */   useScroll: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.useScroll; },\n/* harmony export */   useSpring: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.useSpring; },\n/* harmony export */   useSpringRef: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.useSpringRef; },\n/* harmony export */   useSpringValue: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.useSpringValue; },\n/* harmony export */   useSprings: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.useSprings; },\n/* harmony export */   useTrail: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.useTrail; },\n/* harmony export */   useTransition: function() { return /* reexport safe */ _react_spring_web__WEBPACK_IMPORTED_MODULE_0__.useTransition; }\n/* harmony export */ });\n/* harmony import */ var _react_spring_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/web */ \"(app-pages-browser)/./node_modules/@react-spring/web/dist/react-spring_web.modern.mjs\");\n// src/index.ts\n //# sourceMappingURL=react-spring.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9yZWFjdC1zcHJpbmcvZGlzdC9yZWFjdC1zcHJpbmcubW9kZXJuLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsZUFBZTtBQUNtQixDQUNsQyxnREFBZ0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXNwcmluZy9kaXN0L3JlYWN0LXNwcmluZy5tb2Rlcm4ubWpzPzJhOTUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL2luZGV4LnRzXG5leHBvcnQgKiBmcm9tIFwiQHJlYWN0LXNwcmluZy93ZWJcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXNwcmluZy5tb2Rlcm4ubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/react-spring/dist/react-spring.modern.mjs\n"));

/***/ })

});